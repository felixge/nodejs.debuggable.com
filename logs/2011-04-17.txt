[00:00] n2liquid: but that doesn't change the fact that
[00:00] pdelgallego has joined the channel
[00:00] konobi: http://comments.gmane.org/gmane.comp.lang.javascript.nodejs/20575
[00:01] n2liquid: node-oauth, for example, didn't have to require('http')
[00:01] mcastner has joined the channel
[00:01] n2liquid: I'm sure there are other examples
[00:01] CrisO has joined the channel
[00:01] n2liquid: and connect-oauth didn't have to depend on connect
[00:01] n2liquid: it does a lot of things that are useful outside connect
[00:02] gqlewis has joined the channel
[00:02] n2liquid: they could have written those things separately and used an adapter to connect it to connect
[00:02] errorhandler has joined the channel
[00:02] konobi: (lack of namespacing)--
[00:03] n2liquid: konobi: one could say, yeah..
[00:03] n2liquid: namespacing doesn't solve it if people don't use it properly, though
[00:03] konobi: true
[00:03] n2liquid: actually, modules do the job pretty well
[00:03] mscdex: n2liquid: well, lots of people use connect/express/etc, so they will often develop directly for those frameworks
[00:04] n2liquid: mscdex: yeah, I get the reasoning
[00:04] n2liquid: but
[00:04] n2liquid: if you're doing it
[00:04] n2liquid: you might as well just abstract things a little bit more
[00:04] konobi: cpan++
[00:04] v8bot:  konobi has given a beer to cpan. cpan now has 2 beers.
[00:04] mscdex: perl--
[00:04] v8bot:  mscdex has taken a beer from perl. perl now has -1 beers.
[00:04] mscdex: :p
[00:04] konobi: mscdex--
[00:04] v8bot:  konobi has taken a beer from mscdex. mscdex now has 7 beers.
[00:05] mscdex: node++
[00:05] v8bot:  mscdex has given a beer to node. node now has 2 beers.
[00:05] n2liquid: and then if you abandon your project, people will have an easier time continuing your work
[00:05] mscdex: javascript++
[00:05] v8bot:  mscdex has given a beer to javascript. javascript now has 1 beers.
[00:05] n2liquid: n2liquid++++
[00:05] n2liquid: aw =\
[00:06] mscdex: n2liquid: i suppose, but if projects are abandoned, they most likely have to be modified to work with the newest versions of node
[00:06] timcosgrove has joined the channel
[00:06] mscdex: oh, and it looks like udp performance has improved since i last tried rtp
[00:06] timcosgrove has left the channel
[00:06] mscdex: :D
[00:07] n2liquid: mscdex: it turns out many of my needs could be so abstract they wouldn't even depend on Node
[00:07] n2liquid: I mean
[00:07] n2liquid: if you used http.createClient and it got deprecated, your code is deprecated
[00:07] n2liquid: but if you abstracted HTTP usage that would be no problem
[00:07] mediahack has joined the channel
[00:07] mikeal has joined the channel
[00:07] mscdex: you'd need some kind of api for the abstraction
[00:08] mscdex: and that could change
[00:08] mscdex: :S
[00:08] n2liquid: mscdex: suppose I just need to HTTP GET
[00:08] n2liquid: ok?
[00:08] mscdex: http.get()
[00:08] n2liquid: hold on
[00:08] mscdex: that's always been the same
[00:08] mscdex: :P
[00:08] n2liquid: huh, ok
[00:08] n2liquid: does it work on browsers?
[00:09] mscdex: no, but browsers are limited when it comes to making requests like that
[00:09] n2liquid: in any case
[00:09] mscdex: and you have to worry about cross-browser issues
[00:09] n2liquid: suppose you're going crazy
[00:10] n2liquid: and you suddenly realize your module should RPC something written in another language
[00:10] n2liquid: that would use a protocol entirely different from HTTP
[00:10] n2liquid: maybe you're encrypting things in some nasty way
[00:10] n2liquid: if you use http.get(), you'd have to change that
[00:10] mscdex: https.get() ?
[00:10] mscdex: heh
[00:10] n2liquid: I said nasty
[00:10] n2liquid: think nasty
[00:10] n2liquid: (:
[00:11] n2liquid: think it's going inside the Linux kernel or some very stupid and lunatic thing
[00:11] n2liquid: I mean
[00:11] n2liquid: ok
[00:11] n2liquid: rare, huh?
[00:11] n2liquid: but when you just put export a callback variable to be configured externally
[00:11] n2liquid: even the craziest things become possible
[00:12] n2liquid: I know it's easy to think: "who's gonna need that?"
[00:12] mscdex: i dunno, i guess i just have never had to need that kind of abstraction for projects i've worked on
[00:12] FireFly has joined the channel
[00:12] mscdex: plus i'm primarily a backend js developer now for the most part
[00:12] n2liquid: remember also that's not just for you, but for any crazy japanese that bumps into your code and gives it a new usage
[00:13] mscdex: it's so nice not having to worry about cross-browser junk :p
[00:13] n2liquid: lol, yeah
[00:13] Transformer has joined the channel
[00:13] n2liquid: I know
[00:13] asdfsafdsa: v8:
[00:13] v8bot: asdfsafdsa: undefined
[00:13] mscdex: well, anyone who needs that kind of abstraction can just write it themselves
[00:13] Emmanuel__ has joined the channel
[00:14] jakehow has joined the channel
[00:14] n2liquid: mscdex: I generally get really depressed when I bump into those things
[00:14] n2liquid: maybe I'm just a bad programmer, lol
[00:14] asdfsafdsa: v8: console.log('test'.substring(1, -1));
[00:14] v8bot: asdfsafdsa: "t"
[00:15] mscdex: but like i said, lots of modules are not meant to be compatible with the browser because they rely on the specific behavior of core node modules
[00:15] asdfsafdsa: v8: console.log('abcd'.substr(1, -1));
[00:15] v8bot: asdfsafdsa: ""
[00:15] mscdex: that you can't emulate (very well) in the browser
[00:15] n2liquid: eh, sure..
[00:15] mscdex: and even if you could, you'd have to keep tabs on behavior changes in each of the browsers out there
[00:15] mscdex: between versions
[00:15] n2liquid: but what about other solutions?
[00:16] mscdex: and al lthat
[00:16] n2liquid: like
[00:16] Transformer has left the channel
[00:16] n2liquid: there are other CommonJS engines, right?
[00:16] n2liquid: implementations*
[00:16] mscdex: there are some pure commonjs stuff on the module list
[00:16] mscdex: but it's minimal compared to pure node modules because you can't make any assumptions about the environment you're in
[00:16] n2liquid: CommonJS specifies that require('http').get() should work?
[00:17] mscdex: besides the basic stuff like require() and such
[00:17] TheIronWolf has joined the channel
[00:17] n2liquid: mscdex: I'll give you an example of something I've been working on
[00:17] asdfsafdsa: Is there a way to get the length up to the semi last character with substring or substr using a negative number?
[00:17] Casperin has left the channel
[00:18] mscdex: asdfsafdsa: lastIndexOf ?
[00:18] mscdex: wait, semi last character?
[00:18] hank_ has joined the channel
[00:18] awenkhh has joined the channel
[00:19] n2liquid: it's an authentication framework, meant for people to authenticate with services like Twitter and etc in a standard way
[00:19] n2liquid: I know there's OAuth
[00:19] n2liquid: and OAuth libraries
[00:19] n2liquid: but still some things could be made easier
[00:20] asdfsafdsa: mscdex: like 'abcd'.substring(0, -1)
[00:20] copongcopong has joined the channel
[00:20] n2liquid: the framework contains drivers for each service, and in the repo they're all inside a drivers/ subdir
[00:20] asdfsafdsa: mscdex: i want 'abc'
[00:20] n2liquid: at first I did if (using_node) { loadEverythingFrom('drivers/'); }
[00:20] mscdex: asdfsafdsa: not afaik, you'll have to use .length-1 or something
[00:21] saikat has joined the channel
[00:21] n2liquid: but then I noticed I could write another module, node-authmein, that used authmein (the core framework module) and used node to list all the drivers and send them to authmein
[00:21] asdfsafdsa: mscdex: i thought there might be a shortcut for it. oh well
[00:21] n2liquid: that way authmein earned a very pure API
[00:22] eb4890 has joined the channel
[00:24] jtrudeau has joined the channel
[00:28] realazthat_ has joined the channel
[00:28] awenkhh has joined the channel
[00:28] llkazu has joined the channel
[00:31] a|i has joined the channel
[00:34] llkazu: i assume folks would love a free-as-in-donations, reliable, scalable nodes hosting service?
[00:35] mscdex: the more the merrier!
[00:35] mscdex: ;)
[00:35] losing has joined the channel
[00:35] llkazu: so far none of the existing solutions do it right :-p
[00:36] muz1 has joined the channel
[00:36] highermath_away has joined the channel
[00:38] ryanfitz has joined the channel
[00:40] eee_c has joined the channel
[00:40] febits has joined the channel
[00:40] techwraith has joined the channel
[00:42] langworthy has joined the channel
[00:44] hello_ has joined the channel
[00:45] frank06 has joined the channel
[00:45] mcastner: so if I forked a project on github just to change xml2js to xml2js-expat
[00:45] mcastner: should I do a pull request? hahaha
[00:45] hello_: hey guys - i have an object method which uses some callbacks in conjunction with various functions, but i can't seem to use 'this' from within the callbacks. is there something i'm missing or is there some way to get around that?
[00:46] frank06: # Fatal error in /usr/local/n/node-v0.4.6/deps/v8/src/heap.h, line 1793
[00:46] frank06: # CHECK(object->IsHeapObject()) failed
[00:46] frank06: # Fatal error in /usr/local/n/node-v0.4.6/deps/v8/src/heap.h, line 1793   # CHECK(object->IsHeapObject()) failed
[00:46] frank06: ^ is this known?
[00:47] hello_: for instance, i'm using an api method which takes a callback, but i need to call that same api object (this.api) from within the callback
[00:47] techwraith has joined the channel
[00:50] Bwen has joined the channel
[00:51] jacobolus has joined the channel
[00:52] mscdex: hello_: use a 'self' object that saves 'this' and use that instead
[00:52] errorhandler has joined the channel
[00:52] errorhandler: is there something like pow (http://pow.cx) for node?
[00:53] techwraith: hello_: somewhere before the callback, do var self = this; then use self inside the callback :)
[00:53] langworthy has joined the channel
[00:53] frank06: any idea what is causing the segfault that i just posted?
[00:53] techwraith: errorhandler: not that I know of, but I'd be happy if you built one :)
[00:53] mscdex: frank06: what version of node are you using?
[00:54] techwraith: frank06: Nope :(
[00:54] errorhandler: techwraith: I might have to!
[00:54] frank06: same thing happened w/ 0.4.5 and 0.4.6
[00:55] mscdex: frank06: if you can boil it down to a simple test case and post a message about it on the nodejs-dev mailing list, you'll probably get an answer
[00:55] hello_: awesome, thanks guys. :)
[00:55] mscdex: frank06: v8 developers frequent there and in here
[00:55] llkazu: I'm looking for feedback from the community on what you're looking for in a hosting solution. http://qwk.io/bn3
[00:56] llkazu: any feedback would be MUCH appreciated, I want to make sure what I build actually solves someone's problems :-p
[00:56] frank06: mscdex: will do. i figured i'd check here first - thanks
[00:56] hassox has joined the channel
[00:58] janerecny has joined the channel
[00:59] LSU_JBob has joined the channel
[00:59] xiackok has joined the channel
[00:59] LSU_JBob: How do I get past this error? Error: node.js not compiled with openssl crypto support?  I've just installed openssl successfully, but how do I recompile now?
[01:00] llkazu: LSU_JBob, you running debian or ubuntu or something similar?
[01:00] llkazu: (and did you compile your own nodejs to begin with?)
[01:01] LSU_JBob: ubuntu and yes i believe so
[01:01] LSU_JBob: i got it from the git repo
[01:01] llkazu: you need to install libssl-dev
[01:01] llkazu: then just recompile as you had before
[01:01] llkazu: ./configure --prefix=whereveryouwantit
[01:01] llkazu: make
[01:01] no-gooder has joined the channel
[01:01] llkazu: make install
[01:01] llkazu: :-)
[01:01] LSU_JBob: what would be an example of "whteveryouwantit"
[01:02] llkazu: i usually do /usr, some people do /usr/local
[01:02] LSU_JBob: ah ok
[01:02] LSU_JBob: i have nodejs installed at /root/node
[01:02] LSU_JBob: so just go back into that directory and make then make install
[01:02] llkazu: then /root/node
[01:02] no-gooder: /usr/local/bin
[01:02] llkazu: i suppose so
[01:03] llkazu: I'm confused as to why you didn't install it system-wide
[01:03] llkazu: that seems silly to me :-p
[01:03] LSU_JBob: i'm a newb
[01:03] LSU_JBob: learning best practices still
[01:03] Bj_o_rn has joined the channel
[01:04] llkazu: run ./configure --prefix=/usr/local
[01:04] llkazu: then make
[01:04] llkazu: then make install
[01:04] LSU_JBob: ok
[01:04] echosystm: does anyone know if node + npm play nice when installed via brew yet?
[01:05] [[zz]] has joined the channel
[01:05] errorhandler: I've got npm installed but when trying to require('express') I get a error: Cannot find module
[01:06] no-gooder: errorhandler, try to install into /user/local/bin
[01:06] LSU_JBob: llkazu: it works! thank you so much!
[01:06] LSU_JBob: llkazu++
[01:06] v8bot:  LSU_JBob has given a beer to llkazu. llkazu now has 1 beers.
[01:06] llkazu: LSU_JBob, no prob :-) don't forget to install npm
[01:06] errorhandler: echosystem: I had a lot of trouble installing npm via homebrew I wouldn't if I was you
[01:06] LSU_JBob: llkazu: yes I already have
[01:06] akl has left the channel
[01:06] llkazu: LSU_JBob, you'll need to reinstall it now that you've put node in a different location.
[01:06] errorhandler: no-gooder: Install what?
[01:07] LSU_JBob: llkazu: ok i will reinstall it then
[01:07] jennings has joined the channel
[01:07] no-gooder: errorhandler, did you install express framework  ?
[01:08] errorhandler: yes
[01:08] andrewfff has joined the channel
[01:08] LSU_JBob: llkazu: all good now, resintalled and everything
[01:08] llkazu: woot :-)
[01:08] LSU_JBob: llkazu: i'm using the drupal 7 plugin
[01:09] johnciacia has joined the channel
[01:10] jetheredge has joined the channel
[01:12] artilect has joined the channel
[01:12] errorhandler: how can I find where npm install packages?
[01:13] no-gooder: npm ls
[01:14] no-gooder: check it before it's installed correctly
[01:15] no-gooder: npm ls installed
[01:16] max_dev has joined the channel
[01:16] no-gooder: also check npmrc file to see where your modules installed 
[01:16] errorhandler: empty
[01:17] mikeal has joined the channel
[01:17] no-gooder: ?
[01:17] xastey has joined the channel
[01:17] errorhandler: npmrc is empty
[01:18] Phyllio has joined the channel
[01:18] Vertice has joined the channel
[01:18] errorhandler: I just want to know the directory where the packages are installed
[01:19] llkazu: errorhandler, chances are they're in /usr/lib/node or /usr/local/lib/node
[01:19] F1LT3R has joined the channel
[01:20] hassox: ezmobius hey mate you here?
[01:20] hassox: bah
[01:22] Schmallon has joined the channel
[01:24] eyesUnclouded has joined the channel
[01:25] no-gooder: my modules are in /var/www/node modules
[01:25] gazumps has joined the channel
[01:26] llkazu: o.o
[01:26] llkazu: scary
[01:27] errorhandler has joined the channel
[01:27] errorhandler: is there a refreshing server for node?
[01:28] errorhandler: I saw a script that would refresh when the file was changed.... I can't find it
[01:28] ckknight: supervisor, errorhandler
[01:28] errorhandler: ?
[01:28] ckknight: https://github.com/isaacs/node-supervisor
[01:28] errorhandler: thanks
[01:29] ryanfitz has joined the channel
[01:31] ckknight: Hey all, I added client-side URL generation to my routing library, so that you could generate URLs client-side based on server-side configuration. If anyone wants to check that out: https://github.com/ckknight/escort
[01:31] olympum has joined the channel
[01:32] Opaque has joined the channel
[01:35] LSU_JBob has joined the channel
[01:36] kriszyp has joined the channel
[01:38] perlmonkey2 has joined the channel
[01:39] stagas has joined the channel
[01:41] stagas has joined the channel
[01:42] sako has joined the channel
[01:44] stagas has joined the channel
[01:48] mdwright_laptop has joined the channel
[01:48] JasonCoffin has joined the channel
[01:48] mdwright_laptop: I'm using fs.stat to look at some of the details of the file. How can I access the filename in the callback if I'm doing this for a list of files? I know I always have the option of using the synchronous version, but I'd prefer not to
[01:54] secoif has joined the channel
[01:54] JojoBoss has joined the channel
[01:56] pHcF has joined the channel
[02:00] Kami_: mdwright_laptop: well, if you use fs.stat you already know the file path and to get only the filename you can just use path.basename(filePath)
[02:02] mdwright_laptop: Kami_: Yeah, I'm iterating through a list of files though, so when I need the filename, the variable that's held it has been replaced. I suppose I could wrap the whole thing in a closure, but I'm not sure I gain any performance by being asynchronous then.
[02:05] b0t` has joined the channel
[02:05] Aria: Cost of closure vs cost of disk access? no contest.
[02:06] pauls has joined the channel
[02:06] ckknight: closures are super fast in V8
[02:06] pauls has joined the channel
[02:06] ckknight: making a billion of them might take a little while
[02:06] mdwright_laptop: Aria: No, you're right. I was thinking the closure might not return until I had done disk access anyways, but that wouldn't be the case
[02:06] ckknight: but a thousand would even be fine
[02:06] pauls: anyone know why i'd get a connect error "500 TypeError: Cannot call method 'toString' of undefined" only when going to www.server.com instead of server.com?
[02:06] febits[0] has joined the channel
[02:06] perlmonkey2 has joined the channel
[02:07] pauls: stack: http://pastebin.com/h1mWBEaL
[02:07] ckknight: see what the code is. It's open-source.
[02:07] Aria: Yeah, not at all. It might be a wash if the OS cache is hot, but that's only a rough order of magnitude guess.
[02:07] ckknight: line 136 of connect-mongodb.js
[02:09] pauls: derp. okay :)
[02:10] pauls: data.session must be undefined
[02:12] jjmalina has joined the channel
[02:13] samsonjs_ has joined the channel
[02:13] pauls: ticket mde.. https://github.com/masylum/connect-mongodb/issues/13
[02:17] chrislorenz has joined the channel
[02:18] Phyllio has joined the channel
[02:20] eyesUnclouded has joined the channel
[02:21] losing has joined the channel
[02:21] cloudhead_ has joined the channel
[02:22] pauls: anyone worked with node apn? https://github.com/argon/node-apn
[02:23] jacobolus has joined the channel
[02:24] A_Nub has joined the channel
[02:25] mdwright_laptop has left the channel
[02:26] ckknight: has someone written a bittorrent server in node yet?
[02:26] febits has joined the channel
[02:26] A_Nub: to host torrent files?
[02:26] A_Nub: bit torrent is client client
[02:26] A_Nub: other than trackers
[02:27] ckknight: no, I mean an announcer
[02:28] jaket has joined the channel
[02:28] A_Nub: did you check modules?
[02:28] A_Nub: https://github.com/WizKid/node-bittorrent
[02:28] ckknight: well, that's still a client, actually
[02:29] A_Nub: Ok I didnt read it ;)
[02:29] jacobolus has joined the channel
[02:29] A_Nub: by the same guy
[02:29] A_Nub: https://github.com/WizKid/node-bittorrent-tracker
[02:31] AAA_awright: Is anyone else using node-irc? It isn't detecting time-out disconnections and reconnecting
[02:32] AAA_awright: ...Should an IRC client be able to?
[02:33] A_Nub: yea
[02:33] A_Nub: mine does
[02:33] A_Nub: But it means you need to cache passwords
[02:33] A_Nub: which some people don't like
[02:34] AAA_awright: Well I'm talking about an IRC bot so that's not much of an issue
[02:34] A_Nub: oh yea
[02:34] A_Nub: well it should reconnect
[02:35] A_Nub: otherwise it would be bad bot if u had to manually reconnect
[02:36] chrislorenz has joined the channel
[02:36] A_Nub: the idea of bot usually mean autonomous 
[02:41] muz1 has joined the channel
[02:44] Wraithan has joined the channel
[02:45] Wraithan: Is there a reason/way to prevent https://gist.github.com/923676 from taking up 400mb of ram after a couple days of running?
[02:45] Wraithan: (aka I am new to node so how did i mess up)
[02:46] losing has joined the channel
[02:47] A_Nub: Wraithan: are you joking?
[02:47] Wraithan: A_Nub: nope
[02:47] ngs has joined the channel
[02:49] kawaz_work has joined the channel
[02:50] A_Nub: I dont see how it can take up that much ram
[02:50] Wraithan: A_Nub: nor I, but it was after about 3 days, maybe a little more maybe a little less
[02:51] Wraithan: I wrote it to play with things, it isn't how I plan on consuming my redis queue, but when I noticed I had problems I decided I'd ask to see what I did wrong.
[02:51] A_Nub: Wraithan: sounds like garbage collection is not working
[02:52] A_Nub: blpop returns the two element multi bulk
[02:52] ngs has joined the channel
[02:52] A_Nub: its like that is being retained
[02:52] A_Nub: is my guess
[02:53] A_Nub: try var tmp = client.blpop….;
[02:53] A_Nub: delete tmp;
[02:53] A_Nub: see if that accumulates the same ram
[02:53] A_Nub: (warning this could be potentially dangerous)
[02:53] jetheredge has joined the channel
[02:53] A_Nub: on dangerous to items in the redis stack
[02:53] A_Nub: but
[02:53] A_Nub: it might confirm the garbage collection problem
[02:54] A_Nub: by the redis stack I mean its ram
[02:54] A_Nub: but since its poping
[02:54] A_Nub: i doubt it will cause  aproblme
[02:54] A_Nub: problem*
[02:56] ianfarrell has joined the channel
[02:59] bingomanatee has joined the channel
[03:01] Eber has joined the channel
[03:03] chrislorenz has joined the channel
[03:04] tedsuo has joined the channel
[03:04] ryanfitz has joined the channel
[03:04] ianfarrell has joined the channel
[03:05] zubin_ has joined the channel
[03:06] yozgrahame has joined the channel
[03:06] zubin_: Sup everybody -> wanted y'all to try this self-expiring node powered chatroom - Chrome, FF or iOS only for now... room expires in 50 mins... 
[03:07] zubin_: link: https://shh.sh/p497d1c7318d4bc59ad6456c370b04e6e
[03:08] k1ttty has joined the channel
[03:09] Wraithan: A_Nub: cool, I'll give that a go, thanks!
[03:12] ianfarrell has joined the channel
[03:13] llkazu: lol, more chatrooms!
[03:13] Wraithan has left the channel
[03:15] monokrome has joined the channel
[03:15] monokrome: hey
[03:15] Aria has joined the channel
[03:16] monokrome: What is the error that I need to catch in order to prevent my express app from crashing?
[03:16] monokrome: I tried: app.on('unhandledException', function (err) { })
[03:16] monokrome: but that didn't help
[03:17] tbranyen: monokrome: process.on('unhandledException'
[03:18] monokrome: Is process a global?
[03:18] tbranyen: yea
[03:19] monokrome: process.on('unhandledException', function (err) { console.dir(err) })
[03:19] monokrome: That isn't working
[03:21] tbranyen: maybe its uncaught
[03:21] tbranyen: did you look it up?
[03:21] tbranyen: or are you guessing like me?
[03:21] monokrome: Yeah, everywhere I saw used 'unhandledException'
[03:21] eventi has joined the channel
[03:21] monokrome: ah
[03:21] monokrome: It is uncaught though :)
[03:21] monokrome: Thanks for your help.
[03:21] tbranyen: np
[03:23] monokrome: Now back to figure out this ECONNREFUSED :(
[03:23] xtianw_ has joined the channel
[03:25] zcopley has joined the channel
[03:25] tbranyen: monokrome: the password is GUEST
[03:26] Bloc has joined the channel
[03:26] creationix has joined the channel
[03:26] Bloc has joined the channel
[03:27] omni5cience has joined the channel
[03:27] creationix: Is there a good build of gnome3 and gtk3 for Ubuntu yet?
[03:27] monokrome: tbranyen: what?
[03:28] creationix: oops, wrong room ;)
[03:28] cloudhead has joined the channel
[03:28] tbranyen: gnome3 looks ugly man you gonna hate yourself
[03:28] tbranyen: although isn't it all web sexiness based
[03:28] creationix: the window manager is written in JavaScript
[03:28] creationix: and I think the theming engine uses a css parser
[03:29] creationix: this community has spoiled me
[03:29] creationix: I can't seem to get any answers from anyone in gnome land
[03:29] halfhalo: ew, gnome 3
[03:29] tbranyen: heh, latest gtk supposedly will have web interoperability or something too
[03:30] tbranyen: i'll believe it when i see it
[03:30] creationix: like gtk implemented in html?
[03:30] astropirate: Gnome panel is pretty good looking. the Only i had with it was it was uber un customizable :(
[03:30] HelenWaite has joined the channel
[03:30] creationix: gnome-shell you mean?
[03:31] halfhalo: can't stant gnome 3, nor unity
[03:31] tbranyen: creationix: gtk
[03:31] tbranyen: i dunno what gnome-shell is
[03:31] astropirate: creationix, hehe yes thats what i mean
[03:31] astropirate: gnome-shell is what you think of when you think gnome 3
[03:31] tbranyen: oh talking to astropirate 
[03:31] muz1 has joined the channel
[03:32] creationix: astropirate: right
[03:32] tbranyen: http://tech.slashdot.org/story/11/03/17/1739233/Gtk-32-Will-Let-You-Run-Applications-In-a-Browser
[03:32] tbranyen: just seems so out of scope i don't even get it
[03:32] marcello3d: is there any way to get a serialization of a closure's scope?
[03:32] astropirate: I'm a Qt guy :)
[03:32] creationix: tbranyen: I think that's just some vnc like thing
[03:33] tbranyen: astropirate: get us bindings to qt pls
[03:33] llkazu: <3 qt
[03:33] creationix: marcello3d: not in vanilla js
[03:33] marcello3d: in node.js?
[03:33] creationix: I think QT is ugly (the ui)
[03:33] astropirate: tbranyen, i was thinking that then was like ssssssssss that sounds like too much work
[03:33] astropirate: creationix, lol seriously?
[03:33] creationix: I really like the gnome look
[03:33] tbranyen: creationix: oh thats not what i thought at all
[03:34] astropirate: Opera has a beautiful UI and it uses Qt
[03:34] creationix: heh, I also think opera is ugly
[03:34] astropirate: :(
[03:34] creationix: I guess I'm uniform with taste
[03:34] tbranyen: opera ugly no way
[03:34] marcello3d: yea it's pretty ugly
[03:34] marcello3d: on mac os x anyway
[03:34] deepu has joined the channel
[03:34] astropirate: Opera is beautiful but i don't like using it. Its a bit querky
[03:35] creationix: I think chrome is pretty
[03:35] creationix: simplicity is my style
[03:35] astropirate: its mehh
[03:35] llkazu: i <3 chrome
[03:35] llkazu: opera is meh
[03:35] astropirate: I'd take anything over the Mac theme though.. w/e its called
[03:35] creationix: I just want a way to write native desktop apps with node
[03:35] astropirate: gnome kde w/e
[03:36] creationix: I was thinking some sort of webkit bindings
[03:36] marcello3d: prism?
[03:36] tbranyen: lol chrome does not have simplicity over my opera config
[03:36] creationix: where you had a webview and that was your app
[03:36] astropirate: Air is propitiatory right?
[03:36] marcello3d: http://prism.mozillalabs.com/
[03:37] mikeal has joined the channel
[03:37] creationix: yeah, prism is no good, I don't want xulrunner
[03:37] creationix: way too much bloat for my needs
[03:37] astropirate: *proprietary
[03:37] marcello3d: can't help you there
[03:37] jesusabdullah: Sup creationix ! Long time no see
[03:37] creationix: I mean, how hard can it be to have a webkit window
[03:37] creationix: jesusabdullah: hey
[03:37] k1ttty has joined the channel
[03:37] creationix: webOS has kept me pretty busy lately
[03:38] halfhalo: suuure
[03:38] halfhalo: :p
[03:38] tbranyen: creationix: yeah i'm with you on the native apps stuff, i wanted to slowly port over some opengl methods to just get a basic display window created
[03:39] tbranyen: so i could pump rgb image data and get a video feed of the kinect depth map
[03:39] mansoor-s: So has node.js just killed Google go in its crib?
[03:39] tbranyen: qt or gtk bindings would be nice too
[03:39] creationix: tbranyen: once I get node-gir finished than it's trivial to make a webkitgtk window
[03:39] bnoguchi has joined the channel
[03:40] creationix: and the contents could be all html + css so it wouldn't have to look like gnome
[03:40] halfhalo: hmm.... wonder if titanium could be messed with for stuff
[03:40] mansoor-s: creationix, node-gir? link please
[03:40] tbranyen: node-ffi :(
[03:40] tbranyen: isn't that gonna be slow as p?
[03:40] creationix: https://github.com/creationix/node-gir
[03:40] creationix: tbranyen: slow is relative
[03:40] tbranyen: creationix: i dunno seems ffi has a lot of hate around it
[03:40] creationix: I'm not making millions of ffi calls per second
[03:40] deepu: i was trying to connect mongodb to nodejs .. does it requires to load any drivers for it
[03:41] tbranyen: creationix: i'll fork your project and see if i can help any, i'm not as good as samcday at bindings, but i've written a couple
[03:41] deepu: is there any good tutorial for connecting node.js with mongodb
[03:41] creationix: also we could do like the seed guys did and have native bindings for performance sesitive things and ffi for the rest
[03:42] langworthy has joined the channel
[03:42] creationix: tbranyen: I have very little C experience and finding good docs for gnome things is like pulling teeth
[03:42] tbranyen: oh you only hvae a readme atm
[03:42] tbranyen: forked that for nothing heh
[03:43] creationix: tbranyen: yeah, I spent all day today writing an app using seed to get a feel for gir from javascript
[03:43] creationix: it's not too bad, once you know gtk
[03:43] creationix: https://github.com/creationix/webOS_IDE/blob/master/app/CodeEditor.js
[03:44] creationix: seed's module system is really weird though
[03:44] ryan0x2 has joined the channel
[03:44] jesusabdullah: I'd hang and chat but shit's going down in my living room,
[03:44] jesusabdullah: Saturday game night!
[03:44] halfhalo: ACTION likes where that ide is going
[03:44] jesusabdullah: Also planning my trip to the bay
[03:44] tbranyen: creationix: imports thing?
[03:44] jesusabdullah: If any of you are in PNW and want to meet up, gimme a pm and maybe I'll drop by!
[03:44] jesusabdullah: This would be in June sometime
[03:45] creationix: imports for ffi and builtins and Seed.include for js modules
[03:45] creationix: but include is just a load+eval
[03:46] creationix: halfhalo: yeah, we need a tool, I'm just having a hard time finding a good gui kit for node
[03:46] tbranyen: oh right forgot you work for palm xD
[03:46] creationix: halfhalo: open the glade file in resources for a rough idea of how it looks
[03:47] tbranyen: webos is the only mobile platform i'd be serious developing for
[03:47] halfhalo: I usually just use textmate, but thats mac only, which sucks
[03:47] halfhalo: ACTION is trying to get an internship there this summer
[03:47] creationix: halfhalo: yeah, I use gedit or vim
[03:47] tbranyen: tried winmo, iphone, and android and couldn't get into any of them
[03:47] creationix: but the problem is it's a pain to transfer files, clear the webkit cache, package ipks, etc...
[03:47] creationix: a custom gui with an explicit workflow for webos would rock
[03:48] halfhalo: I have been playing with sublime 2, but havent forked over the cash due to it being alpha/beta right now
[03:49] creationix: hmm, haven't heard of that one, is it a textmate clone?
[03:49] halfhalo: its similar
[03:49] creationix: gedit is actually quite similar once it's customized right
[03:49] halfhalo: mac/win/linux as well
[03:49] ziro` has joined the channel
[03:49] tbranyen: sublime has that cool minimap
[03:49] tbranyen: that i want to port over to vim
[03:50] tbranyen: one of these days...
[03:50] halfhalo: I refuse to use linux on any of my computers as the main os
[03:50] tbranyen: really?
[03:50] halfhalo: I do not want to deal with all the hassle it entails
[03:50] tbranyen: laptop, server and desktop are all arch linux now
[03:50] creationix: halfhalo: exactely why I use linux, I don't want the hassle from others
[03:50] tbranyen: its been pretty liberating
[03:50] halfhalo: I do dev on a mac
[03:51] tbranyen: yeah mac works too, but linux by far is easier to dev on
[03:51] creationix: well, ubuntu and sometimes arch, the other linuxes are a lot of hassle
[03:51] creationix: I do miss dtrace from osx sometimes though
[03:51] systemfault: tbranyen: The rolling release model never caused you any problem?
[03:52] AAA_awright: Releases suck. Majorly.
[03:52] creationix: wow, sublime 2 is ugly, what's it gui toolkit?
[03:52] creationix: and it's about page won't close on my window manager
[03:52] halfhalo: I tried using ubuntu on my laptop... I really did... but I just couldn't.  It pissed me off to much
[03:52] stephen_mcd has joined the channel
[03:52] creationix: halfhalo: depends on the hardware, some simply won't support it
[03:52] tbranyen: ubuntu pisses me off too, which is why i use arch ;-)
[03:53] creationix: it's not like osx runs on more hardware than ubuntu
[03:53] AAA_awright: Which is why I use Gentoo
[03:53] tbranyen: start minimalist and work your way up
[03:53] creationix: yeah, if you have the time, arch is a real treat
[03:53] tbranyen: AAA_awright: if gentoo doesn't piss you off, you arne't doing it right
[03:53] halfhalo: creationix: its not the hardware, its little things in the ui that add up and annoy the crap out of me
[03:53] AAA_awright: pffft
[03:53] systemfault: Arch is a must :)
[03:53] creationix: no, other than compile time, gentoo is nice
[03:53] joshthecoder has joined the channel
[03:53] creationix: but arch feels a lot cleaner and more modern
[03:54] AAA_awright: Is YOUR kernel 3.6M?
[03:54] systemfault: creationix: Compile time is the reason why it shouldn't be used :P
[03:54] creationix: plus is suppports binary packages out of the box
[03:54] tbranyen: emerge --update world *snore*
[03:54] tbranyen: wake me up in 6 or 7 hours
[03:54] creationix: 6 hours, not a  bad machine
[03:55] tbranyen: AAA_awright: nope as bleeding edge as arch gets i prefer to work with the stable 2.6.*
[03:55] mscdex: i use lunar linux on my old epia board
[03:55] mscdex: :-D
[03:55] tbranyen: although tbqh i've never heard of 3.6M
[03:56] tbranyen: i'm sure googling will enlighten me
[03:56] creationix: what's the average size of an ubuntu kernel?
[03:56] AAA_awright: For my servers I've got one machine doing the compiling which pushes the updates out to the other VPSes with less memory, it works really well
[03:56] systemfault: I have 4GB of ram ;)
[03:56] AAA_awright: I'm booting up my Ubuntu system right now to see
[03:56] Astro has joined the channel
[03:56] tbranyen: oh lol Megs
[03:56] tbranyen: -_-
[03:56] AAA_awright: I pulled it off of ls -lah
[03:57] systemfault: 4MB on ubuntu server...
[03:57] secoif has joined the channel
[03:57] doubletap has joined the channel
[03:57] creationix: ubuntu server is pretty lean
[03:57] doubletap has left the channel
[03:57] creationix: reminds me of arch, but not quite as vanilla
[03:57] systemfault: Arch is simply the best
[03:57] creationix: I've always liked vanilla gnome over the ubuntu customized one
[03:57] tbranyen: arch just has really great support in irc, wiki, aur, etc
[03:58] halfhalo: ACTION busts out win 200 advanced
[03:58] tbranyen: i've never found myself wondering how to do something
[03:58] halfhalo: awwwww yeah
[03:58] AAA_awright: 4.4M kernel plus 13M initrd whatever that does
[03:58] systemfault: I would use it at work but I fear that the rolling release model might cause me problems..
[03:58] tbranyen: halfhalo: awww yea dude all my windows vms atm are nlite'd win2k
[03:58] creationix: I can't believe unity if the default in 11.04
[03:58] systemfault: creationix: Yeah, it's very stupid.
[03:58] AAA_awright: It's crashed on me about a dozen times now.
[03:58] systemfault: creationix: The shell is nowhere near being ready
[03:59] creationix: though, I will say gnome-shell isn't any more stable in ubuntu
[03:59] deepu: hi i was trying to connect mongodb with nodejs using http://paste.ubuntu.com/595029/ i get an error that Db is not defined
[03:59] systemfault: creationix: It's worse.
[03:59] creationix: has anyone tried it with arch
[03:59] systemfault: creationix: Stability-wise
[03:59] creationix: systemfault: right
[03:59] systemfault: creationix: Because compiz is a lot more mature than mutter
[03:59] creationix: I mean, it's not like gnome3 is beta or anything, it's been out for a while now
[03:59] tbranyen: :-/ nope i've been using awesomewm and openbox/xfce
[03:59] tbranyen: cause like awesome has awesome in the name
[04:00] tbranyen: we should just make our own wm, how hard could it be D:
[04:00] systemfault: Ewww
[04:00] creationix: tbranyen: exactely why I want good gui bindings for node
[04:00] systemfault: XLibs... are... awful
[04:01] creationix: tbranyen: gnome-shell is spidermonkey and written in javascript
[04:01] tbranyen: what a bunch of queercakes using spidermonkey
[04:01] creationix: of course, using clutter and others to do the heavy lifting
[04:01] creationix: gjs is spidermonkey and seed is javascriptcore (webkit js)
[04:02] deepu: hi i was trying to connect mongodb with nodejs using http://paste.ubuntu.com/595029/ i get an error that Db is not defined
[04:02] tbranyen: you keep mentioning seed, i'll need to look that up
[04:02] tbranyen: oh lol thats basically what you're doing with node
[04:02] creationix: tbranyen: http://live.gnome.org/Seed and here is a seed app I've been working on today. https://github.com/creationix/webOS_IDE
[04:03] tbranyen: creationix: yeah i was looking at the source that explains why it doesn't look like node xD
[04:03] tbranyen: i figured you had some weird loader someplace
[04:03] creationix: no, I much prefer vanilla node requires
[04:03] creationix: I hate custom loaders
[04:03] llkazu: soooo who thinks i can build a fully-functional, scalable, reliable nodejs hosting service by this time tomorrow!
[04:03] tbranyen: god damnit i want that in node so bad
[04:04] tbranyen: i'd even use gnome
[04:04] creationix: tbranyen: node-gir, how hard can it be?
[04:04] andrewfff has joined the channel
[04:04] deepu: i am still strugling to connect database.. god knows about total app
[04:04] creationix: deepu: sorry, I've never used mongo
[04:05] tbranyen: creationix: have you done any more than the readme yet?
[04:05] llkazu: deepu, whats your problem? i use mongo
[04:05] deepu: ok
[04:05] deepu: i am still strugling to connect database.. god knows about total app
[04:05] deepu: hi i was trying to connect mongodb with nodejs using http://paste.ubuntu.com/595029/ i get an error that Db is not defined
[04:05] llkazu: ACTION looks
[04:05] deepu: i got an error
[04:05] llkazu: which driver are you using
[04:05] creationix: tbranyen: nothing substantial
[04:05] tbranyen: creationix: so you aren't married to the ffi idea?
[04:05] Viriix has joined the channel
[04:05] creationix: tbranyen: I went through pquerna's old article on writing node extensions
[04:05] deepu: i am new to nodejs i dont know which driver to use actually
[04:06] llkazu: deepu, i'd suggest starting with mongoose then.
[04:06] monokrome: Does fs.readFile transparently create a variable called path somehow within the handler function?
[04:06] llkazu: http://mongoosejs.com/
[04:06] llkazu: its more.. ORM-ish
[04:06] creationix: tbranyen: I like ffi because it makes building easier
[04:06] creationix: and then you can access anything in the gnome ecosystem
[04:06] deepu: #llkazu thanks
[04:06] tbranyen: i don't see how you can't do that with native bindings either, i think once you see some of the code the pattern is quite easy to get by with
[04:06] creationix: monokrome: no, why
[04:06] llkazu: no probably
[04:06] tbranyen: and you don't really need to worry about scaling
[04:06] llkazu: *problemo
[04:07] monokrome: creationix: Because I am getting a 'path' variable changed for no apparent reason
[04:07] tbranyen: since its only going to run on a single machine
[04:07] creationix: tbranyen: exactely
[04:07] monokrome: creationix: http://paste.pocoo.org/show/373108/
[04:08] monokrome: On line 10, path is the result of require('path') as expected
[04:08] creationix: monokrome: like 34
[04:08] creationix: btw, this is why I CamelCase my modules when I require them
[04:08] monokrome: on like 13, it's set to the same value as default_styles_route
[04:08] creationix: reduces accidental conflicts
[04:08] monokrome: oh jeez
[04:08] monokrome: I didn't use var
[04:08] creationix: yep
[04:09] halfhalo: ACTION prefers random var names like... iuasheu24hiu231ib2
[04:09] monokrome: That still doesn' explain why on like 10 it's what I expected it to be
[04:09] monokrome: but oh well. Thank you :)
[04:09] monokrome: ACTION changes it to, var route = route || default_styles_route
[04:10] Twelve-60: how to catch an ETIMEDOUT for a http.get request?
[04:10] creationix: monokrome: good question, I'd assume 34 executes before the get_stylesheet function
[04:10] monokrome: creationix: But the configure_styles function sets up the view routing
[04:10] monokrome: So, the view can't be called before that line executes
[04:10] creationix: dunno
[04:11] monokrome: Oh well. Hehe :)
[04:11] creationix: I occasionally run code through jslint to find errors like that
[04:11] creationix: it's really good at pointing out accidental globals
[04:11] ryanfitz has joined the channel
[04:12] creationix: tbranyen: so you said you have C experience?
[04:13] tbranyen: creationix: i have experience bringing c libs into node yea
[04:13] tbranyen: i have libcwiid for wiimote and libgit2 for git
[04:13] creationix: I think all I need help with is binding libgirepository.so to node
[04:13] tbranyen: my wiimote one isn't released yet since i'm trying to finish a basic game with it
[04:13] creationix: and I can do the rest in JS
[04:14] creationix: my worry is that the glib event loop will block node's event loop
[04:14] creationix: but I think there are ways to make the two share
[04:14] tbranyen: creationix: nah you can spawn a second event loo
[04:14] tbranyen: p
[04:14] tbranyen: i'm doing that with my wiimote stuff
[04:14] creationix: right, but the node loop will need to access stuff in the glib loop
[04:15] tbranyen: i'm able to emit events from the second loop
[04:15] creationix: so both are in the same thread then?
[04:15] tbranyen: checking my code to see how this works
[04:15] springmeyer has joined the channel
[04:16] tedsuo has joined the channel
[04:16] tbranyen: oh right i pass in my c++ object instance as data into the libev watcher
[04:16] tbranyen: so i can emit events
[04:16] creationix: http://software.schmorp.de/pkg/EV-Glib.html
[04:16] creationix: I guess it's been solved before, that's good to know
[04:16] tbranyen: https://github.com/tbranyen/nodewii/blob/master/src/wiimote.cc
[04:17] timmywil_ has joined the channel
[04:17] creationix: nice
[04:17] creationix: yeah, if you can help me with gir bindings I could have all sorts of fun
[04:18] tbranyen: yeah learning libev def helped
[04:18] tbranyen: it works like settimeout and setinterval based on the params
[04:18] tbranyen: or*
[04:18] Ond has joined the channel
[04:18] tbranyen: i was accidentally setting a setinterval inside a setinterval before and wondering why only a few events ever emitted xD
[04:20] creationix: so I was thinking ffi for now and then native later?
[04:20] tbranyen: the original author of the libgit2 bindings for node used ffi
[04:20] creationix: since gnome is really pushing gir as a first-class scripting platform
[04:20] tbranyen: i dunno
[04:20] tbranyen: seems dirty
[04:21] creationix: yeah, you lose a lot of protection
[04:21] creationix: the flexibility of scripting, but still prone to segfaults
[04:21] tbranyen: yea i've been slowly going through all my nodegit code with valgrind looking for segfaults/memleaks
[04:22] tbranyen: i've got a few memleaks atm that need to be fixed
[04:22] tbranyen: but seems fairly stable for the most part
[04:22] creationix: cool, if I ever rewrite wheat I might use it
[04:23] muz1 has joined the channel
[04:24] Twelve-60: how to catch an ETIMEDOUT for a http.get request?
[04:24] tbranyen: i pulled the gobject-introspection project
[04:25] tbranyen: http://sharefilewith.me/u/dbcf10.png << lol girepository is quite big
[04:25] tbranyen: just a matter of scanning the headers and making a list of all the methods
[04:25] tbranyen: figuring out which ones are crucial
[04:25] tbranyen: for a demo/getting started
[04:25] halfhalo: the ones with a g in their name
[04:25] tbranyen: lol
[04:26] tbranyen: http://bit.ly/tb_methods << i did this for libgit2 methods
[04:26] tbranyen: something similar for this would work well to track
[04:27] creationix: wow, that's a nice table
[04:27] tbranyen: hell if we could just get the included example to work
[04:27] tbranyen: that'd be cool
[04:27] tbranyen: glib-print.c
[04:27] creationix: wow, that's a lot bigger than I thought
[04:28] tbranyen: yeah but 100% coverage isn't required
[04:28] tbranyen: ... yet
[04:28] creationix: no wonder they have to push people to use it instead of just generating static bindings
[04:28] tbranyen: http://pastie.org/1802660
[04:28] tbranyen: is a demo app included
[04:28] tbranyen: could start by just implementing those methods
[04:28] tbranyen: i wanna see if i can get it to compile and work first tho
[04:29] c4milo1 has joined the channel
[04:30] creationix: I built seed today
[04:30] tbranyen: also i need to do this on a faster computer compiling is so slow on this dual core
[04:31] creationix: it was pretty fast, but jsc used a system library
[04:31] indutny has joined the channel
[04:31] creationix: node without v8, c-ares, or openssl is pretty darn fast too
[04:31] creationix: faster even
[04:31] tbranyen: once i learned about JOBS=4 on my quad
[04:31] tbranyen: holy shit
[04:31] tbranyen: compiled in like 45 seconds on a q6600
[04:32] creationix: my z800 at work is beefy
[04:32] creationix: since I get to compile webkit, kernel, glib, and node on a regular basis
[04:32] halfhalo: ACTION pets his q6600 at 3.6GHz
[04:32] creationix: oh, and qt
[04:32] tbranyen: ha i've compiled webkit before and that was large too
[04:33] tbranyen: when i compiled chrome dev from source
[04:33] creationix: about the same as qt if I remember riht
[04:33] tbranyen: never again
[04:33] creationix: made v8 look tiny
[04:33] tbranyen: creationix: how do you like it at palm?
[04:33] creationix: it's great, just keeps me a bit busy
[04:34] creationix: buy they let me keep speaking at conferences which is great
[04:34] creationix: just not much time to hang out in here
[04:34] tbranyen: yeah irc at work is a productivity killer
[04:34] kriszyp has joined the channel
[04:34] creationix: my last job was essentially node evangelism so hanging out in here was sortof part of the job
[04:35] creationix: but even then it was a time sink
[04:35] halfhalo: heh
[04:37] creationix: tbranyen: what sort of minimal sample do you need?
[04:37] creationix: kriszyp: evening
[04:37] iFire has joined the channel
[04:37] kriszyp: hi criswell
[04:37] tbranyen: creationix: well just something to see it working in action, even if its just spawning a window
[04:37] kriszyp: oops
[04:38] kriszyp: hi creationix
[04:38] kriszyp: autocomplete fail
[04:38] creationix: kriszyp: have you ever worked with gjs or seed (gnome)
[04:38] kriszyp: no, I haven't :/
[04:38] creationix: ok, just curios, since you've been doing server-side js since before node
[04:39] tbranyen: http://packages.debian.org/sid/libgirepository-1.0-1 also where in the f is the source for this ...
[04:39] tbranyen: (and yes i clicked the source button)
[04:40] tbranyen: i guess its part of that build i just did, weird
[04:40] creationix: kriszyp: that auto-complete failure is actually funny, my last name is "caswell" and I thought you had made a pun of some sort on purpose
[04:40] tbranyen: libtool: install: /bin/install -c .libs/libgirepository-1.0.a /usr/local/lib/libgirepository-1.0.a
[04:40] tbranyen: awwww yea
[04:40] creationix: tbranyen: nice
[04:40] tbranyen: sweet so that part is over with
[04:41] creationix: tbranyen: you rock
[04:41] tbranyen: 1am, skipping church tomorrow woot
[04:41] tbranyen: which means my parents aren't buying me breafast :-/
[04:41] seivan has joined the channel
[04:41] creationix: heh, I'm teaching sundayschool
[04:41] creationix: I'll nap afterwards
[04:41] Aikar: um
[04:41] tbranyen: haha
[04:42] tbranyen: just take a bathroom break and crash for like 30 minutes
[04:42] halfhalo: lol
[04:42] Aikar: client.on('drain', senddata);  senddata();
[04:42] Aikar: if senddata calls .write(), shouldnt that keep pumping data to the stream?
[04:42] Aikar: im only getting 1 drain event
[04:42] creationix: Aikar: why not use .pipe()
[04:43] mscdex: fo reals
[04:43] Aikar: im not reading from a pipe lol
[04:43] Aikar: i was just trying to write a ton of data at a connection and wanted to use drain instead of setInterval
[04:43] Aikar: as a way of "go as fast as you can"
[04:43] creationix: ahh, your source isn't a stream, I see
[04:44] mscdex: make that sucker a stream!
[04:44] mscdex: that'll make your data go pew pew
[04:44] Aikar: theres no need in this case lol
[04:45] Aikar: im trying to benchmark the receiver end, so the sender is simply just needing to send as much data as fast as possible
[04:45] creationix: tbranyen: I think all I need is I give the library the path to a .typelib file and it gives me back all the ffi signatures.
[04:45] creationix: wouldn't that be enough for manual usage?
[04:45] tbranyen: maybe, can you do that and give me the output?
[04:45] tbranyen: i'm just curious as to what the signatures look like
[04:46] tbranyen: it does look as tho this lib was designed with ffi in mind
[04:46] creationix: it was
[04:46] xandrews has joined the channel
[04:47] creationix: my other plan was to implement a typelib parser in javascript
[04:47] creationix: but that's probably a bad idea
[04:47] creationix: seeing how large that library does, there is probably a lot of complexity in there
[04:48] Aikar: so my wormhole lib looks to be parsing about 20k messages/sec on 1 process (maxing out a cpu core)
[04:48] tbranyen: yeah i'd just like to see that 46 line example code to run in node
[04:48] tbranyen: and my familiarity with ffi is pretty weak
[04:48] creationix: 46 line gtk sample?
[04:48] creationix: in javascript
[04:48] tbranyen: http://pastie.org/1802660
[04:48] tbranyen: ths one
[04:49] tbranyen: just a 1:1 of that
[04:49] Aikar: oh hmm
[04:49] Aikar: USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
[04:49] Aikar: aikar    13732 75.9  1.1 633928 45820 pts/1    R+   00:46   2:25  |   \_ node sntprecv.js
[04:49] Aikar: using process.nextTick isnt even maxing out the cpu
[04:49] tbranyen: my philosophy has been to create a 1:1 low level api of a native lib and then a convenience wrapper on top of that
[04:50] creationix: tbranyen: sounds like a plan
[04:50] tbranyen: even if that means sacrificing some performance
[04:50] Aikar: or weird, it is in htop
[04:50] creationix: writing layers on top in JavaScript is something I can do
[04:50] creationix: I find that in node, it's not always slower
[04:50] creationix: the vm is happier when you stay in js land more
[04:51] tbranyen: yeah but i mean making calls into c++ is slower
[04:51] creationix: true, if it means more calls
[04:51] creationix: well, get it working first, if it ends up being a bottleneck, then we can worry
[04:51] errorhandler has joined the channel
[04:51] creationix: I hate over-complicating things for issues that you might never have
[04:51] tbranyen: yea def, even if it bottlenecks (which it won't) can figure out other ways
[04:52] creationix: I'm still trying to figure out what that 46 line example does
[04:52] errorhandler: which is the best vim plugin for jade.... theres 3 on github?
[04:52] tbranyen: heh i ran it and it gave me some weird output
[04:53] tbranyen: would probably work better if i actually installed gnome instead of just gnome-common
[04:53] Aikar: hell yeah
[04:53] Aikar: 36k messages/sec for small "real world" messages
[04:53] tbranyen: vm time
[04:53] creationix: tbranyen: wait, is it making the ffi call directly?
[04:54] creationix: I thought it just returned data
[04:54] creationix: ACTION wishes he knew more c
[04:54] tbranyen: i wish i knew more about libgirepository
[04:54] creationix: Aikar: nice
[04:54] tbranyen: but this is just using that library directly without ffi
[04:54] ryah: it's really too bad that gnome isn't using node.
[04:55] marcello3d: woot
[04:55] creationix: ryah: working on it ;)
[04:55] marcello3d: mongolian deadbeef v0.1.7 released: https://github.com/marcello3d/node-mongolian
[04:55] marcello3d: preliminary support for auth and mapreduce
[04:55] marcello3d: but mostly untested because I don't use either personally >_>
[04:56] creationix: tbranyen: what was the magic line to compile the file?
[04:57] tbranyen: creationix: ./autogen.sh and then running make worked for me
[04:57] tbranyen: the actual build line is probably in the Makefile and around the lines of gcc -lgirepository sourcefile.c
[04:58] Aikar: @.@ hit 50k/sec now
[04:59] Aikar: im making this lib to be used in an rpc framework, so i think this is a pretty good sample data: client.write({call: 'foo', args: [1,2,3,2222,true,"false",{x:'y'}]});
[04:59] Aikar: receivers parsing 50k messages/sec with steady memory
[04:59] tbranyen: $(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glib_print_CFLAGS) $(CFLAGS) -MT glib_print-glib-print.o -MD -MP -MF $(DEPDIR)/glib_print-glib-print.Tpo -c -o glib_print-glib-print.o `test -f 'examples/glib-print.c' || echo '$(srcdir)/'`examples/glib-print.c
[04:59] Aikar: using msgpack streaming interface :)
[04:59] tbranyen: found that line
[05:00] creationix: Aikar: very nice
[05:00] Aikar: http://github.com/aikar/wormhole
[05:01] Aikar: sending is slower than receiving it seems
[05:01] creationix: Aikar: it's like socket.io for non-browsers
[05:02] Aikar: my send process is pegged at 93-100% cpu with receiver at 80%
[05:02] Aikar: creationix: well yeah socket.io is a messaging system
[05:02] mikegerwitz has joined the channel
[05:02] mikegerwitz has joined the channel
[05:02] Aikar: but wormhole is aimed strongly at performance, so im using msgpack
[05:02] indutny: ryah: ping?
[05:03] Viriix has left the channel
[05:03] creationix: Aikar: do you have custom framing or just what's included with msgpack?
[05:04] creationix: and are you using msgpack rpc for rpc
[05:05] Aikar: no
[05:05] Aikar: im building an rpc library
[05:05] Aikar: going to be alot more than what msgpack-rpc provides tho
[05:05] Aikar: goal is to provide similiar to Erlangs OTP system
[05:06] Aikar: you throw a new box into the cluster, and functions just magically call on it
[05:06] creationix: I see
[05:07] Aikar: but yeah check wormholes source, its not that complicated, mainly relying on the streaming nature of msgpack deserializer
[05:07] creationix: tbranyen: want write access to my repo? or do you want to just send me pull requests when you have stuff
[05:07] Aikar: i feed mp data, mp informs me when a message is complete
[05:07] creationix: Aikar: yeah, I was planning on making something like that for ipc between nodes
[05:07] bojicas has joined the channel
[05:07] devrim has joined the channel
[05:07] tbranyen: creationix: lets see if i can get anything to work, once proof-of-concept is down, write access would be more convenient
[05:07] jaket has joined the channel
[05:08] iFire has joined the channel
[05:08] broofa has joined the channel
[05:08] Aikar: looks like im capping out at 50k/sec on a 3.4ghz cpu and im bottlenecked at send level
[05:09] Aikar: >>> node sntprecv.js 
[05:09] Aikar: 18968k: 50.13917268250389 messages/secc
[05:09] Aikar: forgot the k on debug line lol
[05:09] dguttman has joined the channel
[05:10] creationix: I wonder how bad a js parser of typelib would be http://developer.gnome.org/gi/unstable/gi-gtypelib.html
[05:10] creationix: that might be enough to get me going
[05:10] creationix: I just need to call existing gir libraries
[05:10] creationix: I don't want to define my own
[05:11] insin has joined the channel
[05:12] tbranyen: you know whats nice about JS, theres only like 8 freaking data types
[05:12] creationix: are there that many?
[05:12] halfhalo: ACTION needs to see what msgpack is, because it sounds similar to one of his ideas he wants to do
[05:12] creationix: number, null, boolean, undefined, object, function
[05:12] creationix: hmm, string
[05:13] Aria: string
[05:13] tbranyen: string
[05:13] tbranyen: heh
[05:13] halfhalo: more than ruby, which has object, object, object and object
[05:13] creationix: lies
[05:13] Aria: Or immediate object and not-immediate object.
[05:13] creationix: it's all propaganda
[05:13] Aria: Or a bazillion types of object.
[05:13] tbranyen: creationix: also array
[05:13] Aikar: ryah: can you give me a quick glance over and see if i did anything wrong here for V8 stuff? https://github.com/aikar/wormhole/blob/master/src/wormhole.cc
[05:13] creationix: no, array is just object
[05:13] tbranyen: debatable
[05:13] Aria: Yeah. Arrays count as a separate type to me, too. They don't work as normal objects do.
[05:14] tbranyen: i can create array like objects like function arguments
[05:14] tbranyen: but they are not the one true array
[05:14] creationix: with es5 you can do it
[05:14] halfhalo: to rule them all?
[05:14] Aria: Heh, and then there's the arguments type.
[05:14] tbranyen: http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/
[05:14] tbranyen: i think es5 still has some issues
[05:14] creationix: ok, fine 8 types
[05:14] tbranyen: :3
[05:15] creationix: but only 1 number type
[05:15] creationix: and like what, 64 in C?
[05:15] tbranyen: creationix: i did like two days worth of msvc++ for mobile dev and wanted to shoot myself
[05:15] systemfault: Number is basically a C double
[05:15] Aria: Heh. Yeah.
[05:15] tbranyen: like 16 different string types
[05:15] Wraithan has joined the channel
[05:16] kriszyp has joined the channel
[05:16] Aria: I really wish Javascript Numbers were exact decimals.
[05:16] Aria: I still think that should be the default in most languages.
[05:16] Wraithan: Is there a preference (couldn't find any comparisons on the web) in nodegit vs node-gitteh ?
[05:17] systemfault: Aria: Number as doubles seems more "natural" to me
[05:17] halfhalo: :/ desktop just BSODS
[05:17] systemfault: Even though I agree that I would prefer exact decimals
[05:17] Aikar: dont use windows ;)
[05:17] Aria: If you work in graphics, doubles make sense. If you work with "human" numbers, exact makes sense.
[05:17] Aikar: ubuntu ftw
[05:17] halfhalo: hothothot case is hot owow
[05:17] Aria: I really want both in every language, but I think exact should be the default.
[05:18] tbranyen: Wraithan: heh i wrote nodegit samcday wrote gitteh
[05:18] Aria: (and I think explicit casts should be needed to convert)
[05:18] tbranyen: Wraithan: depends on what you want to do
[05:18] samcday: Neither have really been around long enough for there to be a "preference" really ;P
[05:18] tbranyen: sam has put a shit load of time into gitteh to make the backend stable
[05:19] halfhalo: hmm... I think my computer may have overheated slightly
[05:19] Wraithan: tbranyen: using it for a git backed wiki setup
[05:19] Remoun has joined the channel
[05:19] creationix: halfhalo: that's what happens when you built qt
[05:19] Wraithan: tbranyen: is the plan at least
[05:19] tbranyen: Wraithan: you'll have better luck with gitteh atm
[05:19] tbranyen: more coverage
[05:19] halfhalo: the mobo chipset reads 95C
[05:20] tbranyen: nodegit is still chugging along
[05:20] creationix: halfhalo: ouch
[05:20] Aikar: building node debug ver made me think my tower was about to launch off, i had to turn the fans up to max, i usually run them on lowest lol
[05:20] mjr_ has joined the channel
[05:20] tbranyen: Wraithan: http://bit.ly/tb_methods you can see the coverage i have as of 0.0.3
[05:21] kriszyp2 has joined the channel
[05:21] creationix: mjr_: evening
[05:21] indutny: how can I build native module w/ "node_crypto.h" include?
[05:22] Wraithan: tbranyen: neat spreadsheet!
[05:22] chrislorenz has joined the channel
[05:22] tbranyen: Wraithan: yeah i need to run through it again to ensure its up-to-date
[05:22] tbranyen: another thing to put on my todo list :)
[05:23] Wraithan: tbranyen: Thanks for the tips, I'll likely go with gitteh, per your suggestion, though by the time I get to implementing it who knows how the playing field will have changed
[05:23] tbranyen: creationix: i'm not opposed to trying out ffi as well if you want to give that a shot on your end
[05:23] tbranyen: Wraithan: yeah play with both if you find any bugs in nodegit i'd appreciate them
[05:24] tbranyen: watch the project to, i have no intentions on stopping the development till it hits a production ready version
[05:24] dandean has joined the channel
[05:24] creationix: tbranyen: I'm not sure what I can do on my own
[05:24] tbranyen: creationix: oh lol i thought you were gonna try the ffi stuff
[05:25] Wraithan has left the channel
[05:25] creationix: well, I wanted node-gir to give me the ffi signatures
[05:25] iFire` has joined the channel
[05:25] halfhalo: ok, computer down from burning temps for now
[05:25] tbranyen: creationix: https://github.com/tjfontaine/node-libgit2/blob/master/lib/error.js
[05:26] tbranyen: node-ffi looks pretty easy to work with
[05:26] creationix: yeah
[05:26] creationix: maybe I should just look up the type defs from the typelib or xml gir files
[05:26] samcday: ffi looks like alot of overhead though
[05:26] creationix: and generate a lot of javacsript
[05:26] tbranyen: yea
[05:26] samcday: JS -> C++ bridge is already savage enough
[05:27] tbranyen: samcday: for this implementation tho, i'm not so sure how crucial speed will be
[05:27] creationix: samcday: nah, writing apps in html is slow
[05:27] mikeal1 has joined the channel
[05:27] creationix: I bet ffi gtk will be a lot faster
[05:27] samcday: Fair enough :)
[05:27] ajpiaNOU has joined the channel
[05:28] mjr_: hey creationix, how goes the world of mobile node
[05:28] mjr_: ?
[05:28] boaz has joined the channel
[05:28] creationix: ok, now to get node-ffi working with node 0.4.6 and npm
[05:28] tbranyen: heh i never got node-ffi installed
[05:28] cloudhead2 has joined the channel
[05:28] tbranyen: took longer than npm install node-ffi so i bailed
[05:28] creationix: mjr_: not much going on node side at the moment, we're busy finishing for the june release of the tablet
[05:28] tbranyen: creationix: can you hook me up w/ said tablet
[05:28] tbranyen: for ... testing
[05:29] iFire has joined the channel
[05:29] creationix: tbranyen: if only
[05:29] mjr_: creationix: I've been digging in to riak for the last few weeks.  It's pretty interesting.
[05:29] halfhalo: ACTION wants one for testing....
[05:29] timcosgrove has joined the channel
[05:30] timcosgrove has left the channel
[05:30] sechrist has joined the channel
[05:31] creationix: mjr_: yeah, it reminded me of my "advanced OS" class in graduate school
[05:31] sechrist: Anybody taken nodelite and compiling it into node?
[05:31] throughnothing has joined the channel
[05:32] creationix: we learned lots of algorithms and protocols for distributed systems
[05:32] mjr_: Lots of things that have the word "lamport" in them
[05:32] creationix: yep, those are very useful
[05:32] creationix: I had many a quiz and test with "lamport *" things in them
[05:32] sechrist: Vax finger worm ftw
[05:34] dandean: I was just about to ask a question, then I stopped and read the manual! You're all proud of me, right?
[05:34] jacobolus: is there a good way to turn an async API sync? i.e. wrap it in a function that returns a value rather than invoking a callback?
[05:34] tbranyen: blasphemy
[05:35] halfhalo: whomever made one of those would be both beloved and hated by all at the same time
[05:35] jacobolus: the particular example here is the stylus css renderer, which is currently async, but for reasons entirely unclear
[05:36] jacobolus: I want to just run this thing in a little offline script; if it's slow, that doesn't matter at all
[05:36] muz1 has joined the channel
[05:36] jacobolus: tbranyen: so is that a "no" then?
[05:37] tbranyen: jacobolus: you can't turn an async library "synchronous" you can make it easier to use higher level, but if it doesn't expose any synchronous methods i don't see how you can make it sync
[05:37] jacobolus: basically using this API asynchronously is going to more than double the complexity of my tiny little script
[05:37] llkazu: boot makes me grumpy.
[05:37] llkazu: *boto
[05:37] cloudhead2 has joined the channel
[05:37] tbranyen: jacobolus: make wrappers then?
[05:37] llkazu: it doesn't properly support route53 yet.
[05:38] harth has joined the channel
[05:38] jacobolus: tbranyen: that doesn't help anything, if they're also async. oh well, it's not too big a deal
[05:38] cloudhead_ has joined the channel
[05:38] tbranyen: jacobolus: it reduces complexity which you are complaining about
[05:39] jacobolus: the API isn't complex, it's just that if I can do it synchronously I can drop it nicely into my existing structure, whereas if it's async it requires special casing
[05:39] jacobolus: nevermind though
[05:39] admc has joined the channel
[05:40] Phyllio has joined the channel
[05:40] creationix: jacobolus: for what it's worth, there are such tools, but they aren't vanilly javascript and change the semantics of the event loop
[05:40] echosystm: has anyone here used cloudfoundry?
[05:40] creationix: *vanilla
[05:40] echosystm: and, if so, how long did it take for your account to be enabled?
[05:41] jacobolus: it's too bad I can't say like "block on this execution context until the callback gets called" or similar :)
[05:41] llkazu: well
[05:41] jacobolus: creationix: yeah, that'd be more trouble than it's worth
[05:41] llkazu: put whatever you want to happen enxt
[05:41] llkazu: in the callback
[05:41] llkazu: et voila, you get the same thing
[05:41] creationix: jacobolus: right, you can with coroutine extensions, but I find it's better to just re-organize code
[05:42] jacobolus: llkazu: yes, that's fine; it just requires some code rewriting and a result that is rather more complicated than before
[05:42] llkazu: only mentally, and only until you get used to it
[05:42] jacobolus: no, not only mentally
[05:43] jacobolus: also taking up physical characters in my file
[05:43] llkazu: lol
[05:43] jacobolus: and increasing the nesting depth by a couple indents
[05:43] jacobolus: anyway, no worries
[05:43] jacobolus: thanks for the replies
[05:44] jeffmoss has left the channel
[05:44] creationix: jacobolus: you're right.  Though with time, you find new techniques for async code and it ends up not being not much more complicated.  Plus you can do things that weren't possible with sync code like parallel I/O waits
[05:44] ngs has joined the channel
[05:44] llkazu: mmmm, parallel io waits <3
[05:44] llkazu: event-driven code, continuation-based design, its all so lovely...
[05:44] jacobolus: I've done plenty of event-driven code; it's just sometimes unnecessary
[05:45] steph021_w has joined the channel
[05:45] tbranyen: creationix: i have 9% battery left, i'm tackeling this in the AM
[05:45] tbranyen: i'll hit you up on github/here if i get anywhers
[05:45] iFire` has joined the channel
[05:46] creationix: tbranyen: ok, I'll not be on much tomorrow
[05:46] creationix: it's my day off from programming
[05:46] tbranyen: ryah: you're giving up awesomewm for gnome :O
[05:46] ngs has joined the channel
[05:46] llkazu: bah, engineers never have real days off from programming
[05:46] tbranyen: ha my extended weekend is supposed to be off from programming, but i realized i don't do much else since its cold outside
[05:47] samcday: http://www.bitcoin.org/ holy shit that looks cool, and kinda scary
[05:47] llkazu: its either being typed, or being written in their heads only to be typed later
[05:47] timcosgrove1 has joined the channel
[05:50] creationix: llkazu: true, but I try
[05:50] llkazu: XD
[05:50] llkazu: dammit, has nobody built a half-decent library for amazon's webservices? :-( I'm getting to the point that i'll have to build half of my shard management scripts in python!
[05:51] llkazu: and i dislike that concept lol
[05:51] llkazu: (i love python, but it seems wrong to build half of a nodejs hosting service in python)
[05:51] Phyllio has joined the channel
[05:52] jjmalina has left the channel
[05:52] samcday: llkazu, that's half the fun of node.js, getting to reinvent everything in javascript ;)
[05:52] llkazu: bah! humbug :-)
[05:52] samcday: But I'm sure I've seen a few amazon libs on module wiki page
[05:52] samcday: Maybe that was just s3 though (there's like a billion s3 node libs)
[05:52] llkazu: most of them are broken :-/ i've tried 3 so far
[05:53] deepu: #llkazu i still find errors in connecting nodejs to mongodb with mangoose
[05:53] llkazu: deepu, like what?
[05:53] deepu: unexpected identifiers
[05:53] llkazu: pastebin
[05:54] samcday: mangoose lol
[05:54] samcday: Is that like a horrific man/goose experiment gone wrong?
[05:54] llkazu: indeed, samcday 
[05:54] samcday: ACTION tries to imagine what it would even look like.
[05:54] llkazu: the thought scares me deeply.
[05:55] deepu: #llkazu http://paste.ubuntu.com/595045/
[05:55] insin: honk honk
[05:55] sechrist has joined the channel
[05:55] llkazu: i think a few puppies died when yu were writing this code.
[05:56] deepu: it says connect is not an identifier
[05:57] sreeix has joined the channel
[05:57] kriszyp has joined the channel
[05:57] llkazu: you imported the thing wrong
[05:57] llkazu: remove the .Mongoose
[05:58] llkazu: var mongoose = require('mongoose'); mongoose.connect('mongodb://krillr:a4bg5ka9@tempest.mongohq.com:10015/krillr_large');
[05:58] llkazu: like that
[05:58] llkazu: please ignore the random password from mongohq :-)
[05:58] Opaque has joined the channel
[05:59] llkazu: …actually, i think i changed that already. so who cares. lol.
[05:59] deepu: Object #<Mongoose> has no method 'noSchema'
[05:59] deepu: i got the above error now
[06:00] beejeebus has joined the channel
[06:00] llkazu: hmm....
[06:00] llkazu: ya, that seems to have been removed.
[06:01] deepu: how to specify username and password in this mongodb 
[06:01] deepu: i was following http://blog.learnboost.com/blog/mongoose/ tutorial 
[06:02] doubletap has joined the channel
[06:02] llkazu: ancient tutorial is ancient
[06:02] llkazu: go here http://mongoosejs.com/
[06:05] timcosgrove has joined the channel
[06:05] gazumps has joined the channel
[06:05] timcosgrove has left the channel
[06:05] timcosgrove has joined the channel
[06:06] timcosgrove has left the channel
[06:07] iFire has joined the channel
[06:08] apang42 has joined the channel
[06:08] iFire` has joined the channel
[06:10] timcosgrove has joined the channel
[06:10] timcosgrove has left the channel
[06:15] jetienne has joined the channel
[06:16] timcosgrove has joined the channel
[06:16] apang42 has left the channel
[06:16] saikat has joined the channel
[06:18] samcday: Anybody see the ridiculous excuse M$ gave for not even considering to implement WebGL? :P
[06:18] timcosgrove has joined the channel
[06:18] timcosgrove has left the channel
[06:18] skm has joined the channel
[06:20] insin: not native enough?
[06:20] zomgbie has joined the channel
[06:24] samcday: insin: haha ;) That too
[06:25] samcday: But apparently because their rendering engine utilizes gpu in pipeline, and chakra does too, they don't need webgl.
[06:25] beawesomeinstead has joined the channel
[06:25] beawesomeinstead has joined the channel
[06:25] Swimming_bird has joined the channel
[06:25] ianfarrell: typical microsoft logic
[06:25] samcday: Perhaps, but do they really expect people to be that stupid?
[06:26] samcday: Software rasterizer on a html5 canvas with awesome gpu optimizations or not, is still not the same as a hardware rasterizer...
[06:27] ianfarrell: how is webgl hardware
[06:27] ianfarrell: (lost me at gpu)
[06:27] samcday: It's an opengl implementation, so it utilizes gpu for 3d rendering
[06:27] ianfarrell: okay, that's what i thought
[06:28] samcday: Which is going to be ALOT faster than say, writing a software rasterizer (software based 3d scene drawing) in Javascript (using canvas)
[06:28] samcday: Even if the JS running in Chakra (IE9 js engine) is getting accelerated by gpu
[06:29] samcday: It makes me sad, because if you go check out mrdoob's three.js on a webgl browser, your mind will be fkin blown
[06:29] ianfarrell: yeah, i have
[06:29] samcday: But 40%+ of the world will not see it
[06:29] samcday: ACTION cries in a corner
[06:29] altamic has joined the channel
[06:30] ianfarrell: does webgl has built-in anti-aliasing support?
[06:30] insin: what are they driving at with holding IE back from older versions of windows? All the best alternatives run right back to XP and businesses are often stuck with webapps which only work on earlier versions in any case
[06:31] samcday: ianfarrell, probably, webgl is basically just opengl es with a different name ;P
[06:32] samcday: insin, Incentivizing upgrading from winxp
[06:32] samcday: Same way they tried that by only blockbusters like Halo2 to be run on Vista
[06:32] samcday: Which I always thought was hilarious...
[06:32] samcday: only allowing*
[06:33] tfe_ has joined the channel
[06:33] tfe_ has joined the channel
[06:34] losing has joined the channel
[06:37] matjas has joined the channel
[06:38] dmojoryder has joined the channel
[06:38] jjmalina has joined the channel
[06:42] davidcoallier has joined the channel
[06:55] SvenDowideit_ has joined the channel
[06:58] wilmoore has joined the channel
[06:58] zomgbie has joined the channel
[07:00] phluffy has joined the channel
[07:03] __tosh has joined the channel
[07:07] febits has joined the channel
[07:10] sako_ has joined the channel
[07:10] mytrile has joined the channel
[07:12] Druide_ has joined the channel
[07:16] Bj_o_rn has joined the channel
[07:17] bojicas has joined the channel
[07:17] micheil has joined the channel
[07:19] onre has joined the channel
[07:21] artilect has joined the channel
[07:22] hnguyen_ has joined the channel
[07:23] okuryu has joined the channel
[07:25] micheil has joined the channel
[07:26] enos_feedler has joined the channel
[07:27] marlun: Ond: Hello again, I didn't get it working yeasterday (launching editor and getting back to nodejs script after saving). I didn't understand your last answer about launching a new shell. I also asked the question here: https://groups.google.com/forum/#!topic/nodejs/ZLnp0FmWL6Y
[07:29] Ond: Hey! I was actually wondering whether you got that to work.
[07:29] A_Nub has left the channel
[07:29] Casperin has joined the channel
[07:30] Ond: I think you want to spawn a  new process
[07:30] Ond: http://nodejs.org/docs/v0.4.6/api/child_processes.html#child_process.spawn
[07:31] saikat has joined the channel
[07:32] stride: marlun: vim uses ncurses, even if that works you won't get usable output
[07:32] stride: which it presumably won't do because vim never quits / closes STDOUT and exec buffers until it does iirc
[07:33] sreeix has joined the channel
[07:35] JojoBoss has joined the channel
[07:37] davidcoallier has joined the channel
[07:37] llkazu: ACTION grumbles
[07:37] llkazu: that does it. 
[07:37] llkazu: I'm not even going to try to write this in javascript
[07:37] llkazu: its going to be python
[07:38] llkazu: ACTION sighs
[07:38] llkazu: yes, thats right, the administrative tools and the API that powers my nodejs hosting service.
[07:38] llkazu: will be python.
[07:38] llkazu: i know, i know. its terrible.
[07:38] llkazu: but it simply can't be done quickly enough in nodejs in a way that makes me happy.
[07:40] insin: it's not like you *have* to dogfood it :)
[07:40] msucan has joined the channel
[07:40] llkazu: but i soooo wanted to :-p
[07:40] kawaz_air has joined the channel
[07:40] marlun: Ond, stride: What about if I don't get the user but only create a new file and remember the filename, open vim and let the user write to the file and when the user saves the doc and exit vim I get back to the script where I read from the file?
[07:40] altamic has joined the channel
[07:41] llkazu: ill probably write the first version in python, then slowly redo it in javascript
[07:41] sledge has joined the channel
[07:42] chapel: llkazu: seems like a cop out
[07:42] micheil has joined the channel
[07:42] llkazu: more like, "i don't want to spend 2 months rebuilding boto in javascript just for the sake of releasing this service, so I'm going to use a tool that lets me get it done faster"
[07:44] chapel: eh, good luck making another hosting service, its not bad to have more, but it just seems like everyone is doing one
[07:45] hojberg has joined the channel
[07:45] sako has joined the channel
[07:46] llkazu: ya, but everyone's doing it so /wrong/.
[07:46] llkazu: I've been in the hosting business for 10 years.
[07:46] llkazu: and frankly the current offerings appall me.
[07:47] llkazu: nodester runs everything off a single machine with no proper load-balancing, redundancy, or anything (though the simple curl-based api is pretty neat)
[07:47] llkazu: no.de requires wayyyy too much maintenance for quick-and-dirty application deployment
[07:48] llkazu: etc etc etc
[07:48] llkazu: plus everyone's in "beta" status right now and won't speak a word about final pricing.
[07:49] dahankzter has joined the channel
[07:49] lorhko has joined the channel
[07:50] marlun: Ond: Also thought I should maybe do spawn('/bin/bash', ['vim', 'tempfile'], function() {...}) but that doesn't seem to work either.
[07:50] llkazu: i dunno, maybe I'm just grumpy because i recently had my wisdom teeth taken out :-p
[07:51] rchavik has joined the channel
[07:53] Emmanuel__ has joined the channel
[07:54] Opaque has joined the channel
[07:55] Nexxy has joined the channel
[07:55] Nexxy has joined the channel
[07:56] eb4890 has joined the channel
[07:56] marlun: Ond: Argh, I have to go again but if you think of anything please just write it out and I'll check the backlog when I get back :) (or answer the mailinglist thread)
[07:56] kawaz_air has joined the channel
[07:57] Ond: Alright
[07:58] chapel: llkazu: no worries, I don't like nodester, its barely a hello world hosting project
[07:58] chapel: no.de is high quality, but it definitely is more involved at the moment
[07:59] llkazu: i agree no.de is high-quality, most of joyent's stuff is awesome.
[08:00] llkazu: my goal is to build something with the quality and robustness of no.de with the ease-of-use that nodester provides
[08:00] llkazu: and hopefully with the awesome add-on services that heroku provides through 3rd-parties.
[08:01] akavlie has joined the channel
[08:02] fly-away has joined the channel
[08:02] eb4890_ has joined the channel
[08:02] llkazu: my other goal is to have the main hosting service be purely donation-based, you get as much capacity as you want for free, but you're invited to donate.
[08:02] llkazu: premium services i'll be charging for. i haven't quite decided what premium services are though.
[08:03] akavlie: what's everyone using for templating with node.js?
[08:03] Ond: EJS
[08:03] Ond: A lot of people use Jade it seems
[08:03] llkazu: akavlie, i've not been doing templating on the server side. i've been using socket.io/nowjs to send data to the browser then using query's built-in template language.
[08:03] llkazu: the dojo toolkit has a plugin available that parses django-style templates, too, which i've been pondering looking at
[08:04] akavlie: llkazu, you mean jquery's template language?
[08:06] Ond: You could also use underscore if you want to go there. You have options.
[08:06] akavlie: llkazu, and if you do, it has nothing built in... would it be this? http://api.jquery.com/category/plugins/templates/
[08:06] llkazu: ah, yes, sorry, i forgot it was a plugin.
[08:06] llkazu: its supposed to be integrated in eventually
[08:06] aurynn has joined the channel
[08:07] akavlie: Ond, yeah looked at that too. Seems there are def. plenty of options.
[08:07] akavlie: even those that shun traditional templating entirely
[08:07] llkazu: TBH unless you absolutely have to, rendering templates server-side is silly. its a waste of consolidated resources.
[08:07] llkazu: doing template rendering client-side distributes that load quite well
[08:08] llkazu: and makes your server-side stuff more like a web service, and your client-side stuff more like a real web app
[08:08] SvenDowideit_ has joined the channel
[08:08] llkazu: which is where html5 is really going anyway
[08:08] SvenDowideit_ has joined the channel
[08:09] akavlie: llkazu, yeah, seems like client-side rendering may be a good idea.
[08:09] akavlie: I'm used to Django and other Python stuff. I love the templating there.
[08:09] newy_ has joined the channel
[08:10] llkazu: ACTION nods
[08:10] llkazu: jinja2 is my favorite templating engine ever
[08:10] llkazu: i assume you've used it?
[08:11] akavlie: llkazu, yep, that's probably my favorite too.
[08:12] akavlie: loved Django templates... Jinja2 is very similar but it has some extra capabilities.
[08:12] copongcopong has joined the channel
[08:12] llkazu: and jinja2 is much faster
[08:13] llkazu: i've always been annoyed with how slow django templates are out of the box
[08:13] akavlie: how do you even notice a difference in speed? I don't.
[08:13] akavlie: benchmarks?
[08:14] llkazu: practice :-p i've got a web app that gets 25m+ views per day, the only way i can keep it running on the 3 machines i've got is to use jinja2 instead of django templates.
[08:14] akavlie: Anyway I like all the stuff you get w/ those template languages like filters. And I much prefer curly braces to <%= %> syntax.
[08:14] llkazu: the pages are MASSIVE, usually around 1MB, with long iterations over long lists. thats where django templates really fall down
[08:15] llkazu: +1
[08:15] Ond: If you're using express you can set the open/close tokens
[08:15] akavlie: llkazu, which app??
[08:15] llkazu: http://search.secondlife.com/ :-)
[08:15] stride: akavlie-- for reminding me of JSP on a sunday.
[08:15] llkazu: i work for linden lab
[08:15] stride: :)
[08:16] akavlie: wow
[08:16] coreb has joined the channel
[08:16] zcopley has joined the channel
[08:16] qFox has joined the channel
[08:16] akavlie: stride, is <%= %> JSP? I just know it from ERB and some of the JS templating libraries I was looking at tonight which parrot it.
[08:16] llkazu: this page took 2.5 second to render with django templates: http://world.secondlife.com/place/60f4adf7-d7c7-76d1-ca61-11ccc83af23e
[08:17] llkazu: *seconds
[08:17] chapel: llkazu: you really should look into dnode
[08:17] llkazu: takes under 300ms with jinja2 precompiled
[08:17] chapel: and browserify
[08:17] stride: akavlie: yeah, it outputs stuff there :)
[08:17] chapel: with those two, you can rock anything else
[08:17] llkazu: chapel, been looking at dnode as an alternative to nowjs. nowjs has been making me sad.
[08:17] akavlie: llkazu, ever thought about pagination?  :-)
[08:17] chapel: SubStack makes some quality stuff
[08:17] Melkor has left the channel
[08:18] llkazu: akavlie, looooong story on why we aren't paginating.
[08:18] tjgillies: llkazu: what makes you mad about it?
[08:19] llkazu: tjgillies, what makes me sad about it is more about socket.io than nowjs itself. but nowjs doesn't let me connect to multiple web socket servers, which bugs me. i'd like to connect to a click-stat server to send like click/action data from the web app to some logging system, while connecting to some central user authentication and preferences system for that type of data, then connect individually to different web socket services for wha
[08:19] llkazu: tever the user currently wants to do
[08:20] chapel: dnode does that llkazu
[08:20] llkazu: chapel, yup! which is why I'm pondering moving to it.
[08:20] llkazu: my biggest blocker right now is socket.io not scaling well.
[08:20] chapel: you've seen browserling?
[08:20] llkazu: ACTION nods
[08:21] llkazu: browserling is crazy awesome
[08:21] chapel: they use dnode for almost everything in the backend
[08:21] chapel: the whole infrastructure is dnode based
[08:21] llkazu: nice.
[08:21] chapel: you know its quality when they actually use it for real problems
[08:21] Kingdutch has joined the channel
[08:22] llkazu: ACTION nods
[08:22] chapel: I actually haven't used now.js, just because I prefer dnode, and see no reason to switch
[08:22] chapel: I am a bit biased
[08:22] jetienne: anybody doing applications which upload picture to twitter ?
[08:22] rchavik has joined the channel
[08:22] chapel: but to me, now.js seems more like a toy than a tool
[08:23] llkazu: indeed.
[08:23] tjgillies: i use my tool as a toy
[08:23] llkazu: XD
[08:24] llkazu: the interactive traffic visualizer that I'm building into my nodejs hosting service will be using dnode.
[08:24] Guest67480 has joined the channel
[08:24] chapel: cool
[08:24] chapel: there are a couple of those floating around
[08:24] jetienne: is there a doc on dnode ?
[08:25] chapel: a doc?
[08:25] chapel: you mean like tutorial?
[08:25] Ond: https://github.com/substack/dnode
[08:25] jetienne: yeah something which tell me what it does and how to use it 
[08:25] Ond: See above
[08:26] chapel: well there is that, also substacks blog
[08:26] tjgillies: jetienne: http://substack.net/posts/9bac3e
[08:28] d0k has joined the channel
[08:29] jetienne: yep seems nice rpc mecanism. i like the fact a client may be node.js or browser
[08:29] SubStack: chapel: backend AND frontend!
[08:30] chapel: well yeah
[08:30] chapel: I guess that was assumed
[08:30] llkazu: now my question is, has dnode solved the scaling problems inherent to socket.io? where  it can't seem to track connections across servers? :-p
[08:30] chapel: SubStack: I would love to see a breakdown on how you run browserling in the backend
[08:31] chapel: llkazu: not built in, but it wouldn't be hard
[08:31] chapel: since you could keep track of everything between processes
[08:31] chapel: they might not share memory, but you can easily share state
[08:31] jetienne: llkazu: chapel: yep i think it could/should be done on top of socket.io
[08:31] chapel: jetienne: dnode is built on socket.io
[08:31] llkazu: with nowjs, socket.io keeps complaining "cannot find client with session id XXX" and killing things.
[08:31] llkazu: ACTION should try dnode sooner rather than later
[08:32] chapel: but also has standard sockets for non-browser clients
[08:32] SubStack: chapel: it's just a loose federation of processes that all talk to each other
[08:32] jetienne: chapel: ok... why are you telling me that ? dnode is solving the multi server issue ?
[08:32] chapel: you said my name jetienne
[08:33] jetienne: chapel: hmm ok micommunication i guess
[08:33] SubStack: dnode is pretty much just a trick to let you pass around functions in json
[08:33] SubStack: surprisingly tricky to do
[08:33] jetienne: chapel: i was thinking about the multi server issue because i need a solution for it for http://easywebsocket.com
[08:33] chapel: but it works so elegantely
[08:33] chapel: elegantly
[08:34] jetienne: SubStack: simple and selfcontain. nicely done
[08:34] jetienne: SubStack: how stable it is ?
[08:34] SubStack: well I've used rpc systems before I wrote dnode so I know some of the pain points
[08:34] SubStack: node already takes care of the asynchronous pain point
[08:35] SubStack: and javascript has a pretty standard way of passing around data structures with json
[08:35] jetienne: for http://pacmaze.com too i need multiserver socket.io stuff
[08:35] pdelgallego_ has joined the channel
[08:35] pdelgallego has joined the channel
[08:36] jetienne: SubStack: well dnode api is nice, many would have made a features monster :)
[08:36] chapel: SubStack: well as you know with toe (pyrotechnik's game) the problem is similar, but probably a bit more demanding
[08:36] jetienne: ok how to do this multiserver socket.io ?
[08:37] soulofpeace has joined the channel
[08:37] jetienne: browser/server communication by socket.io for sure
[08:37] micheil: jetienne: easywebsocket.com?
[08:38] jetienne: server/server communication... not sure
[08:38] jetienne: micheil: oh my bad http://easywebsocket.org
[08:38] chapel: jetienne: dnode handles that
[08:38] jetienne: server/server may be done with via database layer
[08:38] tjgillies: zeromq
[08:38] tjgillies: ;)
[08:39] jetienne: or via a network protocol (chapel yep dnode could do the server/server network part)
[08:39] micheil: jetienne: why not just use node-websocket-server + node-websocket-protocl (when it's out), then adapt socket.io to use nws behind the scenes
[08:39] micheil: then you can have a websocket-client on your server
[08:39] jetienne: tjgillies: i dunno it, it is suitable for our case ?
[08:39] micheil: as for clients that don't support websockets, I think long-polling is the best fallback
[08:40] chapel: or use dnode... cause well it does server - server and server - browser automatically
[08:40] micheil: (at current, that's my thinking)
[08:40] jetienne: micheil: multi server can be messy, im not cool with putting all this mess in socket.io
[08:40] SubStack: ewww databases for message passing
[08:40] micheil: in which case you can use a form of FiFo queue
[08:40] chapel: and you could port dnode to any transport if you wanted
[08:40] EM03 has joined the channel
[08:40] micheil: jetienne: or, use distributed back channels
[08:40] jetienne: micheil: the client/brower api may be compatible with socket.io. 
[08:40] EM03: anyone use that espress framework for actual web developmetn?
[08:40] EM03: if you did what did you think bout it 
[08:41] SubStack: easy to do since the protocol is factored out into dnode-protocol
[08:41] Ond: Espresso or Express
[08:41] micheil: EM03: it was okay, but my experience would've been better if I'd understood the module system better
[08:41] jetienne: SubStack: forget the techno, how would you keep the server in sync ?
[08:41] Guest67480 has left the channel
[08:41] jetienne: something like irc ?
[08:41] micheil: jetienne: easy, you have network sockets between each server
[08:41] micheil: and you pass messages for each event
[08:42] tjgillies: kinda like zeromq
[08:42] tjgillies: ;)
[08:42] jetienne: micheil: like a full mesh... ok why not, it is ok if number of server is small
[08:42] micheil: {event: "connection", id: "fooo"}
[08:42] chapel: ...
[08:42] micheil: {event: "message", data: "some message"}
[08:42] chapel: SubStack: its like they don't see us :(
[08:42] jetienne: micheil: ok so each server got a full version of the database?
[08:42] micheil: no
[08:43] micheil: you set it up so that each server connects to each other
[08:43] jetienne: chapel: dnode is about rpc, this is only a part of the problem
[08:43] micheil: I should actually properly write this meshing network
[08:43] jetienne: micheil: ok so you got the network topology, and say dnode for network handling
[08:43] jetienne: let see a usecase
[08:43] micheil: I wouldn't even use dnode for network handling
[08:43] EM03: do you think node.js will be a strong contender in webdev as a whole? not just server side push stuff?
[08:44] jetienne: EM03: later polease
[08:44] micheil: I'd just use net.Socket + net.Server
[08:44] jetienne: micheil: ok 
[08:44] micheil: and then json+netstrings
[08:44] jetienne: suppose im a browser i run a network game, im using socket.io like and send message to the server
[08:45] SubStack: routing messages can get very complicated
[08:45] micheil: jetienne: although, to be honest, for websockets where you just want broadcast and/or server push, I'd just use pusher.com
[08:45] SubStack: especially if you add on lots of layers of functionality
[08:45] jetienne: this server is a "multi server" what do we do with this messqge when it is received by the server
[08:45] SubStack: if you go the json route you'll have to come up with a dispatch system for getting the data out of the json chunks to where they need to go
[08:45] micheil: jetienne: then that message would be sent out via server A to all it's connected clients, and sent via the back channel on server A to all other connected servers
[08:46] jetienne: SubStack: +1 this is why i would prefere to keep it outside of socketio itself
[08:46] jetienne: micheil: ok so full broadcast... may be inefficient 
[08:46] micheil: the meshing functionality doesn't focus at all on routing of messages, just on distributing them throughout a system
[08:46] FireFly|n900 has joined the channel
[08:47] SubStack: how much does it need to scale?
[08:47] SubStack: and in what ways?
[08:47] jetienne: SubStack: it all depends on the case...
[08:47] micheil: also, you should be able to easily handle 20,000 or 50,000 connections on just 2 servers
[08:47] EM03: jetienne: huh?
[08:47] tjgillies: telehash.org ;)
[08:47] jetienne: SubStack: say a realtime game... i need a good latency in several place around the world
[08:48] jetienne: SubStack: good latency beind < 50ms
[08:48] micheil: tjgillies: that looks interesting
[08:48] llkazu: I'm off for a bit, night all
[08:48] tjgillies: night
[08:48] SubStack: tricky!
[08:48] lorhko_ has joined the channel
[08:49] jetienne: SubStack: well you spread the servers on the proper place, then allocate new gamers to the server near them, and broadcoast to everybody in the same game...
[08:49] jetienne: SubStack: that may work... i think, no ?
[08:50] BingeBoy has joined the channel
[08:50] jetienne: SubStack: it would allocate people close to each other to the same server
[08:50] SubStack: sounds feasible
[08:50] jetienne: SubStack: obviously they would play on the game with low ping
[08:51] jetienne: SubStack: yep... and yet not too complex
[08:51] jetienne: let hope it actually work :)
[08:53] micheil: jetienne: you can do it in a few ways
[08:54] micheil: 1) centralised message queue/dispatcher
[08:54] micheil: 2) distributed inter-connected clients
[08:54] micheil: s/clients/servers
[08:54] micheil: obviously route #1 does have the downfall of a single point of failure / latency
[08:54] jetienne: naturally i would go in distributed servers... probably because i coded a lot of routing protocol :)
[08:55] jetienne: how other are doing it ? im sure im not the first with this problem
[08:55] saikat has joined the channel
[08:55] micheil: I might actually write a meshing server for node
[08:55] trollboy has joined the channel
[08:56] micheil: so far i've seen option #1 work quite well, but only on smaller systems were < 250ms was the latency range
[08:56] micheil: *where
[08:56] jetienne: 250ms is way too much for me. im doing fps like game
[08:56] jetienne: i need 50ms top
[08:57] jetienne: centralized mean a single server around the world... it isnt tunable from a latency point of view
[08:57] jetienne: is this correct ?
[08:58] jetienne: because if it is, this means a distributed solution is the way to go
[08:58] micheil: depends, if you build off something like EC2, and use internal IP's, I'm pretty sure you'll find the inter-server latency to be very low
[08:58] coreb: if latency is your focus, would async servers be the way to go?
[08:58] micheil: yes.
[08:58] jetienne: for example i got a easywebsocket.org backend on channel API (google app engine version of websocket) and the latency is horrible like 160ms
[08:59] steffkes has joined the channel
[08:59] micheil: GAE isn't exactly the fastest server setup, iirc.
[08:59] jetienne: true other factors enter in the computation
[09:00] jetienne: coreb: latency is my focus, what do you mean by async server. tell me more
[09:00] ryan0x2 has joined the channel
[09:00] saikat has joined the channel
[09:02] jetienne: or i just launch the next game only in france ....
[09:02] jetienne: the silly workaround on multi player :)
[09:02] SubStack: isn't tahiti part of france?
[09:02] jetienne: thanks all for the chat
[09:02] daglees has joined the channel
[09:02] daglees has joined the channel
[09:03] jetienne: SubStack: yep old colonies
[09:04] SubStack: I mean that parts of france would have very high latency
[09:04] SubStack: being just about as far away as it is possible to be
[09:04] Opaque has joined the channel
[09:04] SubStack: while still being on the internet
[09:05] jetienne: SubStack: well thats ok :)
[09:05] jetienne: you know i do webgl games, i cut out large part of the users because of this :)
[09:06] chapel: jetienne: why not have the client hit a master server, that tells it locations of logical servers that are closer, client pings those, and then is routed to the best ping server
[09:07] jetienne: chapel: this is a possible arch
[09:07] robhawkes has joined the channel
[09:08] jetienne: once you pick the distributed arch, it become a clustering problem. you want players who are on the same game to be in the same server
[09:08] chapel: I haven't done the backend of a webgl game yet, but as long as it is within the same domain, I think it would be easy enough to handle that
[09:08] coreb: the obvious weak link in the chain is latency between the servers and bandwidth
[09:09] chapel: what type of game are we talking about
[09:09] chapel: since that matters
[09:09] svenlito has joined the channel
[09:09] jetienne: coreb: in fact you want to limit inter server communication 
[09:09] saikat has joined the channel
[09:10] coreb: jetienne: how can you, when information must be distributed between all of them to connect all gamers
[09:10] jetienne: chapel: something like a fps. aka multi player, i move, you "immediatly" see me moving on your screen
[09:10] micheil: coreb: this is a simplistic channel manager class: https://gist.github.com/923872
[09:10] micheil: back later.
[09:10] chapel: well jetienne most fps fake the movement with client prediction matched with server correction
[09:10] jetienne: coreb: only the routing information must be shared, if you assume all players of a same game are on the same server
[09:10] coreb: micheil: cool
[09:11] hnguyen_ has joined the channel
[09:11] jetienne: chapel: yep they predict on the screen. but this is another problem
[09:11] chapel: I don't see how that changes, if people want to play with certain players, it ignores ping, otherwise it finds servers based on ping and available players
[09:11] coreb: jetienne: I thought you wanted players from all servers in the same game
[09:11] jetienne: still the latency must be low
[09:12] jetienne: coreb: oh now :) this is like a fps, 20 players per game. not 30000 in one game :)
[09:13] thalll has joined the channel
[09:13] jetienne: the more we talk the more i realise it isnt hard
[09:13] chapel: jetienne: yes, of course you want it low, but I don't see how my arch advice means it wouldn't be?
[09:13] jetienne: because i have a small amount of players per game
[09:13] chapel: it will be in its own way, but conceptually its not that difficult once you get the basics in place
[09:13] chapel: but yeah
[09:13] coreb: well, then what chapel said
[09:13] chapel: its when you have an mmo like game
[09:13] jetienne: chapel: you arch would have low latency, not disputing that
[09:14] chapel: that really will add problems
[09:14] coreb: find a set of close servers, ping them, and choose
[09:14] jetienne: another part is the fact to assume that every player of a game is on the same server
[09:14] jetienne: so a game got one server, all the data/network/cpu of the game
[09:15] jetienne: nice simplication :)
[09:15] jetienne: so it become just a "find the server for this game"
[09:16] coreb: yeah, your first solution should be as simple as possible, then move on from there
[09:16] jetienne: which is in the initialisation so no need for low latency.... so a central server will do
[09:16] jetienne: coreb: that my kind. keep everything simple :)
[09:17] __tosh has joined the channel
[09:17] jetienne: so central server to keep log on all the games, a directory. 
[09:17] jetienne: and several game server around the world for low latency
[09:17] Astro has joined the channel
[09:17] jetienne: excelent, so simple :)
[09:18] coreb: jetienne: sure, got the money for it?;)
[09:18] jetienne: thanks all
[09:18] jetienne: coreb: game monetisation is funky :)
[09:19] newy_ has joined the channel
[09:20] coreb: servers around the world do cost money :)
[09:21] chapel: if you are using amazon, its pretty easy
[09:21] chapel: just spin them up as needed
[09:21] coreb: the have what, ireland, west and east usa, and asia?
[09:22] coreb: they*
[09:22] chapel: idk exactly tbh
[09:22] chapel: I don't use amazon
[09:23] coreb: what do you use for hosting?
[09:23] chapel: atm, I don't have any node specific hosting, no active projects
[09:23] chapel: at least being hosted
[09:23] chapel: but one I am working on might use linode
[09:24] coreb: linode seems good
[09:24] EM03: so about express ....anyone use it? worth a serious look?
[09:24] Ond: Yes
[09:25] mape: EM03: Most people are using it, at least for that use case
[09:26] EM03: hmm
[09:26] EM03: I use ruby now 
[09:27] chapel: sinatra?
[09:27] EM03: ramaze
[09:27] chapel: not familiar with it
[09:27] EM03: like sinatra
[09:27] EM03: but mvc
[09:27] EM03: but not heavy like rails or nothing
[09:27] chapel: ah
[09:28] chapel: well express is like sinatra, but you can so mvc
[09:28] herbySk has joined the channel
[09:28] chapel: you can do all kinds of things
[09:28] EM03: also i noticed some guy just implemented prototype to work with node.js 
[09:28] mape: think someone did something with express that moved it into mvc
[09:28] EM03: soo that means I could possibly get a bunch of ruby like features
[09:29] stride: mape: wasn't there an mvc example in the regular express repo as well?
[09:29] incon has joined the channel
[09:29] EM03: I guess if that works and express is decent I have a make shift ruby 
[09:29] chapel: there is
[09:29] mape: stride: not sure
[09:29] chapel: EM03: connect is a barebones part of express, you can use as much or little as you want
[09:30] stride: https://github.com/visionmedia/express/tree/master/examples/mvc
[09:30] EM03: https://github.com/Rixius/protoype.node.js
[09:30] EM03: anyone use this?
[09:30] chapel: ba stride
[09:30] chapel: https://github.com/visionmedia/express/tree/master/examples/mvc
[09:30] stride: heh :)
[09:30] chapel: just cause I had it too
[09:31] liquidproof has joined the channel
[09:31] EM03: the fact js can do anon functions is crazy
[09:32] Twelve-60: anyone care to explain why the outside catch is never called? http://pastebin.com/k85cwenh
[09:32] EM03: so much bootstrap code
[09:32] chapel: idk, not that fantastic, js is just awesome
[09:32] jonaslund: jetienne: i don't think counting on sub 50ms latency is realistic for web style apps yet
[09:33] chapel: Twelve-60: looks like the thrown error is inside a different stack
[09:33] stride: Twelve-60: the callback is executed asynchronously, outside of that context
[09:33] chapel: that being the net stack
[09:33] chapel: or what stride said
[09:33] Twelve-60: i see
[09:33] chapel: you shouldn't throw errors inside async stuff
[09:33] chapel: pass it back up
[09:34] Twelve-60: how should i deal with errors
[09:34] Twelve-60: re-emitting events?
[09:34] stride: what would you like to do in such a case?
[09:34] chapel: use callbacks or events
[09:34] RusAlex has joined the channel
[09:34] chapel: either way you are sending it up to something better suited for it
[09:34] chapel: ACTION isn't a big fan of try/catch
[09:34] stonebranch has joined the channel
[09:35] Twelve-60: so basically try/catch isn't very useful in most cases due to the prevalence of async methods
[09:35] jetienne: jonaslund: why ?
[09:36] stride: Twelve-60: yeah, only inside stuff that's sync or fully under your control
[09:36] jonaslund: jetienne: browsers being as they are (web-sockets is an improvement). but also the fact that it's all tcp/ip based
[09:36] jetienne: jonaslund: i got 25ms here. on firefox and chrome with a server in my city
[09:36] Twelve-60: stride: i see, i just liked the idea of try/catch due to the fact that one can 'throw it up' until someone catches it
[09:36] stride: Twelve-60: it's also unnecessary. the pattern of error events is there so you don't have to blow up your code with error handling
[09:36] Twelve-60: is that possible with events?
[09:37] Twelve-60: or do i have to add listeners + reemit
[09:37] chapel: jetienne: you should really look at having a lot of client prediction, will help
[09:37] jetienne: chapel: yep i will look at this
[09:37] chapel: Twelve-60: instead of using try/catch, just handle external (as in other modules) errors with your own event emitter
[09:38] chapel: and then in your main logic where you want to handle errors, add a listener
[09:38] jonaslund: jetienne: well.. net connections are better nowadays, the problem is that once the connection slows down you will still transmit the "old" data and it will need to arrive before you can send new data again
[09:38] tanepiper: ugh ambiguous errors :/
[09:38] stride: they do some sort of automatic propagation iirc, not sure about the current implementation though
[09:38] jonaslund: jetienne: since tcp/ip has ordering of data
[09:39] jonaslund: jetienne: udp on the other hand would drop old packets if there was a congestion and you'd always get "new" packets
[09:39] Twelve-60: chapel: i see
[09:39] tanepiper: i'm in the same position using cradle just now, calling db.list and all i get is https://gist.github.com/923893
[09:39] chapel: yeah, most games use udp for multiplayer, because they can just skip packets
[09:39] chapel: easier than having late packets
[09:39] chapel: or have it slow down to a crawl when multiple packets are lost
[09:40] jetienne: jonaslund: ok, yep i understand tcp/udp quite well. (coded it in 90s router). but i think tcp latency is underestimated
[09:40] jonaslund: the big problem of late packets is that getting into phase will take longer time
[09:40] Twelve-60: i dont suppose you can do net.on("event", function (event) {});
[09:40] jetienne: jonaslund: in a previous effort i did live video thru tcp without issue
[09:40] Twelve-60: net.on("event", function (event) { /* possibilty of handling ALL events emmitted */ });
[09:40] jonaslund: jetienne: yeah as i said.. today networks are better than they were in the 90s so tcp will prolly not be as bad
[09:40] chapel: Twelve-60: you could always pass up the event handler
[09:40] stride: http://gafferongames.com had a nice little (high-level though) series on game networking, escp. in regards to using udp and prediction if anybody cares :)
[09:41] jetienne: jonaslund: yep
[09:41] Twelve-60: chapel: well yeah i'd like to, but is there a generic event handler for all events
[09:41] jetienne: stride: we discussed it yesterday night :)
[09:41] Twelve-60: or do i have listen for each one manually and pass up each one :P
[09:41] stride: jetienne: oh :) damn
[09:41] jetienne: stride: but im glad so many gamdev are lucking here :)
[09:42] stride: yeah, sadly I'm just a lurker, I'm doing b2b java & .Net stuff most of the time..  :)
[09:42] jonaslund: client prediction is a one of the big reasons i'm doing JS on the server
[09:42] jetienne: yummy :)
[09:42] stride: anyway, got to go, ciao guys
[09:43] jonaslund: since i'm trying to share code as much as possible
[09:43] chapel: Twelve-60: you can extend event emitter with your own objects, and then on net errors or any other module errors send them to your error emitter then listen in your main logic code
[09:43] chapel: jonaslund: dnode?
[09:43] jetienne: jonaslund: code sharing is a big plus of nodejs for me too
[09:43] chapel: browserify?
[09:44] chapel: tanepiper: thats a nice error
[09:44] chapel: good luck finding that without some major debugging
[09:45] tanepiper: chapel: yea :/
[09:45] hojberg has joined the channel
[09:45] jonaslund: chapel: hmh ?
[09:45] Twelve-60: chapel: i actually think this functionality should be added natively, i.e. the ability to listen to all events given by an EventEmitter
[09:45] chapel: I am not totally impressed with cradle, I mean its awesome and all, but couch is so easy to interface with, I have only done manual http stuff with it
[09:46] chapel: I don't see the issue, if you want to listen for a type of event, listen for it
[09:47] Twelve-60: it appears my request has already been looked at: http://groups.google.com/group/nodejs-dev/browse_thread/thread/4f344fc6c1dfd050
[09:47] __tosh has joined the channel
[09:47] Twelve-60: chapel: i agree, but that functionality should still be there
[09:48] jetienne has joined the channel
[09:48] mraleph has joined the channel
[09:48] chapel: but it seems redundant
[09:49] cognominal: I see "void 0" in some place of backbone.js code
[09:49] chapel: you can already listen for any type of event
[09:49] cognominal:       validObj[attr] = void 0;
[09:49] cognominal: I dont know what that means :(
[09:49] saikat has joined the channel
[09:49] tanepiper: void 0 is undefined
[09:49] Twelve-60: chapel: afaik you cant re-emit all events
[09:50] Twelve-60: chapel: i.e. you have to listen for them all explicity and re-emit them all separately
[09:50] chapel: v8: var test = void 0;
[09:50] v8bot: chapel: undefined
[09:50] chapel: :)
[09:50] cognominal: tanepiper : so what not say    undefined   in place of    void 0     ?
[09:50] chapel: v8: var test = undefined;
[09:50] v8bot: chapel: undefined
[09:50] tanepiper: cognominal: yes, it's how coffeescript outputs undefined
[09:50] chapel: less characters for same output
[09:51] tanepiper: since currently undefined is a variable not a constant
[09:51] chapel: yeah
[09:51] tanepiper: so someone could do undefined = 5
[09:51] chapel: good point
[09:51] tanepiper: then yer buggered, so void 0 is a more safe way
[09:51] cognominal: v8 : undefined - 5
[09:51] cognominal: v8 : undefined = 5
[09:51] cognominal: v8: undefined = 5
[09:51] v8bot: cognominal: ...
[09:51] Twelve-60: who the hell redefines undefined XD
[09:51] Nexxy has joined the channel
[09:52] tanepiper: heh, found my bug :/  I had toJSoN in my couchdb design do instead of toJSON  :/
[09:52] jonaslund: v8: undefined
[09:52] v8bot: jonaslund: undefined
[09:52] tanepiper: caused couchdb to hang badly, and cradle couldn't handle that
[09:52] chapel: Twelve-60: without more context of your app or code base, what you are wanting seems wasteful
[09:52] chapel: lol
[09:52] chapel: tanepiper: :)
[09:52] chapel: v8: test = undefined; undefined = 5;
[09:53] v8bot: chapel: ...
[09:53] chapel: haha
[09:53] jonaslund: v8: (function() { this['undefined']=123; })()
[09:53] v8bot: jonaslund: ...
[09:53] jonaslund: undefined
[09:53] chapel: v8: undefined = 8; test = undefined;
[09:53] v8bot: chapel: ...
[09:53] jonaslund: v8: undefined
[09:53] v8bot: jonaslund: undefined
[09:53] __tosh has joined the channel
[09:53] Emmanuel__ has joined the channel
[09:53] chapel: whats ... supposed to mean
[09:53] jonaslund: v8bot: (function(){})()
[09:53] v8bot: jonaslund: Use v8: <code> to evaluate code or "`v commands" for a list of v8bot commands.
[09:54] graysky has joined the channel
[09:54] jonaslund: v8bot: (function(){ 123; })()
[09:54] v8bot: jonaslund: Use v8: <code> to evaluate code or "`v commands" for a list of v8bot commands.
[09:54] Ond: It's v8bot rolling its eyes I think
[09:54] jonaslund: v8bot: (function(){ var x=123; })()
[09:54] v8bot: jonaslund: Use v8: <code> to evaluate code or "`v commands" for a list of v8bot commands.
[09:54] jetienne: v8: (function(){ 123; })()
[09:54] v8bot: jetienne: undefined
[09:54] jetienne: jonaslund: v8:
[09:54] jonaslund: ahh
[09:54] jonaslund: my silly auto-complete kicked in
[09:54] jonaslund: v8: (function(){})()
[09:54] v8bot: jonaslund: undefined
[09:54] tanepiper: yay, app not crashing any more!
[09:54] tanepiper: stupid typos
[09:55] chapel: tanepiper: I hate that
[09:55] chapel: specially when you spend hours on a bug
[09:55] chapel: only to find it was a stupid typo
[09:55] jetienne: me too, i want a #pragma to be notified when they do slota[null]
[09:55] torgeir has joined the channel
[09:55] jonaslund: that's the only downside of dynamic languages :P
[09:55] chapel: guess that is what is nice about lint/hint
[09:55] jetienne: or sblabla._notexistingprop
[09:55] chapel: tanepiper: were you using coffee?
[09:56] tanepiper: chapel: everywhere :)
[09:56] chapel: figured :)
[09:56] tanepiper: my couch design docs are in coffeeescript, my server runs on coffee - my client side i compile to JS, but it's all coffee too
[09:56] cognominal: v commands
[09:56] cognominal: v8: v commands
[09:56] v8bot: cognominal: SyntaxError: Unexpected identifier
[09:56] chapel: is there a hook for coffee-script to run jshint?
[09:56] tanepiper: jslint, but yea
[09:56] cognominal: arf
[09:57] cognominal: v8: `v commands
[09:57] v8bot: cognominal: SyntaxError: Unexpected token ILLEGAL
[09:57] tanepiper: chapel: but i'm looking to build in better debug tools to my cloud9 extensions for cs
[09:57] chapel: I wish I could get used to vim
[09:57] tanepiper: at the moment, my lifecoffee stuff is good for debugging though
[09:57] tanepiper: *live
[09:57] chapel: since it can do auto jslint and coffeescript stuff
[09:57] chapel: yeah
[09:58] chapel: I use textmate right now
[09:58] chapel: how is cloud9 now?
[09:58] jonaslund: ACTION uses eclipse/aptana/chromedebug/sepl
[09:58] tanepiper: i installed the tm bundle on e-texteditor, but the problem is you can't run coffee on windows, and it's a pain to set up in cygwin
[09:58] tanepiper: chapel: great
[09:58] tanepiper: has it's flaws, but then so does every text editor/ide
[09:59] tanepiper: the difference is cloud9 is a hell of a lot easier to extend, since it's javascript + some XML
[09:59] chapel: yeah
[09:59] chapel: does it have built in debugging still using nodes debug?
[10:00] tanepiper: i think so, but currently it doesn't work with my stuff - but i want to build in coffeescript debugging
[10:00] tanepiper: i could probably get it working with cs's --nodejs stuff, but mehh
[10:02] chapel: yeah
[10:02] chapel: well let me know when you get it a bit more solid
[10:02] chapel: I might entertain using it
[10:03] cognominal: tanepipe, not everething browser related can be native in windows   :)
[10:03] chapel: upgrade to windows 8 and everything is native in the browser
[10:04] cognominal: marketing based future proofing :)
[10:07] Opaque has joined the channel
[10:09] FireFly: `v commands
[10:09] v8bot: FireFly: Commands: Type `v <command>.  Optionally, type `v <command> @ <nick> to send to a specific user. 				`v Commands are: about, beers, commands, git, google, help, macro. Other commands: v8, `re, `pcre, `ref.  Type `v help <command> for more information.  Join #v8bot for more support.
[10:10] Bwen has joined the channel
[10:11] Spion__ has joined the channel
[10:12] cognominal: Firefly: I had tried about every other combinations to get the v8 bot to list its commands
[10:13] FireFly: Heh
[10:13] cognominal: `v help beers
[10:13] v8bot: cognominal: beers Command: Type nick++ to give a beer to a user (usually as a way to say "thanks").  Type nick-- to take a beer away from a user. 					Type "`v beers <nick>" to get the number of beers for a specific user.
[10:13] __tosh has joined the channel
[10:13] cognominal: FireFly++  # :)
[10:13] JimBastard has joined the channel
[10:13] cognominal: `v beers FireFly
[10:13] v8bot: cognominal: FireFly has 0 beers.
[10:14] FireFly: I don't think it likes the comment
[10:14] cognominal: yup, purl in perl channels is more lenient on that matter
[10:15] jonaslund: erhhrm
[10:15] jonaslund: does anyone remember who was writing that postgres backend ?
[10:17] mjr_: jonaslund: brianc has one
[10:17] aurynn: I have one
[10:17] aurynn: and for the first time in a month, I'm actually online
[10:17] aurynn: :)
[10:17] jonaslund: mjr_: it was with him we were discussing a few nights ago right ?
[10:17] mjr_: Yeah, probably
[10:17] jonaslund: pure-js vs libpg performance
[10:20] spectrum has joined the channel
[10:20] pomodoro has joined the channel
[10:20] coreb: and the conclusion was?
[10:21] hnguyen_ has joined the channel
[10:21] MattJ has joined the channel
[10:21] jakehow has joined the channel
[10:22] aurynn: that you're spending more time in disk IO ?
[10:22] Kingdutch has joined the channel
[10:22] jonaslund: aurynn: not entirely
[10:23] jonaslund: coreb: today pure-js is nearly as fast with small queries (round-trip time to server,disk,etc prolly  takes most time) but since buffer index access is still "slow" the native bindings wins out queries with big(/many´?) objects
[10:24] jonaslund: but apperatly in the future V8 will have optimizations for array access in stuff like buffer and that kind of access will become 4x faster (And with it stuff like the pure-js bindings)
[10:24] jonaslund: see http://blog.mrale.ph/post/4217120977/improved-v8-external-arrays-support-and-nodejs-buffer
[10:25] mjr_: That is probably going to be a big win all over node land.
[10:29] pdelgallego has joined the channel
[10:31] oskude has joined the channel
[10:31] mytrile has joined the channel
[10:32] jonaslund: ACTION reviews some old code he hasn't looked at in a while
[10:32] bogo has joined the channel
[10:33] chapel: my old code scares me
[10:33] chapel: I have a lot of old code
[10:33] chapel: not sure what I want to do with it
[10:34] bogo: chapel: haha, that's usually the case :D
[10:34] jonaslund: depends on how useable it is
[10:34] yozgrahame has joined the channel
[10:35] jonaslund: reading, deciphering old/others code quickly is sometimes the greatest skill you can have
[10:35] Wizek has joined the channel
[10:35] mjr_ has joined the channel
[10:36] chapel: its even worse, since I switched to coffeescript
[10:36] chapel: and some of my early code was learning the basics of node
[10:36] chapel: I still want to go back and rework it, but eh
[10:37] jonaslund: when i was 16-18 i was writing alot of stuff in pure x86 asm
[10:37] jonaslund: it's mindboggling i even got stuff done .. but persistence.. :D
[10:38] shaunau_ has joined the channel
[10:38] chapel: heh
[10:38] chapel: how old are you now?
[10:38] jonaslund: 30
[10:38] chapel: ah
[10:38] chapel: 27 here
[10:38] chapel: when I was around 17 I was doing c++
[10:38] chapel: I didn't have much to learn from, someone said I needed a compiler, recommended borland turbo c++
[10:38] mAritz has joined the channel
[10:39] chapel: so I got that, and my only resource for learning was the compiler manual
[10:39] chapel: lets just say, that was a challenge at times
[10:39] febits has joined the channel
[10:39] chapel: kids now a days
[10:39] chapel: have so much available to them
[10:40] jonaslund: i'm not really sure about my age
[10:40] jonaslund: but i think i was in 2nd-3rd grade (9-11 or so) i got my C64
[10:40] jonaslund: mostly played with it for a year or so
[10:40] chapel: I wasn't that lucky
[10:40] chapel: I didn't have my own computer until I was 16
[10:41] chapel: had a family one at 14, but no internet
[10:41] ankit has joined the channel
[10:41] Twelve-60: chapel: http://pastebin.com/6csGaBCe
[10:41] bogo: haha, maan
[10:42] jonaslund: i was loading games off tapes, the problem was that you had to adjust the "tone-head" to get the correct pitch of the sounds to load properly
[10:42] bogo: i've been coding since i was 11. when i look at this code now, i get all misty eyed ;)
[10:42] jonaslund: and one day i just couldn't get any games loading since i didn't get that head adjusted properly
[10:42] jonaslund: so i started looking at the C64 manual
[10:42] jonaslund: and in there was some basic examples.. i botched typing it in but just having stuff output was awesome :)
[10:42] bogo: jonaslund: haha, i guess that's why we are all programmers :)
[10:43] chapel: I am jealous of you guys
[10:43] jonaslund: chapel: no need to be
[10:43] chapel: wish I had parents that would have let me have stuff like that
[10:43] chapel: might have started off earlier
[10:43] jonaslund: chapel: i didn't get a net connection until i was 17 or so either
[10:43] chapel: well sure
[10:44] bogo: jonaslund: almost the same here - i saw the first website when i was 14
[10:44] chapel: but the net didn't help me that much at first
[10:44] jonaslund: yeah at school
[10:44] chapel: at that age I spent most of my time chatting with girls on aol
[10:44] jonaslund: chapel: you're prolly better off for it
[10:44] bogo: school never helped me in studying programming
[10:44] bogo: at the same time going to the library
[10:44] chapel: now I rarely talk to girls online
[10:44] bogo: (no laptops back then!)
[10:44] bogo: and reading, reading, reading and taking notes did
[10:45] chapel: I was lucky to have a teacher let me and some friends do a self guided programming class
[10:45] chapel: though we kind of called it in and fucked around most of the time
[10:45] bogo: haha, yeah
[10:45] bogo: my teacher was like
[10:45] bogo: ok bogo, don't break anything, sit still and i'll give you an A, mkay?
[10:45] bogo: ;)
[10:46] bogo: i guess it was sort of bewildering to teachers to have a 10yo better at their own devices
[10:46] chapel: I was 17 at that time :(
[10:46] chapel: well :)
[10:47] __tosh has joined the channel
[10:47] chapel: cause it was fun hacking the school computers
[10:47] bogo: haha, it always is
[10:48] AAA_awright has joined the channel
[10:50] jonaslund: :)
[10:50] Corren has joined the channel
[10:51] liar has joined the channel
[10:52] chapel: you see people amazed that some 11 year old kid is making full fledged web apps now, but back in the day, it was amazing for an 11 yo to make games on a c64 or whatever
[10:52] skm has joined the channel
[10:53] chapel: the amount of information that is available now is crazy, that any kid with any drive is like a sponge and would be able to grep almost anything
[10:53] bogo: yup
[10:53] bogo: and mashups have virtually no learning curve
[10:53] stephank has joined the channel
[10:54] jonaslund: hmmm
[10:54] bogo: i remember the days when to get a data from a web service you had to learn how to SCRAP html for data
[10:54] cognominal: I remember programming in C. The only C code I had ever seen was the K & R I read. Painful.
[10:54] jonaslund: i dunno
[10:54] bogo: now it's all REST and JSON
[10:54] MattDiPasquale has joined the channel
[10:54] jonaslund: sure, many of us had crap environments to learn in
[10:55] cognominal: At least I had the right book.
[10:55] jonaslund: i'm grown up in the "hicks" where everyone i went to school with spends their days driving snowmobiles, dirtbikes or something similiar nowadays
[10:55] chapel: jonaslund: not to diminish the ability for kids now, but the availability of information on how to do things when we were younger was more scarce
[10:55] chapel: jonaslund: alaska?
[10:55] chapel: :P
[10:55] jonaslund: nah, the north of sweden
[10:56] jonaslund: kinda the same but less oil and shotguns
[10:56] chapel: oh nice
[10:56] bogo: and you don't see russia from there
[10:56] chapel: but I know what you mean
[10:56] cognominal: bogo : you think so because your are in the hip crowd. Most people shovels computer crap all day long
[10:56] chapel: irl I don't know anyone that actually codes
[10:56] mytrile has joined the channel
[10:56] jonaslund: anyhow
[10:56] chapel: or I could talk to about stuff like this
[10:56] jonaslund: even if i had it that way, and many others
[10:56] bogo: cognominal: what do you mean by hip crowd?
[10:56] jonaslund: there was some people that grew up around the same time as me (or earlier) that got better oppurtunities
[10:57] cognominal: you do node :)
[10:57] bogo: cognominal: i have to carve in shit every day when working with my customers' proprietary databases that have source code that didn't change since regan administration
[10:57] jonaslund: go read about ken silverman for example
[10:57] bogo: node is just a side job :D
[10:57] chapel: yeah jonaslund
[10:57] chapel: in hs, I had friends that had high speed internet, and were into stuff I wished I was
[10:58] bogo: true that
[10:58] bogo: i grew up in Poland
[10:58] chapel: I had a friend that was doing all kinds of video projects
[10:58] bogo: in a small town
[10:58] jonaslund: anyhow
[10:58] jonaslund: was fun chatting to you guys
[10:58] jonaslund: but i'm late for a meeting
[10:58] jonaslund: ta
[10:58] chapel: I was the first person at my hs to get an mp3 player
[10:58] chapel: :)
[10:59] shaunau_ has joined the channel
[10:59] bogo: yeah, i had virtually no CS friends
[10:59] bogo: couple of guys i met on IRC
[10:59] bogo: but none irl
[10:59] bogo: while american teenagers were getting book deals for writing about applescript, etc
[10:59] bogo: what was a 14yo from middle-of-nowhere, poland supposed to do to get noticed?
[11:00] stride: bogo: what are you up to nowadays?
[11:00] bogo: i personally work a lot with mobile, and mainly iOS
[11:01] bogo: most recently, connecting a very, very old DB system to iOS frontend
[11:01] stride: ah, nice. native or web?
[11:01] bogo: mostly native, but i try to do as much as i can web recently
[11:01] bogo: phonegap is really production ready imho
[11:01] stride: heh, yeah, I made a frontend for an ERP system a while back. hate legacy databases
[11:01] bogo: legacy sucks
[11:01] chapel: well, where I live, I can't find any good tech work
[11:02] stride: really? I was planning on looking at phonegap, last time I used iUI because it was the most "stable" at the time
[11:02] stride: chapel: where's that?
[11:02] bogo: stride: i found it working flawless the couple times i used in projects
[11:03] stride: bogo: hmkay, thanks for the tip
[11:03] bogo: given though that i used it mostly as a webkit view
[11:03] bogo: with connections into notifications and camera
[11:03] chapel: spokane, washington, usa
[11:03] stride: well, at least you're in the right country chapel :)
[11:04] bogo: haha, yes
[11:04] chapel: sure
[11:04] chapel: but I can't move
[11:04] chapel: I wish the node.js freelancing market would explode so I could get some work
[11:05] stride: heh, true
[11:06] chapel: I have thought of doing a startup, but I don't want to do the funding route
[11:06] robhawkes has joined the channel
[11:07] bogo: chapel: at that point i'm sure there'll be already enough BRIC "consultants" who learnt node from reading one tutorial and implementing everything in a single class -.-
[11:07] chapel: and any ideas Ive had, seem played out or hard to justify charging
[11:07] chapel: bogo: sure
[11:07] stride: bogo: "the php way"? :))
[11:07] bogo: haha, yeah
[11:07] bogo: man
[11:07] chapel: but at that point I will be able to prove my ability
[11:07] chapel: well I can now
[11:07] bogo: i've been to every bric country and i love them all
[11:07] bogo: but the level of consultants from there
[11:07] bogo: uhm
[11:08] bogo: floor
[11:08] chapel: bric?
[11:08] bogo: brasil, russia, india, china
[11:08] chapel: ah yes
[11:08] bogo: with special accent on the last two
[11:08] chapel: bric: "BRIC" is a political term used to name the worlds four fastest growing economies which are Brazil,Russia,India and china.The term was thought up by Goldman Sachs in 2003 to argue the economic potential of Brazil,Russia,India,and China and their global importance in the near future. Extended terms f... | Full Definition @ http://urbanup.com/define.php?term=bric
[11:08] bogo: indian consultancies are absolute _crap_
[11:08] febits[0] has joined the channel
[11:08] bogo: i've seen good indian coders
[11:08] chapel: I didn't want to spam the channel with that, without making sure it was relevant
[11:08] bogo: better, excellent ones
[11:09] bogo: but whenever a company outsources something to BRICs, it comes back in a 10th grader code
[11:11] stride: I talked to a guy last week who did that. was pretty unlucky with the shop he outsourced to. he had about the same amount of coders now to write detailed specifications.. 
[11:12] gattuso has joined the channel
[11:13] cognominal: bogo : everything becomes legacy in months
[11:15] robhawkes has joined the channel
[11:16] xla has joined the channel
[11:17] fairwinds has joined the channel
[11:18] Druide_: hm, anyone got a good link for a webbased messenger system based on js?
[11:22] tosh has joined the channel
[11:28] jetienne has joined the channel
[11:32] mike5w3c has joined the channel
[11:33] shaunau_ has joined the channel
[11:34] beawesomeinstead has joined the channel
[11:39] stride: hmm, for templating with express, which of the mustache engines would I use? :)
[11:41] skm has joined the channel
[11:42] zomgbie has joined the channel
[11:44] ardcore has joined the channel
[11:48] chapel: dust.js
[11:48] chapel: :)
[11:50] torgeir has joined the channel
[11:56] bogo: Druide_: you mean an im client?
[11:58] no-gooder has joined the channel
[12:00] Swizec has joined the channel
[12:03] jarek has joined the channel
[12:03] jarek has joined the channel
[12:05] Twelve-60: chapel: still around? :P
[12:05] jarek: Hello
[12:05] chapel: yep
[12:06] jarek: what's the best way for converting the content of package.json into an object?
[12:07] Twelve-60: chapel: i was thinking, using an event system, you can't really emit an event directly for a certain callback
[12:07] jarek: e.g. if I have following string: "{ "name" : "Package 1", "description" : "Sample package 1" }"
[12:07] jarek: how do I convert it back into javascript object?
[12:07] chapel: jarek: do you have it already as a string in js?
[12:07] jarek: chapel: yeah
[12:08] chapel: jarek: JSON.parse(package.json);
[12:08] chapel: or whatever
[12:08] jarek: chapel: I have learned that there is JSON.parse() function
[12:08] Twelve-60: e.g. anyone who is listening for the 'error' event will get it, even if i only want the piece of code that 'called it' to recevie it
[12:08] jarek: chapel: but it only works when the string was generated by JSON.stringify()
[12:08] jarek: not sure why
[12:08] chapel: Twelve-60: use explicit callbacks
[12:08] chapel: well no, it works
[12:09] chapel: v8: json = "{ "name" : "Package 1", "description" : "Sample package 1" }";
[12:09] v8bot: chapel: SyntaxError: Unexpected identifier
[12:09] __tosh has joined the channel
[12:09] Twelve-60: chapel: that means combining errors with the callback, but i guess thats why node js does callback(err, other, stuff)
[12:09] chapel: v8: json = '{ "name" : "Package 1", "description" : "Sample package 1" }'
[12:09] v8bot: chapel: "{ \"name\" : \"Package 1\", \"description\" : \"Sample package 1\" }"
[12:09] Twelve-60: ACTION ponders
[12:09] chapel: yep Twelve-60
[12:10] Twelve-60: i thought separating them would be a good idea
[12:10] Twelve-60: but i guess not
[12:10] chapel: its best imo to do callbacks or events, mixing them is confusing
[12:10] jarek: chapel: I see, so my package.json must be messed up
[12:10] chapel: well
[12:10] Twelve-60: yeah i guess so
[12:11] chapel: well here
[12:11] langworthy has joined the channel
[12:11] gattuso has joined the channel
[12:11] chapel: v8: parsed = {name: 'Package 1', description: 'Sample package1'}; json = JSON.stringify(parsed);
[12:11] v8bot: chapel: "{\"name\":\"Package 1\",\"description\":\"Sample package1\"}"
[12:12] chapel: notice the " are escaped
[12:12] chapel: v8: json = '{ "name" : "Package 1", "description" : "Sample package 1" }'; parsed = JSON.parse(json);
[12:12] v8bot: chapel: {name:"Package 1",description:"Sample package 1"}
[12:12] chapel: it works
[12:13] kriszyp2 has joined the channel
[12:14] Twelve-60: chapel: is there a help function on creating an 'error' to return?
[12:14] jarek: chapel: it looks like JSON.parse() does not work when the string contains new line characters (\n)
[12:14] chapel: Twelve-60: like what?
[12:15] Twelve-60: i guess to copy what nodejs does, e.g. object with name/message/whatever
[12:15] chapel: v8: json = '{ "name" : "Package 1", \n"description" : "Sample package 1" }'; parsed = JSON.parse(json);
[12:15] v8bot: chapel: {name:"Package 1",description:"Sample package 1"}
[12:15] chapel: jarek: seems to work
[12:16] chapel: v8: new Error('message');
[12:16] v8bot: chapel: {stack:"Error: message\n    at eval at <anonymous> (evalmachine.<anonymous>:26:5)\n    at evalmachine.<anonymous>:26:9\n    at evalmachine.<anonymous>:30:2\n    at Socket.run (/home/inimino/v8bot/lib/sandbox/shovel.js:76:19)\n    at Socket.emit (events.js:39:17)\n    at Socket._onReadable (net.js:629:51)\n    at IOWatcher.onReadable [as callback] (net.js:156:10)",arguments:undefined,type:undefined [Output truncated...]
[12:16] noplace has joined the channel
[12:16] jarek: damn, this function is awful
[12:16] jarek: I'm going to create a wrapper to JSON.stringify :/
[12:16] jarek: and JSON.parse
[12:16] chapel: jarek: do a gist/pastie of your code
[12:17] Twelve-60: chapel: ah ha, any other arguments?
[12:17] ph^ has joined the channel
[12:18] kuya: hi hi, im trying to use backbone.js with express, for some reason using backbone.Collection.fetch() doesnt seem to be making a request express understands. If i do a jquery .ajax() call the request is seen by express. the only difference between the two requests seems to be that the backbonejs call is setting content-type to application/json. any ideas?
[12:18] chapel: umm yeah, I don't know them off the top of my head
[12:18] jarek: chapel: ahh... it works now
[12:19] jarek: chapel: I forgot to remove a trailing comma
[12:19] symbel has joined the channel
[12:19] chapel: funny how that is :)
[12:20] chapel: v8: console.dir(new Error('test'));
[12:20] v8bot: chapel: TypeError: Object #<Object> has no method 'dir'
[12:20] chapel: v8: console.error(new Error('test'));
[12:20] v8bot: chapel: TypeError: Object #<Object> has no method 'error'
[12:20] chapel: v8: console.log(new Error('test'));
[12:20] v8bot: chapel: {stack:"Error: test\n    at eval at <anonymous> (evalmachine.<anonymous>:26:5)\n    at evalmachine.<anonymous>:26:9\n    at evalmachine.<anonymous>:30:2\n    at Socket.run (/home/inimino/v8bot/lib/sandbox/shovel.js:76:19)\n    at Socket.emit (events.js:39:17)\n    at Socket._onReadable (net.js:629:51)\n    at IOWatcher.onReadable [as callback] (net.js:156:10)",arguments:undefined,type:undefined,me [Output truncated...]
[12:21] chapel: Twelve-60: { stack: [Getter/Setter], arguments: undefined, type: undefined, message: 'error' }
[12:23] Twelve-60: hmm
[12:24] Twelve-60: trying see what fs does, as it has a code aswell
[12:24] stepheneb has joined the channel
[12:24] Twelve-60: e.g. { stack: [Getter/Setter], arguments: undefined, type: undefined, message: 'ENOENT, No such file or directory \'idontexist\'', errno: 2,31, code: 'ENOENT', path: 'idontexist' }
[12:25] chapel: yep
[12:26] Twelve-60: hmm
[12:30] jetienne: http://blog.mrale.ph/post/4217120977/improved-v8-external-arrays-support-and-nodejs-buffer <- excelent... so much for micro optimisation :)
[12:30] chapel: jetienne: yep
[12:31] chapel: I threw that on hn
[12:31] chapel: its on the front page
[12:31] no-gooder has joined the channel
[12:35] hellp has joined the channel
[12:36] xandrews has joined the channel
[12:36] stepheneb has joined the channel
[12:40] F1LT3R has joined the channel
[12:52] SamuraiJack has joined the channel
[12:52] micheil: oh, wow. the netstring module by pgriess does a hell of a lot of intensive Buffer work.
[12:56] fly-away has joined the channel
[13:00] shiawuen has joined the channel
[13:08] mytrile has joined the channel
[13:10] tmedema has joined the channel
[13:11] tmedema: I've got an issue with Express/Jade. Basically in view options I initialize an empty headScripts array. In my layout.jade file I then iterate over this array to include every script into the head that has been pushed in the array. In my indivual views I then do eg. - headScripts.push('/jquery.js'); now the problem is that it is apparently adding the scripts multiple times
[13:12] tmedema: Any idea what could cause that? It looks like the push call is executed multiple times even though I only set it once in my view
[13:12] jdub has joined the channel
[13:13] hackband has joined the channel
[13:13] coreb has joined the channel
[13:13] Shrink has joined the channel
[13:14] tmedema: Wow.. the strange thing is that if I refresh the browser there are even more duplicate calls
[13:14] tmedema: as if something is cached..
[13:14] tmedema: Oh.. I guess the array is "global"  and each time a view is rendered another item is added
[13:15] tmedema: That's weird, I thought the view options are set on every render, aka it should be an empty array at the start
[13:17] bojicas has joined the channel
[13:18] eb4890 has joined the channel
[13:18] tomgallacher has joined the channel
[13:21] echosystm has left the channel
[13:24] eee_c has joined the channel
[13:26] jetienne has joined the channel
[13:27] indutny has joined the channel
[13:27] skm has joined the channel
[13:27] indutny: ryah: ping? :)
[13:28] no-gooder has joined the channel
[13:29] Bwen: pong?
[13:30] indutny: ryah: can we expose node_crypto.h?
[13:31] indutny: Bwen: ?
[13:31] Bwen: bong?
[13:32] k1ttty has joined the channel
[13:33] indutny: bwong?
[13:33] Bwen: access granted, you may proceed
[13:33] indutny: I like that kinda informative conversations :D
[13:37] arianrock has joined the channel
[13:38] arianrock: yo
[13:38] stride: hey
[13:40] indutny: hey?
[13:40] stride: ho
[13:41] mikegerwitz has joined the channel
[13:41] mikegerwitz has joined the channel
[13:42] pomodoro has joined the channel
[13:51] jtrudeau has joined the channel
[13:53] skm has joined the channel
[13:53] maushu has joined the channel
[13:54] marcello3d has joined the channel
[13:54] skm has joined the channel
[13:55] skm has joined the channel
[14:04] indutny: ryah: double-ping? ping-ping ;)
[14:05] noplace: ping-pong
[14:08] bogo: pong
[14:08] bogo: foos
[14:08] ph^ has joined the channel
[14:09] heinzp has joined the channel
[14:09] micheil: ryah: is it possible to get the localPort of a server remotely?
[14:10] micheil: rather, of a socket remotely?
[14:12] FireFly has joined the channel
[14:12] rfay has joined the channel
[14:13] ph^ has joined the channel
[14:19] pauls has joined the channel
[14:20] unknown_had has joined the channel
[14:20] jetienne: http://nodejs.org/docs/v0.4.6/api/net.html#socket.remoteAddress <- micheil may be this
[14:21] micheil: I'm wanting the port number
[14:21] jetienne: micheil: you tried and it doesnt include the number ?
[14:21] astropirate has joined the channel
[14:21] micheil: I'm using a pair of a net.Server and net.Socket to mesh nodes together
[14:21] micheil: yeah, no port number
[14:22] micheil: or, if I do use remotePort, I get the socket's port, not the server's port, which isn't what I want.
[14:22] kriszyp has joined the channel
[14:22] jetienne: hmm ok
[14:23] skm has joined the channel
[14:23] jetienne: anybody tried joose on node.js ? does it work well ?
[14:23] galaxywatcher has joined the channel
[14:24] skm has joined the channel
[14:26] heinzp has joined the channel
[14:26] tmedema: jetienne: it worked well but used a lot of Eval which I didn't like so I stopped using it
[14:27] tmedema: author says Eval is not evil and wants to keep using it
[14:27] zakabird has joined the channel
[14:28] stonebranch has joined the channel
[14:28] lorhko has joined the channel
[14:29] jetienne: tmedema: what is the issue with eval ?
[14:29] ardcore has joined the channel
[14:29] jetienne: tmedema: i collaborate with @cramforce by patching streamie, he seemed reasonable and skilled from here
[14:29] jetienne: collaborated
[14:30] Imyourm8 has joined the channel
[14:30] tmedema: jetienne: it was difficult to debug and afaik eval is not needed
[14:30] tmedema: I used Joose 3
[14:30] Imyourm8: hi guys
[14:31] Imyourm8: i have an issue with installing node on windows via cygwin
[14:31] jetienne: tmedema: ah yeah, clearly eval may make the debug harder
[14:31] Imyourm8: message: error:could not configure a cxx compilier!
[14:32] Imyourm8: didnt find this issue in faq
[14:32] Imyourm8: what i have to do to fix it?
[14:34] tmedema: Any Express ninja can help me out here? http://groups.google.com/group/express-js/browse_thread/thread/b767df0003f788b2 It's about properly adding scripts to the head section within body views
[14:35] mytrile has joined the channel
[14:35] tmedema: (Note how this indirectly implies that, if you manage to help me, you are an 'Express Ninja' - who would not want to be an express ninja?!)
[14:37] jtsnow has joined the channel
[14:39] stagas has joined the channel
[14:39] postwait has joined the channel
[14:45] micheil: sooo... close to getting auto-meshing working
[14:46] dandean has joined the channel
[14:47] Corren has joined the channel
[14:54] Astro: does anyone know how expensive nodecamp tickets are going to be?
[14:57] F1LT3R has joined the channel
[14:57] themiddleman_itv has joined the channel
[14:59] SamuraiJack: tmedema: thanks to your notes, Joose no longer uses evals :)
[14:59] SamuraiJack: in Joose itself
[14:59] marcello3d: micheil: awesome! :D
[14:59] SamuraiJack: eval is still being used for code materialization, for the reasons we already discussed
[14:59] marcello3d: I fixed mongo auth support on mongodlian deadbeef :)
[14:59] micheil: marcello3d: although, I did it wrong, my bad.
[15:00] micheil: each peer in the network was going to have 1 server and N sockets
[15:00] micheil: where N is the number of peers, but that's not needed.
[15:00] micheil: I don't think
[15:00] tmedema: SamuraiJack: ah, so it does not use eval to execute code in the browser?
[15:01] skm has joined the channel
[15:02] tmedema: it is a great library anyway, no doubts about that
[15:04] SamuraiJack: it does
[15:05] SamuraiJack: since FB can't debug code, executed with <script>
[15:05] SamuraiJack: once it will, we'll switch to <script>
[15:05] artilect has joined the channel
[15:05] tmedema: ok :)
[15:07] ardcore has left the channel
[15:09] arianrock: back
[15:13] eb4890 has joined the channel
[15:13] FireFly has joined the channel
[15:13] artilect has left the channel
[15:14] Sbioko has joined the channel
[15:14] Sbioko: Hello guys
[15:15] Sbioko: Does 300 RPS is normal for Express + MongoDB + Memcached app?
[15:15] Sbioko: Benchmarking with: ab -n 1000 -c 10
[15:15] __tosh has joined the channel
[15:15] abraham has joined the channel
[15:15] marcello3d: wow, windows update is ridiculous 
[15:16] marcello3d: I don't touch my windows computer for a few months and I've had to go through 5 waves of updates
[15:16] marcello3d: Sbioko: single node instance?
[15:16] febits has joined the channel
[15:16] Sbioko: marcello3d: yeah
[15:16] marcello3d: Sbioko: hardware?
[15:17] marcello3d: what mongodb driver? :)
[15:17] Sbioko: marcello3d: AMD Turion x2 2.2 Ghz, 3 GB RAM
[15:17] Sbioko: node-mongodb-native via Mongoose
[15:17] Sbioko: this is my laptop
[15:17] Sbioko: not server
[15:17] marcello3d: ah
[15:17] marcello3d: sure
[15:17] Sbioko: doesn't it slow?
[15:18] Sbioko: anyway, will try to run app via cluster
[15:18] marcello3d: not to lead you on or anything, I don't know, but you probably would benefit from running two node instances
[15:18] marcello3d: but even then, you wouldn't get more than double performance
[15:18] Sbioko: https://github.com/LearnBoost/cluster
[15:18] marcello3d: yea
[15:18] marcello3d: I think there's a node profiler
[15:19] marcello3d: https://github.com/dannycoates/node-inspector supposedly supports profiling
[15:19] marcello3d: combined with v8-profiler
[15:21] A_Nub has joined the channel
[15:23] Sbioko: thanks
[15:23] Sbioko: with cluster(4 workers), I get 350 RPS
[15:26] micheil: only 350RPS?
[15:27] micheil: I've seen figures of node with cluster getting up into the 10's of thousands
[15:27] micheil: Sbioko: actually try a different AB config.
[15:27] micheil: ab -n 10000 -c 10
[15:30] Sbioko: micheil: 367
[15:30] Sbioko: micheil: I know, that's why I'm asking why it's so slow
[15:30] Sbioko: no super logic there
[15:31] jtsnow has joined the channel
[15:33] Country has joined the channel
[15:33] losing has joined the channel
[15:34] stagas_ has joined the channel
[15:35] stephank: npm is creating world writable directories. o_O
[15:35] stonebranch has joined the channel
[15:35] stephank: Is that deliberate? My umask settings seem correct. I'm on npm 1.0.1rc9.
[15:35] Corren: so, just setup my companies node app for the first time. How do I connect to the running nodes to view console spew?
[15:35] Corren: or at least, see running nodes
[15:36] eldios has joined the channel
[15:39] Sbioko has left the channel
[15:42] micheil: Corren: uhh.. how are you running node in a detached mode?
[15:42] stonecobra has joined the channel
[15:42] Corren: let me look at our startup script, 1 sec
[15:43] jakehow has joined the channel
[15:44] Corren: I'm not great at reading bash scripts yet ;)
[15:44] c4milo1 has joined the channel
[15:48] Viriix has joined the channel
[15:49] ziro` has joined the channel
[15:50] kmwallio has joined the channel
[15:51] marcello3d: v0.1.8 released! https://github.com/marcello3d/node-mongolian
[15:51] dylang has joined the channel
[15:52] micheil: Corren: well, the console spew will be written to either stdout or stderr
[15:53] micheil: so, you need to be catching those, if you're currently sending them to dev/null
[15:53] micheil: eg:
[15:53] micheil: node foo.js >> stdout.log 2> stderr.log
[15:54] sirkitree has joined the channel
[15:54] marcello3d: or if you're using nohup, it has an output file option, I think
[15:54] plyons has joined the channel
[15:54] micheil: although, seriously, upstart is far far better then nohup.
[15:55] cellvia has joined the channel
[15:55] plyons: Hello. I'm hoping someone might be able to help me with an express.js AJAX headscratcher.
[15:55] plyons: I have a GET set up that will return some JSON
[15:55] marcello3d: micheil: is it standard?
[15:56] micheil: upstart?
[15:56] micheil: it's the default /etc/init.d thing for ubuntu systems now
[15:56] plyons: works fine via curl or via the browser, but when accessed via ajax, express never logs the request and the browser acts like the server isn't responding
[15:56] plyons: (I've tried ajax with both backbone and straight jquery)
[15:56] steffkes: plyons, using firefox and installed firebug? if so .. what is firebug showing?
[15:56] Corren: micheil: that looks like exactly what we're doing
[15:56] Corren: although some of the syntax is foreign to me
[15:56] plyons: firebug shows the outstanding request
[15:57] plyons: with a spinner indicating its waiting for the server to respond
[15:57] kmwallio has joined the channel
[15:57] micheil: plyons: it looks like express isn't responding to that request
[15:57] steph021 has joined the channel
[15:57] plyons: so as far as FF is concerned, the request is sent, but I don't see my log statements in express which makes me think express doesn't even see the request properly
[15:57] Corren: micheil, can you help me digest this
[15:57] Corren: $NODE $BASE/app.js 2>&1 >> $BASE/node.log < /dev/null &
[15:57] steffkes: plyons, and copying the request-url + params, executing this with curl .. work's?
[15:58] plyons: steffkes: yes
[15:58] plyons: or if I just load the URL in the browser
[15:58] andrewfff has joined the channel
[15:58] marcello3d: man. my windows folder after all these updates is 20GB
[15:58] marcello3d: what the hell
[15:59] Lagnus has joined the channel
[15:59] micheil: Corren: try changing it to what I had above
[16:00] micheil: $NODE $BASE/app.js >> $BASE/stdout.log 2> $BASE/stderr.log
[16:00] Corren: I'm just trying to understand what the routing parameters do :S
[16:00] micheil: &
[16:02] zomgbie has joined the channel
[16:04] Corren: ok
[16:04] Corren: what'd I just do? :)
[16:04] dumbo_ has joined the channel
[16:05] edude03 has joined the channel
[16:06] ardcore has joined the channel
[16:10] marcello3d: Corren: http://www.tldp.org/LDP/abs/html/io-redirection.html
[16:10] dguttman has joined the channel
[16:10] Corren: yea, I'm reading exactly that now
[16:10] Corren: :)
[16:10] marcello3d: :)
[16:10] skm has joined the channel
[16:10] Corren: I kept looking for "bash routing" and getting iptables and routes stuff
[16:10] Corren: magic keyword was redirection not routing ;)
[16:10] marcello3d: you probably want 2>> instead of 2>
[16:10] marcello3d: otherwise it'll erase your stderr every time you restart
[16:11] Corren: it's amazing how you can be a kickass developer at one thing, and feel like a complete newb at something else
[16:11] Corren: I just quit microsoft after 10 years ;)
[16:11] piscisaureu_ has joined the channel
[16:11] c4milo1: 2>&1  >> yourlogfile 
[16:12] Corren: ok so 2>&1 reroutes FD 2 to FD 1, right?
[16:12] c4milo1: redirect stderr to stdout and both to that log file 
[16:12] marcello3d: corren: so maybe you know why my windows\installer and windows\winsxs folders are so huge?
[16:12] Corren: because we have shitty engineers? ;)
[16:12] Corren: let me look at mine
[16:13] skm has joined the channel
[16:15] Corren: omg
[16:15] Corren: my winsxs folder has 100k+ items
[16:15] Corren: sigh
[16:18] kmwallio has joined the channel
[16:18] skm has joined the channel
[16:19] gtramont1na has joined the channel
[16:21] gtramont1na: Hey all. I've asked this a while ago but couldn't manage to make it work. How do I run VowsJS programatically? I.e. without having to create a new child process.
[16:22] dnolen has joined the channel
[16:22] gtramont1na: I'm writing a Jakefile to my app, so I want to be able to run the tests via jake. Like 'jake test:unit' and this would trigger vows.
[16:25] kiba has joined the channel
[16:25] kiba: if I want to talk to bitcoind via HTTP-JSON-RPC, how would I do it?
[16:25] kiba: via a http-json-rpc library?
[16:25] kiba: https://en.bitcoin.it/wiki/API_reference_(JSON-RPC)
[16:28] samuelcole_ has joined the channel
[16:32] kmwallio has joined the channel
[16:32] chrislorenz has joined the channel
[16:32] timmywil has joined the channel
[16:33] koo6 has joined the channel
[16:33] kuya has joined the channel
[16:36] pauls has joined the channel
[16:37] jjmalina has joined the channel
[16:38] ardcore has joined the channel
[16:38] cwang has joined the channel
[16:39] prettyrobots: piscisaureus:  Are you doing your development on 64 bit Windows?
[16:39] ryanfitz has joined the channel
[16:40] dandean has joined the channel
[16:40] path[l] has joined the channel
[16:42] graysky has left the channel
[16:43] path[l]: hi. I dont understand something about writestreams, Could anyone tell me if drain will ever fire when error fires?
[16:48] Me1000 has joined the channel
[16:49] newy_ has joined the channel
[16:55] asdfsafdsa: How do I make a sync version of an async function? my function uses the spawn child function, how do I make it wait until it's finished?
[16:56] stride: you write a JS-based php generator
[16:56] stride: and then you use that
[16:56] stride: :)
[16:56] c4milo1 has left the channel
[16:58] rfay|easychair has joined the channel
[16:58] liquidproof has joined the channel
[16:58] dandean has joined the channel
[17:00] thalll has joined the channel
[17:00] Narcotic has joined the channel
[17:01] TheIronWolf has joined the channel
[17:01] boaz has joined the channel
[17:02] matschaffer has joined the channel
[17:02] [[zz]] has joined the channel
[17:02] pdelgallego_ has joined the channel
[17:03] unknown_had_ has joined the channel
[17:03] Aikar: hmm
[17:03] Aikar: interesting note
[17:03] Aikar: V8::Object->GetIdentityHash is slow
[17:03] Aikar: if ((*iter)->GetIdentityHash() == o->GetIdentityHash()) { if ((*iter)->StrictEquals(o)) {
[17:03] Aikar: wrapping that around the strictequals actually slowed it down
[17:05] steph021 has joined the channel
[17:08] brianloveswords has joined the channel
[17:09] kioopii has joined the channel
[17:11] skm has joined the channel
[17:12] sourcode has joined the channel
[17:14] Corren has joined the channel
[17:15] sako has joined the channel
[17:15] breakpointer has joined the channel
[17:16] irPhunky has joined the channel
[17:16] kuya: has anyone used mongoq?
[17:16] kuya: i cant seem to get an object by its id ( im sure i always have this problem every 3 months when i try and do something with mongo...)
[17:17] unknown_had has joined the channel
[17:18] skm has joined the channel
[17:20] kuya: actually ignoring mongoq, how do i do the same with mongo-native?
[17:20] kuya: ACTION realised thats stupid 
[17:21] a|i has joined the channel
[17:21] a|i: is this the shortest way of making a post request to an external server?: http://www.theroamingcoder.com/node/111
[17:21] jhonber has joined the channel
[17:22] a|i: or is tehre a built-in function to wrap that?
[17:23] SamuraiJack has joined the channel
[17:24] stephank: a|i: request.end() takes the same parameters as request.write(), allowing you to fold those two separate calls into one.
[17:24] stephank: other than that, seems about right
[17:24] a|i: stephank: how about things like automatically generating the right header? basically things that jquery.post would do.
[17:25] jjmalina: kuya: I can tell you how to do that with mongoose
[17:26] iFire has joined the channel
[17:26] jjmalina: havent used mongo-native or mongoq
[17:26] stephank: a|i: The API is fairly low level, it doesn't have that. The only helper is http.get, which is also incredibly thin. It's the same as http.request, but it sets the method and calls request.end, that's it.
[17:27] a|i: stephank: ok, thanks.
[17:27] ardcore has joined the channel
[17:27] kuya: jjmalina: i think i need an ObjectID which stupidly isnt exposed via mongoq itself...
[17:28] xastey has joined the channel
[17:30] jjmalina: kuya: check out http://mongoosejs.com/docs/api.html#
[17:30] jjmalina: there is a findByID method that would do what you want
[17:31] AphelionZ has joined the channel
[17:31] kuya: thanks jjmalina 
[17:32] xtianw has joined the channel
[17:32] pdelgallego_ has joined the channel
[17:32] jjmalina: kuya: no problem, it might also be helpful to watch this screencast on mongoose http://nodetuts.com/tutorials/21-nodejs-mongodb-and-mongoose-11.html#video it shows you how to get it up and running
[17:33] AphelionZ: Does anybody here have experience with the twitter oauth stuff and node? I could really use some help getting this set up
[17:35] NuckingFuts has joined the channel
[17:36] pdelgallego has joined the channel
[17:37] Bwen has joined the channel
[17:39] ardcore has left the channel
[17:42] amerine has joined the channel
[17:43] jonaslund has joined the channel
[17:44] CrisO has joined the channel
[17:44] Viriix has left the channel
[17:44] flippyhead has joined the channel
[17:44] janne has joined the channel
[17:44] gazumps has joined the channel
[17:45] piscisaureus has joined the channel
[17:51] Narcotic has left the channel
[17:51] indutny has joined the channel
[17:51] indutny: ryah: around?
[17:52] ghost has joined the channel
[17:54] hackband has joined the channel
[17:54] indutny: ryah: I'm thinking about creating separate module that'll add NPN to tls module, but I need to include node_crypto.h . Can it be added to include dir sometime?
[17:55] jonaslund: NPN ?
[17:56] xiackok has joined the channel
[17:56] pquerna: next protocol nego
[17:57] pquerna: jonaslund: http://tools.ietf.org/html/draft-agl-tls-nextprotoneg-01
[17:57] pquerna: http://tools.ietf.org/html/draft-agl-tls-nextprotoneg-02
[17:58] Aikar: indutny: wouldnt it be better off directly in core? why not submit a patch to ry to add what your wanting to add
[17:59] zomgbie has joined the channel
[17:59] pquerna: there is a pull request open for it
[17:59] harth has joined the channel
[18:03] sivy has joined the channel
[18:07] FireFly|n900 has joined the channel
[18:08] saikat_ has joined the channel
[18:09] newy_ has joined the channel
[18:12] unomi has joined the channel
[18:12] blueadept has joined the channel
[18:12] jlecker has joined the channel
[18:13] sako has joined the channel
[18:14] sako has joined the channel
[18:14] johnciacia has joined the channel
[18:15] eee_c has joined the channel
[18:15] gtramont1na has joined the channel
[18:15] sako has joined the channel
[18:16] boaz has joined the channel
[18:18] boaz has joined the channel
[18:18] indutny_ has joined the channel
[18:19] javaanse_jongens has joined the channel
[18:20] V1 has joined the channel
[18:22] TheIronWolf has joined the channel
[18:26] ryan[WIN] has joined the channel
[18:28] javaanse_jongens has joined the channel
[18:29] sleeplessinc has joined the channel
[18:31] arunagw has joined the channel
[18:32] b0t` has joined the channel
[18:32] themiddleman has joined the channel
[18:33] svenlito: i believe my installation of node isnt configured properly. cant find node and other modules
[18:33] svenlito: specificly express
[18:34] omni5cience has joined the channel
[18:35] antimatter__ has joined the channel
[18:36] antimatter__: what is currently the most stable web stack available for node.js
[18:37] antimatter__: well..other than express
[18:37] Aikar: you ask for the most stable, then exclude the most stable? lol
[18:37] Aikar: why not just use express
[18:38] ji0n has joined the channel
[18:38] antimatter__: i want to eval pros/cons of more than one web stack before sticking on to something :)
[18:39] Aikar: express really isnt a full stack
[18:40] matthijs has joined the channel
[18:40] pquerna: express is the defacto 'webstack' at this point.  There are several newer ones trying to be modeled after django for example, but I don't think they have the adoption/community that express has yet.
[18:40] pquerna: express doesn't provide nearly as much feature wise as many, maybe compare it as pylons to django or something.
[18:40] Aikar: id say just start using express, then if you encounter something express doesnt do that you need, either extend express, or then look at other options
[18:41] antimatter__: yup...i guess that makes sense ..ty
[18:41] patcito has joined the channel
[18:41] Aikar: but the easiest solution is prolly gonna be just write the code to extend express when you encounter something you need
[18:41] chapel: express is easy to extend
[18:41] chapel: or really
[18:41] chapel: look at connect
[18:41] chapel: and add to it what you want
[18:41] chapel: make your own webstack
[18:41] chapel: :)
[18:42] chapel: or even go more barebones
[18:42] chapel: and use stack
[18:42] chapel: :P
[18:42] chapel: or even more, and use http.server
[18:42] antimatter__: yeah i guess i also need to use a reverse proxy
[18:42] chapel: :)
[18:42] antimatter__: for security reasons...like nginx
[18:42] AphelionZ: Does anybody here have experience with the twitter oauth stuff and node? I could really use some help getting this set up
[18:42] chapel: for security reasons?
[18:43] antimatter__: yes...it is very difficult to set up security of resources using node afaik
[18:43] Aikar: O.o
[18:43] Aikar: it is?
[18:44] chapel: lol
[18:44] chapel: node will be just as secure as nginx
[18:44] chapel: it isn't like node is running arbitrary code, unless you let it
[18:44] Aikar: you have to have code that makes a file open to the public...
[18:44] Aikar: if using expresses static dir, dont point it to your projects root, make a seperate dir
[18:45] Aikar: then dont put anything in the static dir you dont want public
[18:45] A_Nub has joined the channel
[18:45] chapel: but yeah, this is much different than php days
[18:45] antimatter__: okay...
[18:45] chapel: where you have to worry about everything you run
[18:45] chapel: not to say you should be lax
[18:45] chapel: but node can be as open or closed as you want
[18:45] Aikar: now, were not saying you shouldnt couple nginx with node
[18:45] Aikar: some people prefer to use nginx for static content
[18:45] chapel: that is a different story
[18:45] javaanse_jongens has joined the channel
[18:46] chapel: but for security... not a reason
[18:46] Aikar: specially large files, as expresses static provider likes to cache large files and waste memory :/
[18:46] killfill: hey guys.. im doing an experiment and wish to host it somewhere when its ready. Need to persis data. Whats a common way to persis data, that will be avaible in common node hosting providers?
[18:46] chapel: which, there may be a better node based static file server out there
[18:46] killfill: couch?
[18:46] antimatter__: how can you provide services of a reverse proxy using node?
[18:46] antimatter__: i think reverse proxy matters
[18:46] chapel: node does reverse proxies easy
[18:47] chapel: there are tons of guides on doing them in like 20 loc
[18:47] mscdex: antimatter__: https://github.com/nodejitsu/node-http-proxy
[18:47] chapel: :)
[18:47] mikeal1: the simplest case is incredibly simple
[18:47] chapel: mscdex to the rescue
[18:47] mikeal1: i spent years writing proxies in python
[18:47] mscdex: node.js rules!
[18:47] mikeal1: my first project ot learn node was a proxy
[18:47] mikeal1: that was like a year and a half ago
[18:47] chapel: yeah mikeal1
[18:47] chapel: the new hello world is hosting
[18:48] chapel: :P
[18:48] mikeal1: it was like twice as many lines back then :)
[18:48] antimatter__: @mikeal1 thanks a lot :)
[18:48] mscdex: the new hello world is writing a framework
[18:48] mscdex: ;)
[18:48] antimatter__: lol
[18:48] chapel: yeah, with pipe, you cut out like 5 loc or something
[18:49] mikeal1: also, promises took more lines
[18:49] mscdex: ACTION shakes a fist at promises
[18:49] mikeal1: i still want to implement an improved proxy that pipes the sockets and detaches the http parser once it decides where to send
[18:50] mnbvasd: ACTION gives mscdex a baby
[18:50] mikeal1: i tried with 0.2 but it failed
[18:50] Aikar: http://groups.google.com/group/nodejs/browse_thread/thread/de122e56b1668fb8
[18:50] Aikar: new module!
[18:50] mikeal1: the http parser couldn't really detach back then
[18:50] mikeal1: message queue is the new hello world :)
[18:51] CrisO has joined the channel
[18:51] mikeal1: where is guillermo
[18:52] mikeal1: dammit
[18:52] piscisaureu_ has joined the channel
[18:55] lorhko has joined the channel
[18:55] javaanse_jongens has joined the channel
[18:56] mikeal1: what i really want
[18:56] mikeal1: is a node-dirty style redis implementatino
[18:56] mikeal1: that would work for really quick sites where you don't want to both installing redis
[18:57] mikeal1: but once it grows you just plop in redis
[18:57] saikat has joined the channel
[18:58] langworthy has joined the channel
[18:58] chapel: hmm, I would say chaos mikeal1 but that doesn't have in memory stuff
[18:59] chapel: it has redis like usage though
[18:59] maru_cc has joined the channel
[18:59] micheil: mikeal1: finally working on that node-meshing thing that I had the ideas to ages ago.
[19:00] mikeal1: you know ryan is almost complete on his thing right?
[19:01] gattuso has joined the channel
[19:01] antimatter__: is there any key value store written on top of node.js  [not node.js bindings to existing key value stores such as mongo..couch etc]
[19:02] mikeal1: yes
[19:02] mikeal1: a couple
[19:02] zkirill has joined the channel
[19:02] Eber has joined the channel
[19:02] mikeal1: i wouldn't call any of them complete tho
[19:02] antimatter__: mikeal1 ...you got any link
[19:03] mikeal1: node-dirty
[19:03] mikeal1: also time wrote one
[19:03] Aikar: mikeal1: yeah another message system, but i wanted something for high performance :) and MessagePack is much better than json
[19:03] antimatter__: :)
[19:03] antimatter__: yup
[19:03] mikeal1: but like most of tim's libraries, it's abandoned :)
[19:03] mikeal1: tim not time
[19:03] mikeal1: why is MessagePack "better"?
[19:03] Aikar: faster, more compact
[19:04] mikeal1: so, your bottleneck is pushing bits over the wire?
[19:04] kkaefer: well, depends on the use case
[19:04] Aikar: writing less = less cpu used
[19:04] mikeal: that's not entirely accurate
[19:04] eyesUnclouded has joined the channel
[19:05] mikeal: parse structures can benefit from being verbose to improve parse time and cpu utilization
[19:05] mikeal: i'm not saying json was designed for that, it certainly isn't
[19:05] mikeal: but i think you're worried about the wrong thing
[19:05] saikat has joined the channel
[19:05] mikeal: JSON is not your bottleneck
[19:05] Aikar: never said it was :P
[19:06] Aikar: just said that msgpack was faster
[19:06] mikeal: and using JSON has huge benefits
[19:06] c4milo1 has joined the channel
[19:06] mikeal: and the parsing is probably faster if you're using a javascript msgpack parser
[19:06] javaanse_jongens has joined the channel
[19:06] mikeal: is it tho?
[19:06] mikeal: and why does it matter?
[19:06] mikeal: if you're working on a datastore
[19:06] mikeal: your first concerns should be durability and consistency 
[19:06] kmwallio has joined the channel
[19:07] Aikar: if 1 imp uses 50% cpu and the other uses 10% cpu, which do you consider better?
[19:07] mikeal: JSON is well defined and consistent 
[19:07] mikeal: you're working on a datastore, you should be concerned with throughput dude
[19:07] Aikar: O.o?
[19:07] Aikar: im not working on a datastore
[19:08] mikeal: i'll use 50% over 10% if i get double throughput
[19:08] mikeal: gladly :)
[19:08] xandrews has joined the channel
[19:08] mikeal: if it's only 50% i've got CPU to spare
[19:08] mikeal: what you find most of the time is that you can't max out your CPU usage, your bottleneck is disc or waiting on some kind of latency 
[19:08] mikeal: anyway, doesn't really matter
[19:09] mikeal: i'm just saying, JSON isn't your bottleneck
[19:09] mikeal: and using msgpack is annoying 
[19:09] mikeal: compared to JSON, it's less flexible and harder to debug
[19:09] mikeal: there are cases where you *need* msgpack
[19:10] mikeal: or more accurately, you need a binary format that is hyper low latency
[19:10] mikeal: like erlang's message format, it's native binary terms
[19:10] mikeal: because latency of the parse and the wire is important
[19:10] mikeal: but that's for distribute parsing, not storage, indexing, or queuing
[19:10] postwait: mikeal: JSON is "consistent" -- what does that mean?
[19:11] mikeal: it's well defined and not prone to errors
[19:11] mikeal: there is a parser in every language that is proven an won't encode data improperly
[19:11] mikeal: and, even if it does, your parser will error on it rather than giving you some kind of corrupted data
[19:12] postwait: all the parsers generate different output...
[19:12] mikeal: that's not true at all
[19:12] postwait: the numeric support in JSON is flat-out awful.
[19:12] mikeal: they all output valid JSON
[19:12] mikeal: numeric support?
[19:12] mikeal: you have integers and floats
[19:12] mikeal: what else would you like?
[19:12] postwait: not in JSON.
[19:12] postwait: in Javascript you have integers and floats.
[19:12] V1: 64bit ints :)
[19:12] micheil: mikeal: nope, not that I know what ryah's thing is.
[19:12] postwait: JSON you simply have numbers.
[19:12] mikeal: no, in javascript you have numbers
[19:13] kkaefer: postwait: no, in javascript you have numbers
[19:13] systemfault: postwait: What?
[19:13] mikeal: postwait: you have that backwards
[19:13] systemfault: JSON being a subset of JS ...
[19:13] mikeal: javascript has numbers
[19:13] mikeal: JSON has integers and floats
[19:13] systemfault: On both, you only have numbers
[19:13] mikeal: read the spec
[19:13] ryan has joined the channel
[19:13] mikeal: no, you're both wrong
[19:13] postwait: javascript attempts to understand when you are using an float as an integral value (v8 at least)
[19:13] pomodoro has joined the channel
[19:13] postwait: so that i++ doesn't produce odd results.
[19:13] mikeal: that isn't true either, but ok
[19:13] Me1000 has joined the channel
[19:13] mikeal: doesnt' matter, 
[19:14] postwait: b/c... 1+2 != 3 in IEEE 754 64bit floating point.
[19:14] mikeal: JSON has integers and floats
[19:14] systemfault: JS only has double precision floats
[19:14] systemfault: No such think as integers in JS.
[19:14] systemfault: *thing
[19:15] postwait: So.. when I store 2^127-1 ... and put that in a JSON document.
[19:15] postwait: technically it is valid.
[19:15] postwait: And erlang JSON parser can both digest and produce that number.
[19:15] mikeal: JSON numbers are defined as either integers or floats
[19:15] mikeal: it's a serialization format
[19:15] mikeal: it doesn't defined which IEEE number it decodes in to
[19:15] mikeal: er define
[19:15] mikeal: for instance, NaN and Infinity are not permitted in JSON
[19:16] postwait: very odd: http://www.json.org/
[19:16] postwait: only mentions number.
[19:16] systemfault: mikeal: I wouldn't argue against crockford on that.
[19:16] postwait: not integer and float
[19:16] systemfault: mikeal: Since he's the guy who invented the format.
[19:16] mikeal: read the RFC, it defines numbers as either a floating point encoding or an integer encoding
[19:16] systemfault: sigh.
[19:16] mikeal: it does not define how those are parsed, only how they are serialized and what can be defined
[19:17] mikeal: so, if you have floating point numbers and integers, you can distinguish them in your language of choice
[19:17] mikeal: if you don't have a way to distinguish them, you don't
[19:17] mikeal: but they aren't javascript numbers, only integers and floats are acceptable
[19:17] mikeal: look at the Python parser
[19:18] postwait: regardless.. because it doesn't specify the implentation it is not consistent.
[19:18] mikeal: bullshit
[19:18] mikeal: you can't define the implementation of a serialization format in a way that can't be implemented everywhere
[19:18] mikeal: that's why it exists that way
[19:18] postwait: If you deserialize into an IEEE754 double... you will have a different number than I do in erlang (which uses arbitrary precision numbers)
[19:18] mikeal: two languages that support floats can exchange them without any change or degredation
[19:19] mikeal: yup, and that's the best you can hope for when exchanging numbers between erlang and another language
[19:19] mikeal: you can't push the implementation in to the serialization format, specs that do that die
[19:19] mikeal: because they aren't implementable 
[19:20] mikeal: it's the same thing with datetime objects
[19:20] postwait: and the RFC doesn't include the work float anywhere.
[19:20] mikeal: they aren't in JSON because nobody has a consistent way to implement even the bare minimum
[19:20] mikeal: nope, it doesn't, it uses the term decimal
[19:20] mikeal: so that it doesn't force an implementation
[19:21] postwait: It simply specifies number
[19:21] postwait: mikeal: you seems pretty hostile
[19:21] mikeal: i'm trying to understand what you want
[19:21] mikeal: do you want a serialization format to require a number format that isn't possible in half the languages out there
[19:22] postwait: I want people to realize that JSON is not an excellent serialization format for many things.
[19:22] Metapony has joined the channel
[19:22] CrisO has left the channel
[19:22] Aikar: so
[19:22] mikeal: because if all you want is to exchange a number the same language and preserve the actual number it already does that
[19:22] dylang has joined the channel
[19:22] Aikar: i just reset my wormhole lib back to old state and switched it to use json
[19:22] mikeal: and i think you're wrong :)
[19:22] Aikar: json is doing 1k messages/sec
[19:22] postwait: If I'm being handed a 64bit (or 128bit) integer... I want to know it's an integer.
[19:23] mikeal: Aikar: how big are the JSON objects?
[19:23] postwait: So my language, whatever it is, can do the right thing.
[19:23] Aikar: small
[19:23] postwait: Even if that is telling me: "I can't do that... sorry"
[19:23] Aikar: unpacking buffer '{"call":"foo","args":[1,2,3,2222,true,"false",{"x":"y"}]}'
[19:23] mikeal: postwait: dude, you want something that is impossible
[19:23] mikeal: actually
[19:23] mikeal: scratch that
[19:23] mikeal: you want XML
[19:23] postwait: mikeal: no..
[19:23] mikeal: yes, you do
[19:23] mikeal: you want schema validation 
[19:23] mikeal: basically
[19:24] mikeal: you want to define a number format that requires a particular implementation and will fail otherwise
[19:24] postwait: how is that "impossible?
[19:24] mikeal: if you *require* a 64bit integer and i don't support that then I can't hand you anything
[19:24] postwait: And XML doesn't support that well.
[19:24] postwait: ASN.1 does a much better job.
[19:24] postwait: I would submit that if I want "easy" also -- that approaches impossible.
[19:25] postwait: But simple things are hard in JSON.
[19:25] postwait: like: how many bytes has my web server sent.
[19:25] mikeal: yup, all the simple user cases require floating point precision :)
[19:25] mikeal: user cases
[19:25] postwait: because it is stored server side as a 64-bit unsigned int.. and if I send that to Javascript it poops.
[19:25] mikeal: use cases
[19:25] mikeal: man, i can't type
[19:25] postwait: JSON is *awesome* for those use cases.
[19:26] mikeal: postwait: that translation, is expected
[19:26] postwait: Which is why we all use it.
[19:26] mikeal: answer this
[19:26] mikeal: if your client has this number type
[19:26] mikeal: serializes it to JSON
[19:26] mikeal: and sends it to your server that uses the same langauge
[19:26] mikeal: it'll work as expected
[19:27] postwait: If they use the same language WTF is the point of JSON and a serialization protocol.
[19:27] mikeal: when your server interacts with languages that don't support the same number type, they will get slightly varied behavior but will still mostly work
[19:27] unomi has joined the channel
[19:27] mikeal: that's what was *designed* to happen
[19:27] mikeal: you need to send *something* over the wire
[19:27] mikeal: and JSON is well defined and pretty damn fast
[19:27] postwait: that was not "designed" at all.
[19:28] stephank has joined the channel
[19:28] postwait: heh.
[19:28] mikeal: this is the mentality of XML
[19:28] postwait: JSON is poorly defined and exceptionally slow compared to almost any counterpart.
[19:28] postwait: JSON is easy.
[19:28] postwait: That is why it is nice.
[19:28] mikeal: exceptionally slow
[19:28] mikeal: that is hilarious
[19:28] mikeal: it's not slow
[19:28] cloudhead2 has joined the channel
[19:28] postwait: compared to what?
[19:28] mikeal: why do you think it's slow exactly?
[19:29] mikeal: it's slow compared to serializing native terms
[19:29] postwait: ASN.1?
[19:29] postwait: protobufs
[19:29] postwait: etc.
[19:29] mikeal: i would say that, for small objects
[19:29] postwait: all blindingly fast in comparison.
[19:29] mikeal: JSON in v8 is faster than ASN.1 and protobufs
[19:29] tschundeee has joined the channel
[19:29] mikeal: the C parser is pretty fast
[19:29] mikeal: spidermonkey's is faster
[19:30] teemow has joined the channel
[19:30] osserver_ has joined the channel
[19:30] mikeal: both suffer from really bad performance for exceptionally large objects
[19:30] postwait: Wow.  I think I'll step out of this conversation now.
[19:30] mikeal: i actually benchmarked this btw
[19:30] johnnywengluu: V8 is the fastest!
[19:30] systemfault: mikeal: I agree with you on pretty much everything but that JSON has integers ;)
[19:31] mikeal: systemfault: JSON only allows encoding of numbers in to integers or floats, and all languages that have two types distinguish them
[19:31] mikeal: the specification lumps them together, but they are not javascript numbers
[19:31] postwait: mikeal: please point me to the part of the RFC that says that.
[19:32] systemfault: JSON itself only has numbers, what the implementation does is irrelevant (That's the only part I disagree with you)
[19:32] postwait: systemfault: if I pass a number of JSON.. what the implementation is required to provide is incredibly relevant.
[19:32] mikeal: http://tools.ietf.org/html/rfc4627#section-2.4
[19:32] mikeal: read the encoding
[19:33] mikeal: number = [ minus ] int [ frac ] [ exp ]
[19:33] mikeal: frac = decimal-point 1*DIGIT
[19:33] zcopley has joined the channel
[19:33] mikeal: this requires all numbers to be either integers or floats
[19:33] mikeal: and that is intentional
[19:34] mikeal: to not require a number type that is parsed but to only allow the encoding of numbers in to types that everyone can understand and can be supported in languages that differentiate 
[19:34] jonaslund: postwait: errr... explain why you think 1+2 !=3 in IEEE 754?
[19:34] mikeal: it is the job of a language to define how JSON is parsed in to it's type system
[19:34] mikeal: which is what ECMA5 does
[19:35] postwait: JSON: { a: 9223372036854775807 }
[19:35] postwait: an integer..
[19:35] postwait: I get a different answer in node... vs. erlang.
[19:35] postwait: _awesome_ serialization protocol.
[19:35] mikeal: oh god
[19:35] ckknight: that doesn't fit into an IEEE754 64-bit float
[19:35] jonaslund: IEEE 754 has 1.[Mantissa (fractional bits)]^exp .. 3 would be 1.1 (in bits) << 1 -> 11. -> 3
[19:35] mikeal: it's not the job of the serialization format to fix incompatibilities between number formats
[19:35] postwait: ckknight: missed that part of the spec.
[19:35] postwait: That's an INTEGER.
[19:35] postwait: by all math definitions.
[19:36] ckknight: and Javascript doesn't have integers
[19:36] postwait: Put it in an int.. not a float.
[19:36] ckknight: Erlang does, so that's how it reads it
[19:36] ckknight: Javascript would also never output that number
[19:36] postwait: I'm not talking about Javascript... I'm talking about JSON.
[19:36] zcopley has joined the channel
[19:36] ckknight: "postwait: I get a different answer in node... vs. erlang."
[19:36] ckknight: so yes, you're talking about differences in languages
[19:36] Qbix2 has joined the channel
[19:36] jonaslund: While i agree that JSON has flaws if you want EXACT reproduction i don't see the argument of postwait
[19:37] Qbix2: hi guys
[19:37] ckknight: Erlang has support for bigger accurate integers than Javascript
[19:37] jonaslund: It's like arguing that you can't go fast around nurnburgring in a tractor
[19:37] ckknight: howdy, Qbix2
[19:37] Qbix2: Question - how do I do it? 
[19:37] kkaefer: postwait: ieee754 allows representation of integers up to 53 bits without losing precision
[19:37] ckknight: Qbix2: very carefully, I'd hope
[19:37] mikeal: this is actually hilarious
[19:37] Qbix2: Thanks, ckknight. That helped a lot :)
[19:37] mikeal: because i worked on CouchDB for years
[19:37] ckknight: Qbix2: just doing my part
[19:37] mikeal: and we constantly send numbers from JavaScript to Erlang over JSON
[19:37] ckknight: mikeal: couchdb is slow because of JSON, amirite?
[19:37] perezd has joined the channel
[19:38] mikeal: do you know how many times this was an issue
[19:38] Qbix2: Okay, here's my real question: can I use Node.js to send and receive email using SMTP? Especially, can I use node.js to handle incoming email directed to something@mydomain.com?
[19:38] mikeal: you can describe it in any number format
[19:38] Qbix2: I would prefer not to have to use postfix and read its logs.
[19:38] mikeal: cause it's fuckin zero
[19:38] mikeal: ckknight: JSON is not a bottleneck in couchdb
[19:38] mikeal: we thought it was
[19:38] Billbad has joined the channel
[19:38] postwait: sending a number from JS to Erlang over JSON should be prettyy safe.
[19:38] mikeal: that's why i benchmarked all of this :)
[19:38] ckknight: mikeal: sorry, I was being facetious
[19:38] postwait: Sending a number from erlang to JS is not.
[19:38] postwait: And we have issues all the time.
[19:39] cloudhead_ has joined the channel
[19:39] mikeal: we really did think it was a bottleneck
[19:39] perezd has joined the channel
[19:39] mikeal: and it was before spidermonkey added native serialization a few years ago
[19:39] jonaslund: JS doesn't support anything higher than 64bit floats.. so ofcos it's not safe
[19:39] mikeal: using json2.js was painful
[19:39] ckknight: postwait: if you have numbers > 2^53, yes, you'll have issues. No one is disputing that.
[19:39] Qbix2: Anyone know how I can receive mails with a Node.js SMTP client? (MX with MDA?)
[19:39] ckknight: Qbix2: to send would be easy enough, I'm sure someone has to have made a send library. Receive is probably not a good idea, just use a mail server.
[19:39] mikeal: so
[19:40] mikeal: JSON supports numbers higher than 64bit floats support
[19:40] mikeal: in javascript they will parse in to Infinity
[19:40] jonaslund: mikeal: what was the diff in speed between native serialization and the JS counterpart ?
[19:40] Qbix2: ckknight: why would you say it's not a good idea? Just wondering. Also, when people send attachments in email, I would like to somehow be able to access them.
[19:40] mikeal: but in other languages they will parse properly
[19:40] ckknight: Qbix2: you're past my knowledgebase at this point.
[19:40] mikeal: jonaslund: about 30x :)
[19:40] Qbix2: I found this: https://github.com/miksago/node-smtp-client
[19:40] micheil: oooh..
[19:40] micheil: don't use that.
[19:40] Qbix2: yeah ckknight, I guess I'll figure it out later
[19:40] Qbix2: don't use what
[19:40] DennisRasmussen has joined the channel
[19:40] micheil: seriously. do not use miksago/node-smtp-client
[19:41] mikeal: node-smtp-client is micheil's library :)
[19:41] micheil: :P
[19:41] Qbix2: oh okay
[19:41] xSmurf: hey guys, I have a weird issue, probably something stupid, but I need to run "npm install blah" every time or it fails to detect installed modules otherwise....
[19:41] micheil: use one of the forks
[19:41] Qbix2: can you point me to one fo them plz?
[19:41] Qbix2: how can I find the forks on github, of a project?
[19:41] kmwallio: https://github.com/miksago/node-smtp-client/network
[19:41] Qbix2: ah
[19:41] tschundeee has joined the channel
[19:42] micheil: https://github.com/pilif/node-smtp
[19:42] micheil: is the latest / most correct one, iirc.
[19:42] Qbix2: sweet. I wonder why they don't make that graph vertical. woudl be asier to read
[19:42] mikeal: postwait: if you're just passing numbers around erlang why don't you just serlialize native terms?
[19:42] Qbix2: thanks, micheil
[19:42] Qbix2: that's the one I saw first. :)
[19:42] postwait: from erlang -> node.js
[19:43] mikeal: if you need the number to be in node.js, you're going to have to translate it in to 64bit
[19:43] mikeal: 64bit float that is
[19:43] Qbix2: actually I saw this: https://gist.github.com/278814
[19:43] Qbix2: maybe that is enough?
[19:43] mikeal: so what is your actual problem?
[19:43] postwait: I need node to turn around and store them in postgres.
[19:43] mikeal: becuase JSON can't make javascripts numbers not suck
[19:43] postwait: (which supports arbitrary precision as well)
[19:43] Qbix2: who are you asking
[19:44] micheil: postwait: for erlang -> node.js, use Bert
[19:44] mikeal: so, node is in between erlang and postgres?
[19:44] postwait: mikeal: true... but apparently javascript can make someone write a poor serialization spec in JSON.
[19:44] postwait: :-)
[19:44] ckknight: goddammit, postwait
[19:44] ckknight: learn what numbers are
[19:44] rustyconover has joined the channel
[19:44] mikeal: postwait: you have two options
[19:44] mikeal: one, don't parse the JSON and pass it directly to postgres
[19:44] postwait: mikeal: we use node as a hub... lots of stuff: client, erlang, C, postgres, redis, AMQP.
[19:44] postwait: etc.
[19:45] mikeal: which has native json support now
[19:45] ckknight: when converting from 64-bit integers to 64-bit floating point numbers, you will have degradation over 2^53
[19:45] mikeal: and won't changes the number 
[19:45] esundahl has joined the channel
[19:45] ckknight: this has _nothing_ to do with JSON
[19:45] postwait: node will shit on the number as it gets decoded.
[19:45] micheil: do you seriously need 64-bit integers?
[19:45] mikeal: then don't decode it
[19:45] rustyconover: are most pull requests answered on their own or do I need to mail a mailing list or something?
[19:45] mikeal: postwait: iisten, i actually know how to fix this
[19:45] ckknight: rustyconover: on github, people are informed when a pull request is made.
[19:46] mikeal: you can either pass the JSON directly to postgres without parsing
[19:46] mikeal: or, you can use an evented parser
[19:46] postwait: We put the numbers in strings now.
[19:46] mikeal: like yajl
[19:46] postwait: And nest them with type information
[19:46] micheil: rustyconover: if it's a pull request to node.js, it can take some time for a response
[19:46] rustyconover: kthnx
[19:46] mikeal: when you hit a number, send it to a parser that supports a different number type in C, i believe SubStack has a library for htis
[19:46] postwait: { _type: "L", _value: "9223372036854775807" }
[19:46] mikeal: and make sure the postgres library undestands your new number type
[19:47] mikeal: or you can do that if you like, you'll have to handle it each time by hand
[19:47] rustyconover: would you guys want a patch for lingering socket close? like apache does?
[19:48] teemow has left the channel
[19:48] mikeal: rustyconover: ?
[19:48] mikeal: you mean an idle socket timeout?
[19:48] pita has joined the channel
[19:48] micheil: rustyconover: best to discuss something like that on node-dev, unless mikeal answer's it here :(
[19:49] marcello3d: wow
[19:49] postwait: no.. lingering close.
[19:49] micheil: s/:(/:)
[19:49] marcello3d: are we still arguing about numbers here?
[19:49] xSmurf: no dice really, NODE_PATH seems ok but it just won't find the modules unless I've jist installed them
[19:49] rustyconover: well, if we close a socket, then the client writes on it we send a RST packet on it.  apache implements code where the socket will linger to let the client receive the response before the RST is sent.
[19:49] postwait: I think that's pretty irrelevant in node.
[19:49] postwait: rustyconover: what situation does that solve?
[19:49] marcello3d: mongodb-native uses goog.Long for longs
[19:49] mikeal: rustyconover: so, i don't think we have that problem
[19:49] mikeal: calling close doesn't force a close
[19:50] mikeal: it sends a CLOSE to the underlying non-blocking io
[19:50] mikeal: which should close cleanly, which i believe does this for us
[19:50] piscisaureu_ has joined the channel
[19:50] mikeal: maybe it doesn't in all cases
[19:50] postwait: you can't do a non-blocking close.
[19:51] postwait: No POSIX spec for that.
[19:51] mikeal: but implementing it would be hard since it would require writing C code that is specific to each non-blocking io implementation
[19:51] postwait: you can only do an asynch close.
[19:51] tmedema has joined the channel
[19:51] postwait: So, the close should be handed to one of the thread pools that does blocking I/O
[19:51] mikeal: yeah, i don't know what the async equivolent of CLOSE is 
[19:51] postwait: which I thought it was.
[19:51] mikeal: no
[19:51] mikeal: socket io doesn't use a thread pool
[19:52] mikeal: only file io
[19:52] postwait: correct.
[19:52] postwait: but the close should.
[19:52] eyesUnclouded has joined the channel
[19:52] mikeal: that's something else
[19:52] mikeal: they are entirely different libraries
[19:53] unknown_had: hey I am new to nodejs so this may be a noobish question but if I just want to connect my webpage to the server(simple example server) then what should i do?
[19:53] rustyconover: I don't think I explained the situation exactly.  Say we have a client doing a large upload say 2 megs, we get the request and send a response before they are done writing the request (we call .close which closes the socket because it wrote all the data), then the client still writes more, they get a RST packet before they receive the reply. If we lingered on that close for a 30 seconds like apache does and throw away the dat
[19:53] Qbix2: it got cut off
[19:53] rustyconover: but instead will receive our reply.
[19:54] postwait: rustyconover: you can do that by not calling close.
[19:55] postwait: you can simply write... stop reading... and set a timer for cleanup.
[19:55] postwait: And it does look like the socket close call happens in the eventer thread.
[19:55] stonebranch has joined the channel
[19:55] CiRlE has joined the channel
[19:55] postwait: there are good performance gains in fixing that.
[19:55] rustyconover: yeah, thats what my patch did to Socket, add a flag socket.listenClose and a timeout
[19:56] rustyconover: .lingerClose rather
[19:56] mikeal: hrm….
[19:56] mikeal: how expensive would this be
[19:56] hassox has joined the channel
[19:56] postwait: rustyconover: ideally you actuall call shutdown on the recving side of the socket.
[19:56] mikeal: wouldn't we need to use the generic thread wrapper for every CLOSE call?
[19:57] rustyconover: you can see this all documented at http://apache.wirebrain.de/lxr/source/server/connection.c?v=2.2.0
[19:57] rustyconover: ap_lingering_close
[19:57] unknown_had: I want to change that "hello world" program to show my webpage instead of that "hello world".
[19:57] postwait: mikeal: node could spin up a close thread.. and we could actually push sockets over there lockless
[19:57] postwait: it would be very fast...
[19:57] jan____: like swoooosh fast.
[19:58] mikeal: hahaha
[19:58] mikeal: i haven't benchmarked swooosh fast yet
[19:58] mikeal: i'll get right on that :)
[19:58] jan____: Heya postwait (#fanboy)
[19:58] brianc: jonaslund: hey
[19:58] postwait: like far fewer CPU instructions and no system call fast.
[19:59] micheil: unknown_had: you would first need to learn about Node.js, then look at what options are from there
[19:59] postwait: ACTION waves at jan____ 
[19:59] brianc: jonaslund: you there? I just came online
[19:59] mikeal: and the worst question, will it work on windows :(
[19:59] postwait: jan____: we actually had this numbers nightmare with Couch :-)
[19:59] mikeal: i miss node.js a year ago, where we didn't have to care about windows
[19:59] stephank: those were the good times :p
[19:59] unknown_had: micheil, I am learning but I have to submit something within few hours so want to do this as fast as possible.
[20:00] mikeal: couch should store exactly what you send if it can be parsed by erlang
[20:00] mikeal: unless you use an update function
[20:00] mikeal: in javscript
[20:00] postwait: we store performance counters in couch.. they get incremented.. we ask for them.. erlang happily and (JSON compliant-ly) returns very very large numbers.
[20:00] postwait: And when node fetches them: it parses to the wrong number.
[20:00] postwait: very tiresome.
[20:00] jan____: postwait: don't tell me :( it's a sad affair
[20:00] mikeal: if you does javascript views on them they will break tho :(
[20:00] esundahl has joined the channel
[20:00] mikeal: s/does/do
[20:01] mikeal: but you could just use erlang views
[20:01] jan____: mikeal: it still breaks when reading the result in node
[20:01] mikeal: counters in couch generally don't work
[20:01] jan____: (it's a sad affair)
[20:01] mikeal: i got that jan____ :)
[20:01] rustyconover: okay thanks guys....  
[20:02] pquerna: yes, the whole big numbers thing is hurting us a little on the cassandra-node binding too.
[20:02] jan____: mikeal: didn't you write that blog post about atomic increments in couch *hide*
[20:02] mikeal: postwait: you should look at the work that SubStack is doing
[20:02] mikeal: he's implementing new number types for node in C
[20:02] postwait: I fixed node-gmp.
[20:02] jan____: pquerna: ^painfive
[20:02] mraleph: lack of proper numeric types is yet another javascript problem...
[20:02] mikeal: that you can treat like normal numbers but aren't 64bit floats
[20:02] postwait: Do, we use that sometimes...
[20:03] mikeal: the issue is that no JSON serializer will use them except an evented one where you parse the value yourself
[20:03] jan____: mraleph: it a "most other languages" problem, actually.
[20:03] postwait: The problem isn't supporting the numbers.. its the all the native bits (JSON.parse, etc.) do bad things.
[20:03] mikeal: jan____: yeah, if you load up my example with enough concurrency it'll break
[20:03] jan____: mikeal: yeah :)
[20:04] mikeal: because couchdb will start two view servers to process the update function and they will start stepping on each others revisions
[20:04] stagas has joined the channel
[20:04] mikeal: :(
[20:04] mikeal: also, forget about replication
[20:04] irPhunky has joined the channel
[20:05] mikeal: but to be honest, you can write to two databases and keep a consistent counter with any real load
[20:05] mraleph: postwait: what should they do if you give it a number that is unrepresentable in JS?
[20:05] boaz has joined the channel
[20:05] mikeal: the frequency of the updates would have to be less than the latency between the servers
[20:05] postwait: mraleph: throw
[20:05] jarek has joined the channel
[20:05] jarek has joined the channel
[20:05] jan____: mikeal: we'll have some answers for that real soon :)
[20:05] jarek: Hi
[20:05] jarek: what's the best way for reading first line of a file?
[20:05] mikeal: jan____: which part?
[20:06] mikeal: the view server stuff?
[20:06] jan____: mikeal: ah no, the distributed counters.
[20:06] piscisaureus has joined the channel
[20:06] mikeal: so, you can make it better
[20:06] mikeal: but it's actually impossible
[20:06] jan____: would love to solve the bignum/query server issue
[20:06] mikeal: to have a fully consistent counter between geographically distributed writable nodes
[20:06] postwait: my work yesterday: https://github.com/postwait/node-amqp/network
[20:07] postwait: if anyone uses node-amqp, there's some win in there.
[20:07] mraleph: postwait: yeah that might be an option
[20:07] mikeal: jan____: it's a node/javascript issue, not a couchdb issue :)
[20:07] mscdex: jarek: on the 'data' event, just search for \n
[20:07] mscdex: jarek: buffer until you find it
[20:07] jan____: mikeal: duh, there is no global clock.
[20:07] mikeal: doesn't stop people from asking for it tho :)
[20:07] jan____: mikeal: I still want it solved :)
[20:07] jjmalina has joined the channel
[20:07] mikeal: "but mongodb supports it"
[20:08] mikeal: :P
[20:08] mikeal: you can do all kinds of fancy impossible shit if you don't care about consistency :)
[20:08] jan____: :)
[20:08] postwait: mikeal: for most definitions of consistency it is possible.. performance sucks and it isn't partition tolerant.
[20:09] postwait: you simply define a quorum of all nodes and don't permit progress with out total ordered delivery of increments.
[20:09] mikeal: i want to see benchmarks of what mongodb is like with all this new durability on
[20:09] postwait: which would _suck_
[20:09] mikeal: because it still defaults to off
[20:09] jan____: mikeal: we could support BSON & bignums in couch without sacrificing consistency. Be careful with the trolling :)
[20:09] jan____: Yay, CAP!
[20:09] mikeal: postwait: right, which will work if the update interval * average throughput is smaller than the time for that calculation
[20:10] mikeal: if not, then they all back up in to memory until it crashes
[20:10] postwait: that's true with any system where the update frequency is faster than the operational frequency.
[20:10] mikeal: jan____: and parsing that in to node would still give postwait the same error :P
[20:10] postwait: that has nothing to do with it being a distributed system...
[20:10] mikeal: yup
[20:10] jan____: the solution is outside the box though, you rarely ever need consistent global counters.
[20:10] jan____: mikeal: hahaha
[20:10] postwait: If I up my counter super-fast ... like once/hour, it will work.
[20:11] postwait: mikeal: it would give us *all* the same error.
[20:11] mikeal: jan____: is couch actually going to store increments?
[20:11] postwait: it's sad.
[20:11] deepu has joined the channel
[20:11] jjmalina has joined the channel
[20:12] Opaque has joined the channel
[20:12] postwait: jan____: running it to the deadline -- I haven't seen a proposal from you: http://omniti.com/surge/2011/cfp
[20:13] deepu: is there a method to get data from html pages in node.js
[20:13] mikeal: surge has a good lineup
[20:13] jackbach has joined the channel
[20:13] mikeal: except ben black :P
[20:14] jan____: postwait: woha, I thought I made sure we have one it, let me crack a whip
[20:14] mscdex: deepu: either jsdom or run tidy on the html first and then use an xml parser on it
[20:14] mikeal: i wonder what bryan cantrill is talking about
[20:14] postwait: oh... maybe a membase one.
[20:14] jan____: mikeal: nope
[20:14] postwait: mikeal: that's last year's lineup... CFP end today.
[20:14] deepu: #mscdex :  i have to store login username and password from html file into a database
[20:14] mikeal: oh i see, i read that ribbon entirely wrong
[20:14] jackbach: hi there, somebody can help with /usr/bin/tar missing in macOS X? it seems like it's an issue with Xcode 3.1.4!
[20:14] postwait: jan____: make sure people submit practical problem solving talks -- not product talks.
[20:15] mscdex: deepu: oh, you're wanting to process submitted form data?
[20:15] jan____: postwait: we gonna do one on Couchbase, if that's cool, best of both worlds. or do you want two?
[20:15] deepu: yes
[20:15] postwait: jan____: need to do one on a problem -- not a product.
[20:15] mscdex: deepu: does that include file upload or no?
[20:15] jan____: postwait: that's no problem :)
[20:15] postwait: jan____: excellent.
[20:16] deepu: #mscdex no
[20:16] troynt has joined the channel
[20:16] mscdex: deepu: ok, then just buffer the form data as it comes in, then use querystring.parse() on it: http://nodejs.org/docs/v0.4.6/api/querystring.html#querystring.parse
[20:16] mikeal: can someone explain thrift to me, whenever i read about it I just hear a family guy voice in my head say "why?…."
[20:17] jan____: mikeal: I have the picture of Stewie turning/rotating his head upside down
[20:17] jan____: same scene probably
[20:17] mikeal: hahaha
[20:17] deepu: #mscdex is there any tutorial to fet details about html and node.js connection
[20:18] mikeal: it's like someone looked at SOAP and said "this isn't java enough"
[20:18] jan____: teehee
[20:19] mscdex: deepu: maybe somewhere, but it's pretty simple. i'll gist an example for you
[20:19] hassox has joined the channel
[20:20] deepu: #mscdex it would be helpful can you please shw some example
[20:20] mikeal: so, is that guy going to send that delayed close thing to the list or not?
[20:20] mikeal: i want to get pquerna's input on that
[20:22] tfe_ has joined the channel
[20:22] tfe_ has joined the channel
[20:23] jjmalina has joined the channel
[20:23] mscdex: deepu: https://gist.github.com/44c5dd28ac4d9ab779e6
[20:23] xSmurf: so what gives, I just realized npm install installs in the current directory, why doesn't it install globally anymore??
[20:24] mikeal: xSmurf: that's a change in the latest npm
[20:24] mikeal: node is removing global modules
[20:24] mikeal: you need to install modules locally for projects now
[20:24] mikeal: npm does install a "cache" of the module so that it can install it again without pulling it down from the web
[20:24] RusAlex has left the channel
[20:24] xSmurf: bleh!!
[20:25] jarek has joined the channel
[20:25] mikeal: but it won't install globally unless you pass a special flag, but don't do that
[20:25] mikeal: because it's being removed in node
[20:25] mikeal: global modules sucks
[20:25] mikeal: they case far more pain than they solve
[20:25] xSmurf: depends
[20:25] mikeal: cause
[20:25] mikeal: it's a deployment nightmare
[20:25] xSmurf: what's the point of npm when I might as well git submodule add
[20:25] mikeal: everyone is running different versions of different deps
[20:25] xSmurf: yeah but for dev it's nice
[20:25] mikeal: for dev you should use link
[20:25] mikeal: :)
[20:26] mikeal: if you're developing against another module you're also developing, use link
[20:26] mscdex: developers, developers, developers
[20:26] peol has joined the channel
[20:26] mikeal: global modules are one of those things that everyone thinks are a good idea but have so many bad edges that they really aren't
[20:27] olegp- has joined the channel
[20:27] tdmackey_ has joined the channel
[20:27] jjmalina_ has joined the channel
[20:27] EyePulp has joined the channel
[20:27] mikeal: i can't tell you how much time i've spent debugging other peoples problems with what/where some ruby/python module is installed
[20:27] perezd: any whiskey users in here?
[20:27] msucan has joined the channel
[20:27] perezd: (test suite, not drink)
[20:27] [[zzz]] has joined the channel
[20:27] mikeal: user is harsh, i drink it
[20:27] mikeal: :P
[20:28] tobiassjosten has joined the channel
[20:28] micheil: mikeal: so what's this thing ryah's making?
[20:28] mikeal: elastic nodes
[20:28] mikeal: across machines and processes
[20:28] micheil: is it open source yet?
[20:28] mikeal: it's in a branch, mostly
[20:28] micheil: where?
[20:28] mikeal: it'll merge in to 0.5 i'm sure
[20:29] pquerna: the botnet? i didn't think that'd be a core thing
[20:29] mikeal: i argued that it should be
[20:29] micheil: mikeal: if it's not public, I can't tell.
[20:29] pquerna: perezd: yes?
[20:30] mikeal: because it's not like it implements all the top level stuff that people will argue about
[20:30] micheil: pquerna: I currently working on my own similar meshing thing
[20:30] perezd: pquerna: are you an author of whiskey?
[20:30] pquerna: perezd: no, Kami_ is the primary author
[20:30] jjmalina_ has joined the channel
[20:30] perezd: wondering why it doesn't use stderr 
[20:30] perezd: at all
[20:30] pquerna: I've done a few patches, and work at the same place as kmwallio 
[20:30] pquerna: Kami_.
[20:31] pquerna: perezd: you mean show it?
[20:31] pquerna: perezd: there is a --print-stderr option i believe
[20:31] perezd: seriously?
[20:31] perezd: its not documented..
[20:31] pquerna: p.on('print-stderr',..
[20:31] mikeal: micheil/pquerna: are either of you working on paxos?
[20:31] pquerna: yeah
[20:32] pquerna: its there
[20:32] micheil: paxos?
[20:32] mikeal: http://en.wikipedia.org/wiki/Paxos_(computer_science)
[20:32] pquerna: mikeal: in node.. no. Node isn't the place to do something like that.. yet :)
[20:32] sechrist has joined the channel
[20:32] mikeal: i'm thinking it would go well on top of what ryan is building
[20:33] mikeal: tilgovi (randall leeds) is enthusiastic about implementing it
[20:33] micheil: mikeal: it could be built on top of any meshing system
[20:33] perezd: pquerna: that says "no handler" when I add that
[20:33] mikeal: i keep telling him to wait until ryan finishes this thing
[20:33] mscdex: oh jeez, synchronization
[20:33] no-gooder has joined the channel
[20:33] no-gooder: hey guys
[20:33] pquerna: perezd: oh, is it listed in --help ?
[20:33] mikeal: also, doesn't SubStack have a working mesh?
[20:34] no-gooder: anybody tried this on ie : https://github.com/brainfucker/node-comet ??
[20:34] pquerna: perezd: i think Kami_ might of added this in git, but maybe not released it on NPM yet
[20:34] perezd: pquerna: ah
[20:34] no-gooder: it works on firefox or chrome but not ie
[20:34] micheil: mikeal: he has dnode-mesh
[20:34] mikeal: thats it
[20:34] micheil: mikeal: mines' going to focus on the event emitting side of meshing
[20:35] pquerna: perezd: says it was in 0.2.3.. which was released two days ago to npm
[20:35] perezd: oh lol
[20:35] perezd: a day before I installed it
[20:35] perezd: erm after
[20:36] Kami_: perezd: yeah, --print-stderr is in 0.2.3
[20:36] pt_tr has joined the channel
[20:36] perezd: excellent, thanks!
[20:36] tr0ynt has joined the channel
[20:37] Kami_: np
[20:37] Astro has joined the channel
[20:37] micheil: mikeal: Once you have two node processes sharing events, it becomes very powerful
[20:38] micheil: especially for realtime or stream based applications
[20:38] perezd: Kami_: really enjoying whiskey
[20:38] micheil: (not open-respond-close applications)
[20:38] blkcat: whiskey?
[20:38] mscdex: whoa, node has 666 forks
[20:38] Kami_: perezd: glad that you like it. if you have any suggestions / complains / whatever you can also open a ticket on github :)
[20:38] mscdex: :o
[20:39] troynt has joined the channel
[20:39] Kami_: blkcat: yeah, whiskey + ice..
[20:39] pquerna: blkcat: https://github.com/cloudkick/whiskey
[20:39] jjmalina_ has joined the channel
[20:40] perezd: its a pretty sane test runner, its not very frilly, just simple and nice.
[20:40] hackband has joined the channel
[20:41] suckerpunch has joined the channel
[20:42] BingeBoy: where do I find NODE_PATH noob here trying to get my first npm install to take 
[20:42] esundahl has left the channel
[20:42] Casperin1 has joined the channel
[20:44] zomgbie has joined the channel
[20:44] antimatter__: search functionality in http://search.npmjs.org/ is extremely buggy !!
[20:45] jjmalina has joined the channel
[20:45] Casperin1 has left the channel
[20:46] sechrist: micheil: wait what, there's a project going on to share events across multiple node instances?
[20:46] sechrist: sounds kind of OTPish
[20:46] micheil: sechrist: I'm working on something that for a long time I've called cross-node-eventemitters
[20:46] micheil: but now I'm just calling it mesh
[20:46] ohtogo has joined the channel
[20:46] sechrist: neat
[20:47] micheil: currently it's totally experimental + has no idea what security is
[20:47] sh1mmer has joined the channel
[20:47] sechrist: it just event replication or is there roundrobin too?
[20:47] aredridel has joined the channel
[20:48] sechrist: ie: event load balancing
[20:48] micheil: currently it's mirroring right the way through the mesh
[20:48] robhawkes has joined the channel
[20:48] charlenopires has joined the channel
[20:49] micheil: but nothing stops it from load balancing or something like that.
[20:49] BingeBoy: do npm installs need to go into the node folder?
[20:49] micheil: no
[20:49] micheil: the go in the current working directory
[20:49] micheil: *they
[20:49] sechrist: can somebody explain npm bundles to me? From what I'm reading it sounds pretty awesome
[20:49] sechrist: you can bundle up packages and then require them in one go?
[20:49] BingeBoy: ok
[20:49] sechrist: without stepping on other modules?
[20:50] sechrist: sounds ideal for deployment
[20:50] piscisaureus has joined the channel
[20:51] antimatter__: <sechrist> see this ... http://search.npmjs.org/
[20:51] antimatter__: registry for packages
[20:51] zakabird has joined the channel
[20:52] sechrist: that's neat but not my question
[20:52] sechrist: I need to deploy a node application to like 20 servers and I feel like using "npm install" isn't great for that, and managing a .node_modules kind of sucks too
[20:53] sechrist: i'll just play around with it
[20:54] aho has joined the channel
[20:55] modular has joined the channel
[20:56] jjmalina has joined the channel
[20:58] johnciacia has joined the channel
[21:00] jjmalina_ has joined the channel
[21:00] catshirt has joined the channel
[21:01] jjmalina has joined the channel
[21:02] blueadept: how does one pull off the instant search that is there in on search.npmjs.org?
[21:02] cloudhead_: sechrist: what's the problem with `npm install`?
[21:02] blueadept: like searching as you type
[21:02] cloudhead_: blueadept: xhr
[21:02] sechrist: cloudhead_: it's dangerous to rely on externally-maintained projects in a production environment
[21:02] sechrist: especially ones that change often
[21:03] matschaffer has joined the channel
[21:03] cloudhead_: sechrist: that's why you install them locally
[21:03] javaanse_jongens has joined the channel
[21:03] sechrist: a local rpm repository?
[21:03] sechrist: npm*
[21:03] cloudhead_: sechrist: node_modules
[21:03] cloudhead_: you keep all your dependencies bundled in the app root
[21:04] cloudhead_: so you always know what version you're using
[21:04] cloudhead_: and you get a self-contained app
[21:05] javaanse_jongens has joined the channel
[21:07] devtime has joined the channel
[21:08] febits[0] has joined the channel
[21:09] skm has joined the channel
[21:10] amerine has joined the channel
[21:12] jjmalina has joined the channel
[21:14] zomgbie has joined the channel
[21:19] hassox has joined the channel
[21:21] sechrist: cloudhead_: and I don't need to futz around with require.paths?
[21:24] jjmalina_ has joined the channel
[21:28] Roelven has joined the channel
[21:29] cloudhead_: sechrist: nope
[21:29] cloudhead_: sechrist: just specify your dependencies in the package.json
[21:29] cloudhead_: sechrist: then `npm install` in the app root
[21:30] jjmalina has joined the channel
[21:30] cloudhead_: if all goes good, it should bundle the deps in a 'node_modules' folder, which should be in your path already
[21:30] piscisaureus has joined the channel
[21:30] cloudhead_: this is npm 1.0+ though
[21:30] cloudhead_: not sure about older versions
[21:31] cloudhead_: well, it used to work with `npm bundle`
[21:33] ryanfitz has joined the channel
[21:34] mdwright_laptop has joined the channel
[21:34] A_Nub has left the channel
[21:35] mdwright_laptop: if I do something asynchronously in a module, like open a DB, will it wait to return before returning control to the app that loaded it? If not, how can I be sure this has run (and thus the module exports what I expect)
[21:35] mdwright_laptop: ?
[21:36] ryan has joined the channel
[21:37] jjmalina_ has joined the channel
[21:38] cloudhead_: mdwright_laptop: no it won't wait
[21:39] cloudhead_: mdwright_laptop: exports have to be synchronous
[21:39] cloudhead_: mdwright_laptop: if you need async code, do it in a module function which passes the state you want
[21:40] hojberg has joined the channel
[21:40] mdwright_laptop: cloudhead_: alright, thanks
[21:40] cloudhead_: require('mymodule').getready(callback)
[21:40] cloudhead_: something like that
[21:40] mdwright_laptop: Yeah
[21:42] RusAlex has joined the channel
[21:42] CiRlE has joined the channel
[21:44] mbrevoort has joined the channel
[21:47] piscisaureus has joined the channel
[21:48] markwubben has joined the channel
[21:49] jjmalina has joined the channel
[21:50] bkozal has joined the channel
[21:52] kriszyp has joined the channel
[21:54] xandrews has joined the channel
[21:55] kmwallio: hey, I have a question about mongoose, does anyone know if it's possible to do: var Comments = new Schema({ ....., comments : [Comments]});
[21:57] jjmalina has joined the channel
[21:57] piscisaureus: ryah: I think a NAT traversal solution could be a killer feature
[21:58] piscisaureus: ryah: but do you really hate ipv6 that much that you want to kill it?
[21:58] catshirt has joined the channel
[21:58] tmedema has joined the channel
[21:59] Charuru has joined the channel
[21:59] themiddleman has joined the channel
[21:59] piscisaureu_ has joined the channel
[21:59] jetienne: i got nat traversal + dht dns + encryption/authentication type of dns
[21:59] jetienne: with a sweat dns interception with glibc 
[22:00] jetienne: nss stuff
[22:00] jjmalina_ has joined the channel
[22:00] heavysixer has joined the channel
[22:00] jetienne: http://jotnode.org or https://github.com/jeromeetienne/neoip for the source
[22:00] jetienne: im sure nobody believe me but i had to say it :)
[22:01] dragunov11 has joined the channel
[22:02] piscisaureus: at best nat traversal increases the size of the ipv4 addressing space with a factor 65536
[22:02] jetienne: much more
[22:02] piscisaureus: how?
[22:02] jetienne: nat traversal at ip level == making ip connection based
[22:03] jetienne: this imply stuff on the ip address name space
[22:03] piscisaureus: :-/
[22:03] piscisaureus: I do not understand
[22:03] ryan has joined the channel
[22:03] jetienne: it is hard to explain
[22:03] jetienne: in short once the conneciton is established, the addresses only matter on the 2 computers doing the connection
[22:03] piscisaureus: a tcp connection is still defined by the (protocol, ip, port) triple
[22:04] jetienne: normal ip r'outing => ip is unique globally
[22:04] jetienne: here we only need ip is unique locally with the 2 computers
[22:05] piscisaureus: yes but the nat routers still use ip+port to track the connection
[22:05] jjmalina has joined the channel
[22:05] mbrevoort has joined the channel
[22:05] jetienne: yep but if nat is made to work it can scale a lot
[22:05] pHcF has joined the channel
[22:05] jetienne: imagine 10.0.0.0 behind every ipv4 address
[22:06] jetienne: the issue with nat is the impossibility to establish a connection from outside
[22:06] jetienne: once the connection is estblished nobody care 
[22:06] johnnywengluu: i do eventEmitter.emit("error") and get :  throw new Error("Uncaught, unspecified 'error' event.");
[22:07] ryan_ has joined the channel
[22:07] johnnywengluu: what is this about?
[22:07] piscisaureu_: the router still cares
[22:07] jetienne: now suppose you force to estbalish connection based on the dns 
[22:07] johnnywengluu: when i change to emit("failure") it works
[22:07] johnnywengluu: can't EventEmitter emit an error
[22:07] mscdex: johnnywengluu: 'error' is a special event name
[22:07] jetienne: router do ipv4 they never care about nat
[22:07] johnnywengluu: mscdex: so i cant use it?
[22:07] piscisaureu_: hmm bbl
[22:08] jetienne: so if you say "i accept to connect only with dnsname, no more with ip address which has no dns"
[22:08] mscdex: johnnywengluu: you can, but it's generally used for delivering errors in async applications instead of throwing exceptions
[22:08] jetienne: piscisaureu_: i think i should write this down one day :)
[22:08] johnnywengluu: this works
[22:08] johnnywengluu: http://pastie.org/1805146
[22:08] dragunov11 has joined the channel
[22:08] jetienne: piscisaureu_: but jotnote.org stuff is serious :)
[22:08] mscdex: johnnywengluu: yes, as long as you have something listening for the error event, it won't crash
[22:09] piscisaureu_: jetienne: do that, ill prove you wrong :-)
[22:09] jjmalina has joined the channel
[22:09] mscdex: johnnywengluu: although, the 'error' event is generally only emitted with one argument, an Error object
[22:09] pyrony has joined the channel
[22:09] mscdex: doing that will make it consistent with node core and lots of other modules
[22:09] jetienne: https://github.com/jeromeetienne/neoip/blob/master/src/neoip_router/itor/cnx/neoip_router_itor_cnx.cpp#L191 <- piscisaureu_ the address negociation
[22:10] jetienne: piscisaureu_: this is once the ocnnection is establish, the address of each peer is negociated in order to be unique for the 2 peers
[22:11] jetienne: piscisaureu_: if you satisfy this conditions all ip routing for hosts is still ok
[22:11] jjmalina_ has joined the channel
[22:11] johnnywengluu: mscdex: you mean em.emit(new Error()) ?
[22:12] piscisaureu_: jetienne buy still a Nat router will assign an unique port to every connection
[22:12] mscdex: johnnywengluu: yeah, em.emit('error', new Error('uh oh'))
[22:12] johnnywengluu: ok
[22:13] jetienne: piscisaureu_: yep. it will garantee that (src addr/port, dst addr/port) is unique
[22:14] deepu has joined the channel
[22:14] piscisaureu_: so you can't have more than 65535 connections from behind the nat router...
[22:14] jetienne: oh and i have this sweat dns stuff
[22:15] jetienne: still a Nat router will assign an unique port to every connection <- this is not correct. you only need (src addr/port, dst addr/port) is unique 
[22:15] jetienne: this means a single local addr/port can have a lot of other dst addr/port
[22:16] piscisaureu_: rly?
[22:16] jetienne: yep , well in theory. in practice nat devices are crap
[22:16] zum has joined the channel
[22:16] jetienne: but as a network protocol it could be done
[22:17] jetienne: i did a bittorrent implementation, so port opening was a part of the game
[22:17] jetienne: and many nat/firewall box would plain reboot if you do more than 20 cnx
[22:17] eb4890 has joined the channel
[22:17] jetienne: or if you do upnp on 3 ports
[22:18] jetienne: a lot of bugs like that. the issue with nat is poor quality of the devices too
[22:18] Lagnus has joined the channel
[22:19] jetienne: well it is past...
[22:19] jetienne: a bit frustrated by jotnodewebpeer
[22:19] jetienne: so much work wasted
[22:19] jetienne: well 3D is fun :)
[22:19] jjmalina has joined the channel
[22:19] jetienne: going back to it. webgl ftw
[22:19] secoif_ has joined the channel
[22:21] jgv has joined the channel
[22:21] markwubben has joined the channel
[22:24] newy has joined the channel
[22:24] jakehow has joined the channel
[22:25] hassox has joined the channel
[22:27] Spion__ has joined the channel
[22:27] omni5cience has joined the channel
[22:27] newy: hm, perhaps a basic q.  i have a mysql db read, and that works great.  but i need to block the main thread to wait for this execution, otherwise it errors out.  what's the best approach for this?
[22:28] andi5 has joined the channel
[22:29] mscdex: newy: why do you _need_ to block?
[22:30] newy: mscdex: i have an object json-ized to mysql, and need to retrieve to display.  
[22:31] mscdex: what module are you using?
[22:31] mape has joined the channel
[22:31] flippyhead has joined the channel
[22:32] newy: node-mysql
[22:32] killfill: is it possible to use mongoose without defining a model?..
[22:33] newy: theres a callback function provided by node-mysql, problem is im adapting some code that previously used variables in memory only (now i want to load from db), so the relevant flow is in another method.
[22:33] sechrist has joined the channel
[22:33] newy: i feel like i want the ability to simply lock, then unlock from the mysql callback
[22:34] mscdex: newy: i'm not sure i fully understand what you're trying to do. can you gist an example?
[22:35] jtrudeau: hey, i've got a question about the latest npm (1.0.1rc9)
[22:36] jtrudeau: i used to be able to define libraries via the module property in package.json, for example, { ... "modules": { "./lib/lib1" } ... }, and then require them via require("project/lib1")
[22:36] pauls has joined the channel
[22:36] jtrudeau: now i need to use require('project/lib/lib1')
[22:37] jtrudeau: any idea what happened, or if there is a quick fix for this
[22:38] mdwright_laptop has joined the channel
[22:39] mscdex: jtrudeau: i've always used 'main'
[22:39] mscdex: jtrudeau: that's if you have a single module anyway
[22:40] Ond has joined the channel
[22:40] newy: mscdex: cool, here's a rough sketch. hope it makes sense.. https://gist.github.com/924551
[22:41] mdwright_laptop has left the channel
[22:41] mscdex: newy: pass in a callback
[22:41] Opaque: Anyone have a example of good async form post handling? Whether it be a tutorial or some github repo.
[22:41] mscdex: to your find method
[22:42] mscdex: Opaque: https://gist.github.com/44c5dd28ac4d9ab779e6
[22:42] mscdex: Opaque: ^ simple example
[22:42] mape has joined the channel
[22:42] hackband has joined the channel
[22:42] newy: mscdex: cool yeah.  i was hoping to avoid touching the code in A, but ordering things with callbacks seems to be the best/only(?) way.
[22:43] ryan_ has joined the channel
[22:43] mscdex: newy: you can't do what you want without changing the code in A
[22:43] perlmonkey2 has joined the channel
[22:44] mscdex: newy: but yeah, just pass in a callback, and have the first parameter hold an Error (if there was one) and the other parameters being your results
[22:45] mscdex: if there are any
[22:45] mscdex: that's the convention node uses
[22:45] newy: mscdex: thanks!
[22:46] Opaque: mscdex: Ah thanks, but I should have mentioned I was looking for either a complete front-end/back-end example or just front-end. Sorry I know this is #nodejs, I'm just having a hard time figuring out the most correct way of doing it client-side. Server-side, expressjs pretty much does the heavy lifting for me.
[22:46] RusAlex has left the channel
[22:47] criswell has joined the channel
[22:53] piscisaureus has joined the channel
[22:53] mscdex: Opaque: something like this? https://github.com/caolan/forms
[22:54] mscdex: :S
[22:55] mscdex: i mean, the front end part is just a regular plain ol' html form
[22:55] mscdex: nothing to that
[22:56] mscdex: unless you're wanting to do client side validation first or something
[22:57] Opaque: well, some people seem to use <button type='submit'> while some use <input type='submit'>. And I'm not really sure how to bind the event to the button. Some add some javascript to the action param of the form and some don't. So I'm just a little lost in the many methods available.
[22:57] mbrevoort has joined the channel
[22:57] kk has joined the channel
[22:57] kk: haum.
[22:58] Opaque: This is for a "subscribe to this user" type of button, so a regular post wouldn't be very good UX.
[22:58] mscdex: Opaque: imho i'd stick with and input element
[22:58] kk: ㅇ흠.. 
[22:58] mscdex: s/and/an/
[22:59] mscdex: Opaque: so this is a purely ajax thing or?
[22:59] Bwen: with jquery you'd do something like $("[type=submit]").click(function (){});
[22:59] Opaque: mscdex: Yes. I can handle the post request on the server-side. I'm not sure on the client implementation of it.
[23:00] mscdex: yeah, jquery is easiest
[23:00] Aikar: better yet
[23:00] Aikar: the reason people use input type=submit is cause it also triggers on enter key press
[23:00] [[zz]] has joined the channel
[23:00] Aikar: so if your wanting to bind a function to form submission
[23:00] Aikar: then do $('formname').submit(fn);
[23:00] Aikar: then you catch both ways to submit form
[23:00] Bwen: agreed
[23:00] mscdex: Aikar: it  sounds like it's a button only, no actual form fields though
[23:01] Aikar: if its a button only then yeah just use <button> with a click event
[23:01] Aikar: dont bother with input type=submit
[23:01] Aikar: input is for forms
[23:01] Aikar: button only doesnt need a form
[23:01] Aikar: as youd have to click it just to be able to use the enter key anyways
[23:02] Opaque: Do I set anything for the onclick param?
[23:02] Aikar: depends
[23:02] mscdex: we need a form element that responds to the konami code
[23:02] Aikar: you can bind it on an onload event
[23:02] Aikar: or bind it by the html onclick param
[23:02] Aikar: you dont need an onclick param if you use $('#mybutton').click(fn);
[23:03] mscdex: true dat
[23:03] Aikar: but that $('#mybutton') needs to be wrapped with a $(function() { // code here });
[23:03] mscdex: hard coding event handlers inside html markup = </3
[23:03] frls has joined the channel
[23:04] Aikar: the "DOM Tree" is not always "ready" on first page load (theres some exceptions to that but not going to get into that...)  so any DOM manipulation should be done inside of an "on ready" event
[23:04] Aikar: and $(onLoadHandlerFn); is a shortcut to $(document).ready(onLoadHandlerFn);
[23:05] jakehow has joined the channel
[23:05] spectrum has joined the channel
[23:06] Aikar: not to be confused with the traditional scope wrapping of (function() { })(); that DOES run immediately
[23:06] Aikar: so you may opt to use the $(document).ready(onloadfn) just so its distinct vs the closure wrapper
[23:07] frls: Any good job board to look for part time node.js developer?
[23:07] Opaque: ah.
[23:07] tbranyen: Aikar: uh dom is always ready on page load
[23:07] tbranyen: but page load executes milliseconds after dom ready so much people opt for the quicker dom ready event
[23:07] Aikar: no, if you put a <script> in your <head>, you cant do $('blah')
[23:07] tbranyen: thats not page load...
[23:08] tbranyen: onload is page load
[23:09] Aikar: i meant "page load" as in dom ready lol. easier to understand than trying to differentiate page load and dom ready
[23:09] Aikar: frls: theres jobs.nodejs.org
[23:11] kmwallio has joined the channel
[23:11] frls: Aikar: Yea found that but only allows post from USA not Canada
[23:11] frls: Anybody On irc interested in a part time position?
[23:12] amerine has joined the channel
[23:13] tschundeee has joined the channel
[23:14] graysky has joined the channel
[23:14] Me1000 has joined the channel
[23:17] skm has joined the channel
[23:19] zkirill has joined the channel
[23:20] febits has joined the channel
[23:22] perezd: cloudhead: you around?
[23:23] zcopley has joined the channel
[23:24] brandondb has joined the channel
[23:30] tedsuo has joined the channel
[23:31] yhahn has joined the channel
[23:32] ryan_ has joined the channel
[23:32] cloudhead_: perezd: ye
[23:32] perezd: cloudhead_: wanted to bug you about the _changes feed pull request
[23:33] perezd: I am realizing what I've sent you isn't really idiomatic 
[23:33] perezd: but we need to do something
[23:33] cloudhead_: oh yea
[23:33] cloudhead_: I was thinking of just passing the respnse down
[23:33] cloudhead_: and calling a special 'doc' event
[23:33] cloudhead_: for parsed documents
[23:33] cloudhead_: emitting*
[23:33] perezd: oh thats interesting
[23:33] cloudhead_: so 'data' would be the raw data
[23:33] perezd: our biggest issue is needing to really kill the socket 
[23:34] cloudhead_: well you have the response object
[23:34] cloudhead_: you would*
[23:34] perezd: not the right one
[23:34] enos_feedler has joined the channel
[23:34] perezd: take a look at the changeset I sent you
[23:34] perezd: thats the only way we can make it work
[23:34] perezd: then we drill into the socket and destroy it
[23:34] maushu has joined the channel
[23:35] cloudhead_: yea, so if I just pass the actual response object, not a proxy
[23:35] cloudhead_: we should be ok
[23:35] perezd: yeah, that would be fine yes
[23:35] cloudhead_: and I'll just emit('doc'
[23:35] cloudhead_: 'data' will be raw
[23:35] perezd: yeah, I really like that
[23:35] cloudhead_: ok cool
[23:35] perezd: will you be updating your cache?
[23:35] perezd: when doc is emitted?
[23:35] perezd: seems like a nice opportunity 
[23:36] cloudhead_: hmmm that might be a good idea yea
[23:36] cloudhead_: yea yea
[23:36] cloudhead_: cool
[23:36] perezd: since its the freshest
[23:36] cloudhead_: indeed
[23:36] perezd: sick! I love that
[23:36] cloudhead_: cool, will try to get it up soon
[23:36] perezd: appreciate it, your work is awesome
[23:36] cloudhead_: thanks
[23:36] criswell has joined the channel
[23:37] perezd: let me know when its ready and I'll test 
[23:37] perezd: oh btw
[23:37] perezd: emit 'doc'
[23:37] perezd: you should just include_docs: true
[23:37] perezd: and fire that nearly immediately
[23:37] perezd: no need for a roundtrip
[23:37] perezd: faster++
[23:37] v8bot:  perezd has given a beer to faster. faster now has 1 beers.
[23:37] cloudhead_: oh yea for sure
[23:37] perezd: cloudhead_++
[23:37] v8bot:  perezd has given a beer to cloudhead_. cloudhead_ now has 1 beers.
[23:37] cloudhead_: lol
[23:38] cloudhead_: cloudhead++
[23:38] v8bot:  cloudhead_ has given a beer to cloudhead. cloudhead now has 4 beers.
[23:38] cloudhead_: >,>
[23:38] perezd: lol how did u get 4
[23:38] cloudhead_: diff nick
[23:38] perezd: oh haha
[23:38] cloudhead_: this is my alias cause I'm logged in somewhere else
[23:38] uclinux has joined the channel
[23:39] azeroth_ has joined the channel
[23:40] tedsuo: hey, so I've been instinctively running node behind nginx, but I now have a feature that's be easier to implement if I didn't have to do this.  Does anyone know what the edge cases currently are where nginx would still be advisable, if any?
[23:41] tedsuo: for a while it was https and file uploads
[23:41] cloudhead_: tedsuo: it's pretty much still the same
[23:41] cloudhead_: sendfile support and solid https
[23:42] cloudhead_: but node can do https ok now
[23:42] cloudhead_: as long as you stream everything, it seems to work fine
[23:42] cloudhead_: it doesn't like big files
[23:43] johnciacia has joined the channel
[23:43] tedsuo: cloudhead_: https not so much an issue, but I am doing image uploading
[23:43] Aikar: hmm this Joose library looks really nice
[23:43] tedsuo: what's the deal with streaming large files?  memory?
[23:43] cloudhead_: tedsuo: that's fine, if HTTP
[23:44] tbranyen: tedsuo: whats the deal with airplane food
[23:44] cloudhead_: it works fine in HTTP, but HTTPS has some issues
[23:44] Aikar: has anyone made use of Joose? http://joose.it/#!/resources
[23:44] tbranyen: Aikar: nope, but its really interesting imo
[23:44] Aikar: looks to be a rather nice class system
[23:44] cloudhead_: k gotta run
[23:45] tedsuo: cool thanks
[23:45] tbranyen: Aikar: i wanted to use it under the hood for my apis
[23:45] Aikar: well now i got wormhole done, i get to work on my first big library, so ima try to make use of it
[23:45] tbranyen: nice man
[23:48] Aikar: why does npm require a ver # itself O.o why cant i npm install npm@rc with npm 0.3 :(
[23:50] themiddleman has joined the channel
[23:52] Swimming_bird has joined the channel
[23:54] jonpacker has joined the channel
[23:58] devtime has joined the channel
[23:58] EM03 has joined the channel
[23:58] EM03 has joined the channel
