[00:00] Fuu has joined the channel
[00:00] quackslike: so if i want to do somethign like collect a bunch of potential errors that may happen from file IO functions is there a "proper way" to do that.. ?
[00:00] gtramontina has joined the channel
[00:01] Emmanuel` has joined the channel
[00:01] quackslike: maybe i'm not being very clear..
[00:03] Brozilla_ has joined the channel
[00:07] caolanm has joined the channel
[00:07] ohtogo has joined the channel
[00:11] sfoster has joined the channel
[00:11] ekryski has joined the channel
[00:11] isaacs: anyone in here use vmware to run windows?
[00:12] insin: CODE, Y U BEHAVE DIFFERENT ON C9.IO?
[00:12] djc123 has joined the channel
[00:12] djc123: does anyone here have any experice with Cube for nodejs ?
[00:14] AvianFlu has joined the channel
[00:14] quackslike: ah. penny dropped.
[00:15] isaacs: quackslike: i decorate error objects in fstream
[00:16] isaacs: quackslike: the npm alpha that uses it prints those out on failure
[00:16] r04r has joined the channel
[00:17] Bobby_ has joined the channel
[00:17] quackslike: isaacs - thanks, i will have a look at that.
[00:18] tih-ra: Hey all! I finished the beta version of my module (alleup) Flexible way to resize and upload images to Amazon S3 or file system storages for Node.js (https://github.com/tih-ra/alleup). Is Possible to add different versions of the same image in cropped or resized variants. And now if there is willing to CONTRIBUTORS, you are welcome. I plan to add a upload not only image but other types of files with a prior processing on the se
[00:18] tih-ra: rver. 
[00:18] tih-ra: Live test here: http://alleuptest.herokuapp.com/, Also please test! Thanks a lot!
[00:18] isaacs: quackslike: https://github.com/isaacs/fstream/blob/master/lib/abstract.js#L63-82
[00:21] shenlok: hello, i'm looking to simulate logging into a website using node. Will the standard http module be sufficient for simulating a persistant login session?
[00:21] shenlok: the site in question is your standard login-via-form affair
[00:22] maxogden: shenlok: you should check out the request module, it will be a bit easier to do cookie based auth. also formidable module for dealing with form data
[00:23] igl1 has joined the channel
[00:23] shenlok: maxogden: is this the one you mean? https://github.com/mikeal/request
[00:23] kickingvegas has joined the channel
[00:23] sechrist: errbody uses that thing
[00:23] maxogden: shenlok: yes by module i mean npm module e.g. http://search.npmjs.org/#/request
[00:24] shenlok: huh, didn't know about the online npm search. thanks :) i'll look into those two modules
[00:25] quackslike: isaacs: thank you.
[00:25] francisl has joined the channel
[00:30] dannyamey has joined the channel
[00:32] replore_ has joined the channel
[00:32] replore has joined the channel
[00:36] eignerchris has joined the channel
[00:36] danraz has joined the channel
[00:37] danraz: I have an issue with Express middleware I 'd like to pick your brains
[00:37] tjholowaychuk: danraz #express
[00:37] scttnlsn has joined the channel
[00:38] danraz: tjholowaychuk: thanks for the heads up
[00:38] danraz: (I was just watching one of your videos, actually :-) )
[00:38] mattrobenolt has joined the channel
[00:38] tjholowaychuk: moar people to help in there
[00:38] cgray_ has joined the channel
[00:38] danraz: but couldnt find an answer there
[00:38] danraz: ok, joining there
[00:38] danraz: thanks
[00:39] mattrobenolt: Is it possible to grab all local variables at the point of an error for debugging?
[00:39] cgray_ has joined the channel
[00:39] mattrobenolt: Like, at the point of the error, to determine why the error was thrown.
[00:39] jellosea has left the channel
[00:39] mattrobenolt: Similar to stuff that node-inspector does, but somethign to be used on a live production system.
[00:40] ryanfitz has joined the channel
[00:43] oleyb has joined the channel
[00:43] mcluskydodallas has joined the channel
[00:43] FabricPaul has joined the channel
[00:44] FabricPaul: hi guys - blatant self-promotion here, but we just released our Fibonacci benchmark for Fabric + node.js: http://fabric-engine.com/2011/11/benchmark-node-js-fibonacci-server/
[00:44] FabricPaul: just trying to get the word out, as we're starting closed alpha this week. Thx.
[00:44] mattrobenolt: I have code now to traverse and show a pretty stack trace, but the trace is sometimes useless when the error comes from something unexpected. A variable was supposed to be a string, but was somehow an integer. It'd be nice to be able to inspect the variables at that point. Here's an example of my current parsing attempt: https://gist.github.com/b7242d7ff18d29f84b58
[00:46] xerox has joined the channel
[00:46] xerox: is there a way to listen to all the events of an enventemitter
[00:46] stantona has joined the channel
[00:47] visudo has joined the channel
[00:47] xerox: like emitter.on(function(event, args) { â€¦ }), say
[00:48] jtsnow has joined the channel
[00:48] zeade has joined the channel
[00:49] dubenstein has joined the channel
[00:50] dmojoryder has left the channel
[00:50] jtsnow has joined the channel
[00:50] sled has joined the channel
[00:50] sled: hello :)
[00:51] erichynds has joined the channel
[00:53] Lingerance: xerox: Yes, read the docs
[00:53] jakehow has joined the channel
[00:53] xerox: Lingerance: is this new on 0.6 I'm still on 0.4
[00:54] Lingerance: Gah, sorry, that event didn't do what I thought it did
[00:54] sled: has anyone experience with a haproxy + nodejs setup? 
[00:55] sled: I'm having some mysterious trouble :)
[00:55] sled: every time a TCP/HTTP Retransmission occurs, the RX rate drops to zero on the client
[00:55] sled: for 5-10 secs
[00:56] xerox: Lingerance: no worries!
[00:57] Lingerance: Try this: EventEmitter.prototype.emit = (function(emit) { var self = this; return function() { var a = Array.prototype.slice(arguments, 0); emit.apply(self, ['emit'].concat(a)); emit.apply(self, a);  }})(EventEmitter.prototype.emit)
[00:58] Lingerance: That should over-write the emit function and hijack it to make it call the "emit" event on every emit.
[00:59] sdwrage has joined the channel
[00:59] AvianFlu has joined the channel
[01:00] Diaoer has joined the channel
[01:01] neurodrone has joined the channel
[01:01] jsurfer has joined the channel
[01:03] sdwrage has joined the channel
[01:05] EhevuTov has joined the channel
[01:06] shaggydo197 has joined the channel
[01:07] enmand has joined the channel
[01:07] kazupon has joined the channel
[01:08] hackband has joined the channel
[01:09] truedat101 has joined the channel
[01:15] CIA-109: node: 03Ingmar Runge 07v0.6 * r2603832 10/ (src/node_crypto.cc test/simple/test-crypto-ecb.js): 
[01:15] CIA-109: node: node_crypto: use EVP_Cipher*_ex methods, not 'obsolete' versions
[01:15] CIA-109: node: This also fixes an issue that made blowfish's ECB mode unusable. - http://git.io/s1ckkg
[01:15] CIA-109: node: 03Russ Bradberry 07v0.6 * r754e23d 10/ src/node.cc : fixed problem with rss memory reporting incorrect number over 4 gigs - http://git.io/RAeBoQ
[01:16] stantona has joined the channel
[01:17] AvianFlu_ has joined the channel
[01:18] jbraffoul has joined the channel
[01:19] brianseeders has joined the channel
[01:19] neoesque has joined the channel
[01:21] jryans has joined the channel
[01:23] jryans has left the channel
[01:24] ChaoWang has joined the channel
[01:26] abraxas has joined the channel
[01:27] TN has joined the channel
[01:29] shaggydog97 has joined the channel
[01:29] shaggydog97_ has joined the channel
[01:29] jbraffoul has joined the channel
[01:30] jxie has joined the channel
[01:30] dthompso99 has joined the channel
[01:31] boltR has joined the channel
[01:31] CIA-109: node: 03Ben Noordhuis 07master * rbbd976b 10/ (common.gypi deps/uv/uv.gyp node.gyp): 
[01:31] CIA-109: node: build: always compile with large file support
[01:31] CIA-109: node: Fixes a nasty sizeof(struct stat) mismatch bug that caused random crashes and
[01:31] CIA-109: node: silent memory corruption. - http://git.io/YA3ERw
[01:31] davidbanham has joined the channel
[01:33] matin has joined the channel
[01:33] matin: hello
[01:33] matin: is anyone experienced with write streams?
[01:34] TooTallNate: matin: what's your question?
[01:34] matin: TooTallNate I'm trying to make a chat log in node.js
[01:34] matin: it creates a randomized title.txt
[01:34] matin: file
[01:35] matin: TooTallNate: it creates the file
[01:35] TooTallNate has joined the channel
[01:35] TooTallNate: matin: ok
[01:36] matin: TooTallNate: but it doesn't write to the file
[01:36] TooTallNate: gist some code
[01:36] matin: do you mind taking a look at the code?
[01:36] pauls1 has joined the channel
[01:36] matin: ok
[01:36] matin: https://gist.github.com/1f8de8ffafbdfe9b5cb6
[01:37] joshsmith: I'm using Mikeal's request to POST some parameters
[01:37] joshsmith: how should I be passing in the params?
[01:37] joshsmith: as JSON?
[01:37] icewhite has joined the channel
[01:38] dgathright has joined the channel
[01:38] tjholowaychuk: joshsmith it's kinda confusing, i think you have to do json: {} instead of body: {} or something
[01:38] tjholowaychuk: or maybe that was for parsing the json response body
[01:38] tjholowaychuk: json: true or something
[01:38] TooTallNate: matin: so being a log, i'd think you wanna change the `stream` to be append-only
[01:38] TooTallNate: that, or just open/define the stream once at the top of the file
[01:38] TooTallNate: also, you don't have to wait for 'open' to begin writing
[01:39] joshsmith: tjholowaychuk: hmm...that is confusing
[01:39] matin: ok
[01:39] matin: let me try that
[01:39] TooTallNate: the WriteStream will buffer write calls until they're flushed
[01:39] TooTallNate: matin: that said, does the console.log() call below output correctly?
[01:39] k1ttty has joined the channel
[01:39] matin: yeah
[01:40] killfill: hm.. i saw when node 0.6 was release, ppls played with the cluster thungy, to do some of thouse basic benchs with ab, with and without forking the process '#cpu-times'... 
[01:40] joshsmith: tjholowaychuk: maybe it's json:json?
[01:40] killfill: now cannot find thouse example values.. anyone nows where to find thouse?
[01:41] AvianFlu_ has joined the channel
[01:41] joshsmith: I'm trying that and it simply isn't POSTing the data
[01:41] willwh: joshsmith: haha :)
[01:41] willwh: I just knocked out a VERY quick example of that today
[01:41] willwh: real basic
[01:41] willwh: but
[01:41] killfill: somehow, on my osx and freebsd box, cannot make a usefull test.. :S  its like node chokes... (or ab...)
[01:41] willwh: http://github.com/netrowillh/golive_node_example :)
[01:41] themiddleman_itv has joined the channel
[01:42] willwh: for our rest api - but should help you out :)
[01:42] joshkehn has joined the channel
[01:42] joshkehn has left the channel
[01:42] tjholowaychuk: json: true and you have to stringify it?
[01:42] tjholowaychuk: :s
[01:43] joshsmith: willwh: that's sort of what I was doing before
[01:43] joshsmith: should I be using uri:uri instead of url:url?
[01:43] te-brian2 has joined the channel
[01:43] mandric has joined the channel
[01:43] mikeal has joined the channel
[01:44] willwh: tjholowaychuk: maybe don't need to do that
[01:44] willwh: shall test ;]
[01:44] ditesh|cassini has joined the channel
[01:45] jaequery has joined the channel
[01:45] matin: thanks TooTallNate
[01:45] matin: i thought that's what i had done originally
[01:45] TooTallNate: matin: no prob
[01:45] matin: apparently not :P
[01:45] TooTallNate: got it working?
[01:45] matin: yep
[01:45] TooTallNate: coo
[01:45] matin: nowjs is pretty badass haha
[01:46] TooTallNate: meh, i stick with pure socket.io personally
[01:47] matin: meh
[01:47] phiggins has joined the channel
[01:47] matin: i used it to build another chat
[01:47] matin: so far, I'm impressed with now
[01:47] joshsmith: willwh: I'm able to POST (sort of), but the parameters are not going through at all
[01:47] themiddleman has joined the channel
[01:48] willwh: hook.io <3 :)
[01:49] robertj: any sandboxing gurus handy to shoot the breeze re perspective brokering and supervising forks?
[01:50] nixer1102 has joined the channel
[01:51] joshsmith: willwh: any thoughts? I can gist my code and show you what's going on here
[01:51] neoesque has joined the channel
[01:51] jtsnow has joined the channel
[01:52] willwh: sure
[01:52] willwh: just about to cook dinner so may have to get back to you :)
[01:52] jldbasa has joined the channel
[01:53] mattpardee has joined the channel
[01:53] joshsmith: willwh: https://gist.github.com/1407607
[01:54] secoif has joined the channel
[01:54] joshsmith: it's functional and will post a new wall post
[01:55] joshsmith: but without any of the parameters
[01:55] sdwrage has joined the channel
[01:58] killfill: http://pastebin.com/uqkCMy21  <--- i get 2400 req/s in the first bench of http_simple_bench.sh
[01:58] ircdearia has joined the channel
[01:58] joshsmith: ahh I see what's happening
[01:58] killfill: is there a place where ppl share their results?.. :P
[02:02] tjholowaychuk: joshsmith superagent isnt 100% done but you could use that. request.post(url).data(obj).end(callback)
[02:02] tjholowaychuk: defaults objects to json
[02:03] joshsmith: tjholowaychuk: I think I got it figured out
[02:03] joshsmith: it's more complex than I'd like
[02:03] tjholowaychuk: what did you have to do?
[02:03] joshsmith: well, I have to stringify that actions JSON
[02:03] tjholowaychuk: hm
[02:04] joshsmith: let me show you
[02:05] joshsmith: https://gist.github.com/1407607
[02:05] secoif_ has joined the channel
[02:05] joshsmith: lines 99-103
[02:06] joshsmith: it's the only array of objects expected by facebook
[02:06] joshsmith: so it's a little messy, but since it's just the one, I'm okay with that
[02:07] tjholowaychuk: not very nice for a high level api though
[02:07] joshsmith: you mean for my API?
[02:07] tjholowaychuk: no no
[02:07] tjholowaychuk: that's fine, it's all hidden
[02:07] tjholowaychuk: like you say
[02:07] joshsmith: oh, the way they're handling it?
[02:08] joshsmith: it's kinda annoying
[02:08] boltR has joined the channel
[02:09] AvianFlu_ has joined the channel
[02:10] joshsmith: so glad I got this working though
[02:12] AvianFlu has joined the channel
[02:12] joshsmith: yeah, this is turning out to be pretty sweet
[02:12] joshsmith: if you're using mongoose-auth and Facebook heavily, this is a nice way to just use an access_token to do GETs and POSTs to the graph API
[02:13] joshsmith: the other libraries out there require having the FB session, but that's a lot of work if you have an access_token with offline_access and publish_stream perms
[02:13] freewil has joined the channel
[02:13] BillyBreen has joined the channel
[02:14] rails_noob has joined the channel
[02:14] stelcheck has joined the channel
[02:15] joshsmith: tjholowaychuk: look at all the fancy stuff I can do: http://i.imgur.com/vXWFQ.png
[02:16] tjholowaychuk: woot
[02:16] dubenstein has joined the channel
[02:17] benvie has joined the channel
[02:17] jtsnow has joined the channel
[02:18] arpunk has joined the channel
[02:18] perezd_ has joined the channel
[02:18] secoif: so, after using var hash = crypto.createHash, I can only call hash.update for certain methodsâ€¦ eg, md5 works, but md2 does not
[02:18] secoif: anyone know why
[02:19] secoif: I assume it's something to do with the way the specific crypto algorithms work
[02:19] SteveDekorte has joined the channel
[02:20] raincole has joined the channel
[02:20] SteveDekorte: anyone here tried out emscripten with node?
[02:22] boehm has joined the channel
[02:22] dthompso99 has left the channel
[02:24] sdwrage has joined the channel
[02:24] mikeal has joined the channel
[02:25] Carter has joined the channel
[02:25] devongovett has joined the channel
[02:26] stantona has joined the channel
[02:26] avih has joined the channel
[02:26] cgray_ has joined the channel
[02:29] AD7six has joined the channel
[02:29] Me1000 has joined the channel
[02:30] CarterL has joined the channel
[02:30] bnoordhuis: secoif: can you be more specific?
[02:31] gavin_huang has joined the channel
[02:31] perezd has joined the channel
[02:31] chrisvwebdev has joined the channel
[02:31] secoif: bnoordhuis this is to do with that silly file hashing lib i was playing with the other day
[02:31] benvie: it'd be more accurate to ask if X library/functionality created via emscripted is known to work in node
[02:31] secoif: bnoordhuis after each chunk of the file stream, I update the hash 
[02:32] secoif: bnoordhuis but in my tests so far, that only works for md5, sha1, and sha256
[02:32] secoif: otherwise i get an exception when I try update the hash
[02:32] chrisvwebdev has left the channel
[02:32] bnoordhuis: secoif: i'm actually kind of surprised that your openssl supports md2
[02:33] asoltys has joined the channel
[02:34] secoif: bnoordhuis I just noticed it in the openssl help as a digest method
[02:34] secoif: bnoordhuis also, sha256 isnt' in that list, yet it still works, so it's possible the binary on my path isnt' what node is using
[02:35] bnoordhuis: secoif: i suspect it's something like that
[02:35] secoif: ok
[02:36] bnoordhuis: secoif: normally, node prints a warning when you tried to use an unsupported digest method
[02:36] ekryski has joined the channel
[02:37] secoif: bnoordhuis what's another method that isn't md5/sha1/sha256
[02:37] secoif: and where can I look them up
[02:37] bnoordhuis: secoif: md4
[02:37] stantona has joined the channel
[02:38] secoif: k. 
[02:38] secoif: cool md4 worked.
[02:38] SteveDekorte has left the channel
[02:40] miguel has joined the channel
[02:40] ben_alman has joined the channel
[02:40] secoif: bnoordhuis http://nodejs.org/docs/v0.6.3/api/all.html#crypto.createHash I think you're right, the update probably didn't work because of unsupported digest methodâ€¦ don't see any way to catch that before doing an update though
[02:41] Diaoer has joined the channel
[02:42] bnoordhuis: secoif: well, come to think of it - it's kind of odd that crypto prints an error instead of throwing an exception
[02:42] bnoordhuis: if you open an issue, i'll look into it
[02:42] secoif: bnoordhuis will do. thanks
[02:42] a_suenami has joined the channel
[02:42] davidascher has joined the channel
[02:42] bnoordhuis: a fix probably won't land on 0.6 btw, it being an api change
[02:44] v8bot_ has joined the channel
[02:44] adrianmg has joined the channel
[02:45] adrianmg has left the channel
[02:46] JakeyChan has joined the channel
[02:47] Diaoer has joined the channel
[02:48] diogogmt has joined the channel
[02:48] secoif: no problem
[02:48] secoif: perhaps just a mention in the docs
[02:48] secoif: would be sufficient.
[02:49] secoif: bnoordhuis did you get a chance to have a look at that lib? https://github.com/secoif/hash_file recall my hash calculating was rather slow
[02:50] glxc has joined the channel
[02:50] bnoordhuis: secoif: sorry no, haven't had time yet
[02:50] towski has joined the channel
[02:50] secoif: bnoordhuis no worries 
[02:50] secoif: bnoordhuis thanks
[02:51] JakeyChan: hi ? basic question for node.js
[02:51] JakeyChan: why I can not assign variable to exports ? 
[02:51] JakeyChan: I can change it with like that: exports.babala = function () {};
[02:52] JakeyChan: but can not exports = {sdsa: function () {}};
[02:52] tonymilne: module.exports = { foo: function() { } };
[02:52] benvie: try module.exports
[02:52] JakeyChan: but 
[02:52] JakeyChan: why ?
[02:52] benvie: becausw
[02:52] clonn has joined the channel
[02:53] tonymilne: its the correct syntax.
[02:53] tonymilne: for what you're trying to do.
[02:53] clonn: :D
[02:55] justinTNT has joined the channel
[02:55] styol has joined the channel
[02:56] JakeyChan: no body can explain it for me ?
[02:56] JakeyChan: :)
[02:57] descipher has joined the channel
[02:58] stu64 has joined the channel
[02:58] benvie: module.js in node source code
[02:58] benvie: line 37 `function Module(id, parent) {`
[02:58] githogori has joined the channel
[02:58] benvie: line 47 `module.exports = Module;`
[02:58] clonn: ï¼  JakeyChan explain what?
[02:59] josephg has joined the channel
[02:59] benvie: and line 39  `this.exports = {};`
[02:59] stu64 has joined the channel
[02:59] neoesque has joined the channel
[02:59] benvie: this being the module, which isn't the same as the local scope binding
[03:00] descipher has joined the channel
[03:00] harthur has joined the channel
[03:01] joemccann has joined the channel
[03:01] benvie: oh and also `global.exports = self.exports;` on line 416 is only defined in the root module which won't work in the REPL or a submodule
[03:02] JakeyChan: benvie: let me see 
[03:02] JakeyChan: 3 seconds
[03:02] stantona has joined the channel
[03:03] secoif: bnoordhuis issue created. https://github.com/joyent/node/issues/2227
[03:05] indexzero has joined the channel
[03:05] jocafa has joined the channel
[03:05] ryanfitz has joined the channel
[03:06] beseku has joined the channel
[03:07] JakeyChan: benvie: everything is here :D
[03:07] JakeyChan: benvie: I can find out answer !
[03:07] benvie: yeah the node source is very approachable
[03:07] benvie: the libs
[03:08] JakeyChan: benvie: we also can learn code style from libs 
[03:08] JakeyChan: benvie: NICE!
[03:09] benvie: yeah they follow the v8 code standards and run the code through linter/formatter
[03:09] benvie: so it's very clean
[03:11] johnnywengluu: tjholowaychuk: could should.js be used in production too to validate that user input is not empty, is string, is email etc?
[03:11] glxc: hello
[03:11] tjholowaychuk: johnnywengluu i guess you kinda could
[03:11] tjholowaychuk: i wouldn't
[03:11] tjholowaychuk: im sure there are nicer tools for that
[03:11] glxc: is this caused by garbage collection? - http://nd.edu/~rmccune/n10kc100h9.png
[03:11] johnnywengluu: tjholowaychuk: why?
[03:11] tjholowaychuk: it's just not really meant for validation
[03:12] johnnywengluu: tjholowaychuk: i c
[03:12] johnnywengluu: i thought about using this one https://github.com/chriso/node-validator
[03:12] johnnywengluu: but i like should's syntax more
[03:12] johnnywengluu: :/
[03:12] glxc: how could i know if something is caused by garbage collection?
[03:12] glxc: what is garbage collection 
[03:13] johnnywengluu: value.should.be.email // done
[03:13] tjholowaychuk: johnnywengluu https://gist.github.com/1407820
[03:13] tjholowaychuk: i have a half-finished util that looks kinda like that
[03:13] glxc: how often do people realize how lazy they are?
[03:13] johnnywengluu: wow
[03:13] benvie: there's a node module that allows you to set callbacks for when an object is about to be garbage collected
[03:13] tjholowaychuk: the callback is nice because then you can have async stuff
[03:13] benvie: by V8
[03:13] johnnywengluu: tjholowaychuk: when will it be ready?
[03:13] tjholowaychuk: i dunno, i wrote it liek a year ago
[03:13] tjholowaychuk: just never really needed/finished it
[03:13] johnnywengluu: tjholowaychuk: i guess i shouldn't wait for it?
[03:14] tjholowaychuk: nope
[03:14] MatthewS has joined the channel
[03:14] johnnywengluu: tjholowaychuk: btw are you working on client side express?
[03:14] tjholowaychuk: not actively
[03:14] johnnywengluu: okay .. guess you have a lot of works already
[03:14] glxc: benvie + tj thank you
[03:15] rachet has joined the channel
[03:15] benvie: https://github.com/billywhizz/node-gc
[03:15] jocafa has joined the channel
[03:15] benvie: er not that one
[03:15] r04r has joined the channel
[03:16] benvie: https://github.com/TooTallNate/node-weak
[03:16] xeodox: Is it better to render the template using the server? Or using javsacript (like backbone.js) 
[03:17] benvie: initial load is faster if you send as pre-rendered html
[03:18] tjholowaychuk: and you can cache the fuck out of it
[03:18] minerale has joined the channel
[03:18] tjholowaychuk: via varnish <3
[03:18] benvie: yeah that too. Cache chunks or whole pages, bandwidth is cheap
[03:18] xeodox: so it's OK to render through server, and then use backbone.js for rendering little stuff? (combining )
[03:18] benvie: yeah that's ideal
[03:18] chjj: benvie: wasnt always true, back in my day i had to walk to school in the rain with no bandwidth
[03:19] benvie: hah well not so these days. Compared to any other resources
[03:19] xeodox: Is EJS the best template engine for backbone.js ? (Because the syntax is similar to underscore_'s template engine..right?)
[03:19] benvie: and either way, you sacrifice performance if you do it any other way
[03:19] fearphage has joined the channel
[03:19] chjj: bandwidth and webscale are everywhere
[03:19] xeodox: I was thinking about Jade, but then realized that EJS has the same syntax as underscore's template engine
[03:20] tjholowaychuk: xeodox yeah i think it's similar to underscore's
[03:20] tjholowaychuk: which is just john resig's thing
[03:20] benvie: client side performance accounts for the majority of the total rendering time
[03:20] xeodox: tjholowaychuk: if I plan on using backbone.js heavily, then I should probably use EJS instead of Jade, right/
[03:20] tjholowaychuk: whatever you want
[03:20] tjholowaychuk: ejs is sufficient for client-side templates i'd say
[03:21] tjholowaychuk: they're typically relatively small
[03:21] tjholowaychuk: so the noise is ok
[03:21] xeodox: you know what would be awesomeâ€¦if _.template understood <% partial %>
[03:21] tjholowaychuk: haha well it's like 3 lines
[03:21] tjholowaychuk: what do you expect :p
[03:21] xeodox: lol
[03:22] johnnywengluu: tjholowaychuk: are you working on something new currently or maintaing the current ones?
[03:22] issackelly_ has joined the channel
[03:22] tjholowaychuk: for what?
[03:22] pixel13 has joined the channel
[03:22] pixel13 has left the channel
[03:22] johnnywengluu: tjholowaychuk: everything
[03:22] tjholowaychuk: oh
[03:22] tjholowaychuk: haha
[03:22] tjholowaychuk: well im working on our app(s)
[03:22] tjholowaychuk: but i have quite a few new things on the go
[03:22] johnnywengluu: kinda like waiting for Apple products
[03:23] johnnywengluu: I even like new coding frameworks/libs more
[03:23] xeodox: tjholowaychuk: do you mainly work on open source stuff ? do you ever work on anything NOT open source?
[03:23] tjholowaychuk: xeodox yeah lots
[03:23] tjholowaychuk: we have two large apps
[03:23] jimubao has joined the channel
[03:23] johnnywengluu: tjholowaychuk: what kind of apps?
[03:24] chjj: i like how this irc conversation turned into an interview
[03:24] tjholowaychuk: hahahahah
[03:24] johnnywengluu: http://visionmedia.com/ ?
[03:24] noazark has left the channel
[03:24] tjholowaychuk: irc is distracting, i gotta work on the book
[03:24] tjholowaychuk: nope
[03:24] tjholowaychuk: i dont have a site anymore
[03:24] tjholowaychuk: took it down a few years ago
[03:24] johnnywengluu: irc is better than facebook 
[03:25] johnnywengluu: here we talk about creative things .. not boasting with what we ate and who we have been with all day long :P
[03:25] r04r has joined the channel
[03:26] postwait has joined the channel
[03:26] jocafa: lol guize i just had a burrito
[03:26] jocafa: Â¬Â¬
[03:26] benvie: was good?
[03:27] Dulak: Lady Gaga said I'm the best js guy she ever met, right before we hit mcdonald's.
[03:27] Dulak: ...then I woke up.
[03:28] Dulak: That wasn't even funny was it?  More code, less chat.
[03:28] chjj: you dream about mcdonald's?
[03:28] Dulak: Maybe
[03:28] rchavik has joined the channel
[03:28] rchavik has joined the channel
[03:29] torm3nt has joined the channel
[03:30] davidascher has joined the channel
[03:31] stantona has joined the channel
[03:33] _unary has joined the channel
[03:34] confoocious has joined the channel
[03:38] jacobolus has joined the channel
[03:39] efbenson has joined the channel
[03:39] JakeyChan has joined the channel
[03:40] jakehow has joined the channel
[03:40] olegp has joined the channel
[03:41] davidascher has joined the channel
[03:43] swaj: anybody here use joyent's no.de service?  if so, is there any way to update node?  the latest stable version on my machine is 0.4.11, and I'd like to update it to 0.6.3
[03:45] luxigo: lol http://nodejs.org/#download
[03:45] aioue has joined the channel
[03:46] sdwrage has joined the channel
[03:46] swaj: I know I can build it myself, but there are a lot of built-in processes and such
[03:46] tonymilne: http://wiki.joyent.com/display/node/Setting+the+Node.js+Version
[03:46] benvie: no.de is such an awesome domain
[03:46] tonymilne: if you've read everything on that link, ask again and someone from Joyent will probably gladly help you.
[03:48] clonn has joined the channel
[03:48] sdwrage has joined the channel
[03:50] cgray__ has joined the channel
[03:50] swaj: tonymilne: I understand the article, but the issue is, even after doing a "pkgin update", the latest node version seems to be 0.4.11 (or 0.5.3 for unstable stuff)
[03:50] swaj: unless, of course, I build it myself
[03:50] CaesarC has joined the channel
[03:51] tonymilne: swaj ah bummer :( hope you get it sorted soon!
[03:52] ciju has joined the channel
[03:53] suzuken has joined the channel
[03:54] aioue has joined the channel
[03:55] stantona has joined the channel
[03:56] jamescarr_: har har har
[03:56] jamescarr_: As my team navigated these waters, they would occasionally ask things like: "So this one guy says the only way to do this is with a bijective map on a semi-algebra, whatever the hell that is, and this other guy says to use a library which doesn't have docs and didn't exist until last week and that he wrote. The first guy and the second guy seem to hate each other. What's the Scala way of sending an HTTP request to a server?"
[03:57] swaj: I read that, too :P
[03:57] benvie: that could be reformed into a "so these two developers walked into a bar..." joke
[03:57] swaj: the comments on that blog post by stephen seem to prove what he said about the scala community
[03:59] jerrysv_ has joined the channel
[04:02] rioter: link to the article?
[04:03] tonymilne: http://blog.joda.org/2011/11/real-life-scala-feedback-from-yammer.html
[04:04] MatthewS has joined the channel
[04:07] rioter: thanks
[04:08] zackattack: Anyone want to be my person Node.js ttuor?  For pay
[04:10] dgathright has joined the channel
[04:11] rwasielewski has joined the channel
[04:11] matin has joined the channel
[04:11] josephg: Anyone know if there are plans to get typed arrays into node?
[04:14] RobWC has joined the channel
[04:15] jocafa1 has joined the channel
[04:15] tjholowaychuk: josephg pretty sure 0.6.x has them already
[04:17] zackattack: what's a typed array?
[04:17] zackattack: nvm
[04:18] zackattack: https://developer.mozilla.org/en/JavaScript_typed_arrays
[04:18] gavin_huang: tjholowaychuk, mocha is great. I'm wondering if it makes sense that for browsers, instead of using html as the test runner, we set up a server in node? maybe something like "mocha server", then you can run tests directly by access the server from the browser.
[04:18] tjholowaychuk: thanks!
[04:18] tjholowaychuk: I didn't want to couple the browser stuff to node
[04:19] tjholowaychuk: if your client tests do happen to run against a node app you can just boot your app up
[04:19] aioue has joined the channel
[04:19] tjholowaychuk: and use a template / fs.readdir to serve the files etc
[04:19] tjholowaychuk: whatever works
[04:19] madhums has joined the channel
[04:20] brainproxy: gavin_huang: I'm been doing something like that, but with jasmine bdd
[04:20] brainproxy: going to switch to mocha when I have time
[04:20] stantona has joined the channel
[04:20] tjholowaychuk: I went down that road with jspec
[04:20] gavin_huang: it's pure client side, doesn't run against node. i get the idea from buster.js. have you ever checked that??
[04:20] brainproxy: using the zappa lib, I spin up a server that delivers the spec suites and sources to run them against to browsers
[04:20] tjholowaychuk: and it was a long dark opinionated road
[04:21] maxogden: have yall seen http://testling.com/
[04:21] brainproxy: the specs get run in frames, so if an individual spec changes, I can just have the browser reload the frame
[04:21] brainproxy: not all the suites
[04:21] brainproxy: socket.io is used to signal whether sources and/or specs have changed
[04:22] brainproxy: but i will admit, probably like tjholowaychuk experienced, it's a bit of a mixed bag
[04:22] gavin_huang: brainproxy, does jasmine have such server util?
[04:22] brainproxy: gavin_huang: no, i wrote one
[04:22] gavin_huang: brainproxy, is it on github?
[04:22] brainproxy: but it jasmine-node does let you run specs on the server
[04:23] brainproxy: so mine does a combo thing -- runs "isometric" suites/specs on the server and delivers the same ones to the browser
[04:23] brainproxy: and watches the file system, to kick of continous rebuilds and re-testing
[04:23] tjholowaychuk: with jspec i had
[04:23] tjholowaychuk: jspec --browsers safari,ff,chrome etc
[04:24] tjholowaychuk: reporting to the term
[04:24] brainproxy: but .... the whole thing is pretty brittle, i have to admit
[04:24] tjholowaychuk: but yeah.. fuck that
[04:24] brainproxy: https://github.com/michaelsbradleyjr/halfbake
[04:24] brainproxy: it really works :) but it's undocumented, sorry
[04:25] SubStack: I hate net.createConnection().
[04:25] brainproxy: i want to write a next gen version which uses my dataflow library "under the hood" in order to support a much more flexible setup, and drive the builds/tests with a dsl-like config file
[04:26] brainproxy: but I'm actually using "halfbake" to facilitate dev of said dataflow lib, so .... the next gen thing is some ways off :p
[04:26] tomlion has joined the channel
[04:27] brainproxy: gavin_huang: sorry, if you missed the link in the midst of my rambling, https://github.com/michaelsbradleyjr/halfbake
[04:27] silky has joined the channel
[04:28] gavin_huang: brainproxy, i'm looking at it. sweet. :)
[04:28] tjholowaychuk: y u ramble
[04:28] tjholowaychuk: quick show of hands, who hates Manning's cover art?
[04:29] tjholowaychuk: ACTION hand
[04:29] brainproxy: tjholowaychuk: character flaw, don't make fun of me, i'm sensitive
[04:29] danraz: hand
[04:29] joshkehn has joined the channel
[04:30] jstash has joined the channel
[04:31] aioue has joined the channel
[04:31] danraz: the node.js in action cover looks like dr. jekyll
[04:32] danraz: or hyde
[04:32] danraz: which one is the evil one?
[04:32] tiagobutzke has joined the channel
[04:32] tjholowaychuk: ahahahaha
[04:32] tjholowaychuk: yeah it makes me angry
[04:33] tjholowaychuk: i told myself i would write one last book
[04:33] tjholowaychuk: but i really dislike the covers
[04:33] danraz: though, I really like the Manning books, so...
[04:33] josephg: So: performance question for you guys: I'm converting some C code (a physics engine) into javascript
[04:33] brainproxy: tjholowaychuk: you're set in pub'ing through Manning
[04:33] tjholowaychuk: I dont know, I get the whole unified branding thing
[04:33] tjholowaychuk: but at the same time it's brutal branding
[04:34] brainproxy: why manning vs. pragprog vs. oreilly?
[04:34] brainproxy: or some similar publisher
[04:34] ovaillancourt has joined the channel
[04:35] tjholowaychuk: Mike started it with manning I joined in later
[04:35] tjholowaychuk: well not really later but after the proposal
[04:35] tjholowaychuk: oreilly has cool animals though
[04:35] danraz: just ask them to change the cover to this one
[04:35] danraz: http://www.prlog.org/11409306-the-creation-of-adam.jpg
[04:35] tjholowaychuk: ahahaha
[04:36] tjholowaychuk: https://assets0.github.com/img/89d8e6624fb9153c40bd11ae7592a74e058d873e?repo=&url=http%3A%2F%2Fsphotos.ak.fbcdn.net%2Fhphotos-ak-snc3%2Fhs234.snc3%2F22173_446973930292_559060292_10921426_7238463_n.jpg&path=
[04:36] tonymilne: TOBI!
[04:36] danraz: haha
[04:36] danraz: that's the google hat
[04:36] danraz: for noobies
[04:36] tjholowaychuk: tobiii
[04:36] tonymilne: TJ, i always imagine you living in a  house with pets everywhere!!! (base on all your test cases, etc)
[04:37] tjholowaychuk: pretty much
[04:37] josephg: danraz: that hat is much older than googleâ€¦ (and the google version says 'noogler' on the front'
[04:37] josephg: )
[04:37] brainproxy: maybe that should be node's mascot
[04:37] danraz: was there a world before google?
[04:37] luke` has joined the channel
[04:37] danraz: dude, what's up with this art? http://www.manning.com/hepper/
[04:38] tjholowaychuk: http://www.manning.com/huettermann
[04:38] tjholowaychuk: LOVE that gradient
[04:38] tjholowaychuk: amazing
[04:38] danraz: lol
[04:39] tjholowaychuk: i dont even know who our person is
[04:39] tjholowaychuk: "the manning book with that ... guy.. on it..."
[04:39] nerdy has joined the channel
[04:40] danraz: this guy is cool
[04:40] danraz: http://www.manning.com/gutz2/
[04:40] danraz: a real fighter
[04:40] danraz: that's what you want
[04:40] luke`_ has joined the channel
[04:40] trevorsheridan has joined the channel
[04:40] Evanlec: lol...i'm guessing you guys are making fun of this website
[04:40] danraz: a Louis the 14th warrior
[04:41] danraz: nah, I like Manning books, but the art is very much out there
[04:41] Evanlec: it teaches "agile" java development when we all know that java is not very agile
[04:41] kazupon has joined the channel
[04:41] danraz: I like them because they're very much hands on
[04:41] tjholowaychuk: that guy is sweet
[04:41] tjholowaychuk: pink jacket thing and all
[04:42] danraz: metrosexual, anyone?
[04:42] danraz: he seems quite secure about his coding skills, if you ask me
[04:42] tonymilne: he's like, go on, comment on my jacket, i dare you (holding spear and slingshot!)
[04:42] Evanlec: wow, thats a lot of java books
[04:42] rauchg has joined the channel
[04:43] tim_smart has joined the channel
[04:44] avih has joined the channel
[04:44] _dc has joined the channel
[04:44] PyroPete1 has joined the channel
[04:46] torsd has joined the channel
[04:47] k1ttty has joined the channel
[04:52] davidascher has joined the channel
[04:54] nrdb: I have been having trouble with compiling version 0.6.3 for an arm CPU in a DreamPlug ... I modified 'common.gypi' and compiled with 'E="-march=armv5t"; make CFLAGS="$E" CCFLAGS="$E" CXXFLAGS="$E"' ... but I get the error "Build failed:  -> task failed (err #2):"  +  "{task: libv8.a SConstruct -> libv8.a}" .... no matter what I do I cant seem to get past this.
[04:54] jerrysv has joined the channel
[04:55] b_i_d has joined the channel
[04:55] KBM has joined the channel
[04:56] KBM: how do i get HTTP_REFERER, and REMOVE_ADDR
[04:57] b_i_d: Hi. My App open countless write-streams, some sub processes, etc. I guess I have to clean up after myself when I terminate it, correct?
[04:58] b_i_d: Can I listen for process.on('exit') and do all the work there? Or would the process close before the work is done?
[05:03] KBM: HTTP_REFERER? REMOTE_ADDR in node?
[05:07] maxogden: KBM: node has an http module
[05:07] Yuffster_fun has joined the channel
[05:07] michaelh_ has joined the channel
[05:08] b_i_d: KBM: They should be in request.headers when you recieve a request
[05:10] KBM: whats the reasoning behind not having the standard CGI scope in node?
[05:10] KBM: *not bashing, just genuinely curious
[05:11] b_i_d: Don't know anything about CGI, so I can't help you there. ;)
[05:11] nerdfiles has joined the channel
[05:11] nerdfiles has left the channel
[05:12] KBM: anyone else? wheres ryan when you need him. :D
[05:12] SubStack: cgi scope?
[05:12] SubStack: like, environment variables and whatever?
[05:12] davidbanham has joined the channel
[05:12] KBM: si
[05:12] SubStack: turns out, shared state across requests are really nice
[05:12] SubStack: especially in a single thread
[05:13] zilch_ has joined the channel
[05:13] KBM: .. ok, what does that have to do with the CGI scope?
[05:13] catb0t: Exception: SyntaxError: Unexpected identifier
[05:13] SubStack: node is all about using servers as libraries
[05:14] teadict: catb0t: it could be worse! it could be a Chuck Norris Exception!
[05:14] catb0t: Exception , because all est way to Norris
[05:14] SubStack: KBM: instead of HTTP_REFERRER, you can just look at the headers directly
[05:14] SubStack: req.headers.referrer
[05:14] b_i_d: Hum. Still working on my garbage collecting. Do one or multiple listeners on process.on('exit') delay the exit until the callbacks ran or do I miss something?
[05:15] SubStack: and instead of REMOTE_ADDR you can do req.socket.remoteAddress
[05:15] SubStack: KBM: everything is in the same process so it doesn't make sense to pass those values through environment variables
[05:16] KBM: that makes more sense
[05:18] ryanfitz has joined the channel
[05:18] zilch_ has joined the channel
[05:19] KBM: any helper function to parse request.url ?
[05:19] SubStack: require('url').parse(req.url)
[05:21] KBM: while on the subject: function to parse get parameters?
[05:22] towski has joined the channel
[05:22] KBM: *GET
[05:22] sdwrage has joined the channel
[05:22] dr0id has joined the channel
[05:24] SubStack: require('querystring').parse(qs)
[05:26] pauls1_ has joined the channel
[05:26] jellosea has joined the channel
[05:26] zilch_ has joined the channel
[05:26] ekryski has joined the channel
[05:27] b_i_d: Ah, I see. The next tick after the process exit event closes the process. So I have to keep that next tick from happening until I finished my garbage collection. Anyone an idea where others have invented that wheel already?
[05:28] jellosea has left the channel
[05:28] mike5w3c_ has joined the channel
[05:28] kishoreyekkanti has joined the channel
[05:28] JumpMast3r has joined the channel
[05:28] trco has joined the channel
[05:29] CaesarC has joined the channel
[05:29] stonebranch has joined the channel
[05:31] stantona has joined the channel
[05:31] _dc has joined the channel
[05:31] davidascher has joined the channel
[05:33] ekryski_ has joined the channel
[05:34] MUILTFN has joined the channel
[05:36] MUILTFN has joined the channel
[05:36] boltR has joined the channel
[05:36] josephg: b_i_d: how are you terminating the process?
[05:36] zilch_ has joined the channel
[05:37] josephg: if you're terminating it yourself, you could do something simple like:
[05:37] josephg: - make a new event on 'process' (its just an event emitter) called 'shutdown' or something
[05:37] syoyo_ has joined the channel
[05:37] josephg: - have all your modules do their shutdown routines there
[05:37] josephg: -
[05:38] josephg: - You need to detect when they're all finished, then call process.exit().
[05:38] franciscallo has joined the channel
[05:38] mattpardee has left the channel
[05:39] b_i_d: Actually I'm not terminating it at all. ;) It's supposed to run forever I'm just looking for a way to clean up in case of unplanned shutdowns or when I kill it via Ctrl-C during testing.
[05:39] zilch_ has joined the channel
[05:40] doki_pen has joined the channel
[05:41] b_i_d: Hmmmm... You gave me an idea. If I listen for process.on('exit') and do a blocking call to a cleanup-function there, would that hold the exit until the blocking call is done?
[05:41] josephg: yes, though its intentionally quite difficult to make blocking calls.
[05:41] trotter has joined the channel
[05:42] b_i_d: Shouldn't "var temp = cleanup_function();" block?
[05:42] josephg: sure; that'll block until the function returns.
[05:42] josephg: what is your function going to do though?
[05:43] b_i_d: Closing countless write-streams, some sub-processes and more.
[05:43] mikeal has joined the channel
[05:43] josephg: sure - then you can just do all that stuff in the process.on('exit', â€¦) handler
[05:44] josephg: I assumed you needed to do stuff which wasn't synchronous
[05:44] avih has joined the channel
[05:45] tomlion has joined the channel
[05:45] b_i_d: I'm working an an artificial intelligence that uses a whole jungle of other tools (language parser, common sense databases, text to speech and so on). I'd like to shut them down properly when the main process is killed.
[05:46] b_i_d: Not even sure if it's really needed, but just doesn't feel right not to clean up. ;)
[05:47] tih-ra: Hey all! I finished the beta version of my module (alleup) Flexible way to resize and upload images to Amazon S3 or file system storages for Node.js (https://github.com/tih-ra/alleup). Is Possible to add different versions of the same image in cropped or resized variants. And now if there is willing to Contributors, you are welcome. I plan to add a upload not only image but other types of files with a prior processing on the se
[05:47] tih-ra: rver. Also welcome to testing
[05:47] munichlinux has joined the channel
[05:47] b_i_d: Thanks. I'll experiment with that idea later. When it's not 7 in the morning and I had some sleep. ;)
[05:48] ciju has joined the channel
[05:48] zilch_ has joined the channel
[05:48] mikeal has joined the channel
[05:48] josephg: b_i_d: yep I know what you mean about cleaning up
[05:48] josephg: sounds like fun.
[05:49] josephg: tih-ra: nice work.
[05:49] b_i_d: It is. And a hell lot of work. :D
[05:49] ekryski_ has joined the channel
[05:49] b_i_d: But I figured if I learn node I can just as well do it with something interesting. :)
[05:50] josephg: hehe I bet :D
[05:50] tih-ra: josephg: Thanks
[05:51] b_i_d: OK, I told Aimie (my AI) that you helped me with the problem and she said Thanks. :)
[05:51] tih-ra: josephg: You are welcome to fork)
[05:51] b_i_d: Now of to some well deserved sleep. GN8 all
[05:52] josephg: hehe 'night
[05:52] josephg: tih-ra: cheers, though I've got projects of my own
[05:52] jaequery has joined the channel
[05:52] ekryski has joined the channel
[05:52] tih-ra: josephg: ) Live test here http://alleuptest.herokuapp.com/
[05:55] svnlto has joined the channel
[05:55] felixge has joined the channel
[05:55] nerdfiles1 has joined the channel
[05:56] nerdfiles1 has left the channel
[05:56] lyte_ has joined the channel
[05:58] ekryski_ has joined the channel
[05:58] Swimming_Bird has joined the channel
[06:01] rfw has joined the channel
[06:02] cache_za has joined the channel
[06:03] localhost has joined the channel
[06:04] ecin has joined the channel
[06:05] OmidRaha has joined the channel
[06:06] rurufufuss has joined the channel
[06:07] SamuraiJack has joined the channel
[06:12] tonymilne has joined the channel
[06:12] zilch_ has joined the channel
[06:13] tonymilne has left the channel
[06:13] EM03 has joined the channel
[06:13] EM03: hey
[06:13] meso has joined the channel
[06:13] EM03: is node.js ok for server backend code for a website?
[06:13] josephg: yep - thats what it was designed for.
[06:14] EM03: i mean i'm building a service ...and its got alot of the frontend work being done via js 
[06:14] EM03: so the backend part will be more like an pi 
[06:14] EM03: api*
[06:14] Evanlec: EM03: yep
[06:14] dmitrig01 has joined the channel
[06:15] KBM: friendly inquiry: show of hand of coffescript users?
[06:15] Evanlec: I think there's even a node module for creating rest API's
[06:15] EM03: kinda weird ....front end and backend being done via JS 
[06:16] Evanlec: EM03: its neat ;)
[06:16] jsurfer has joined the channel
[06:17] zilch_ has joined the channel
[06:17] EM03: i remember back in the day using wxJS as an apache module for a website
[06:17] EM03: this is like 03 heh
[06:17] EM03: spidermonkey 
[06:18] luke` has joined the channel
[06:18] wilmoore has joined the channel
[06:19] josephg: KBM: *hand*
[06:19] EM03: funny thing is i never learned javascript ....just sorta used it heh
[06:19] KBM: goodie, anyone else?
[06:20] josephg: EM03: I kinda want to write something in GWT, so I'm using java on the frontend and JS on the backend
[06:20] EM03: never used GWT
[06:20] Evanlec: hah, java on the frontend?
[06:20] Evanlec: weird
[06:20] EM03: it becomes javascript 
[06:20] a_meteorite: GWT compiles it to JS
[06:20] Evanlec: oh ok
[06:20] josephg: yep, after about 10 years of cpu time
[06:20] EM03: still though 
[06:20] Evanlec: never did GWT
[06:21] Evanlec: lol
[06:21] EM03: using java to build your frontend can sometimes be :\ 
[06:21] EM03: i'm doing something *pretty* cool right now 
[06:21] a_meteorite: java all-around is :\
[06:21] josephg: yep
[06:21] a_meteorite: ACTION hates java
[06:21] josephg: the JS it generates is awful, too.
[06:22] EM03: does anyone here use coffeescript with node?
[06:22] smgt has joined the channel
[06:22] brainproxy: any node-heads here into clojure also?
[06:22] EM03: i like scheme so maybe me 
[06:22] josephg: EM03: yep, absolutely.
[06:22] a_meteorite: EM03: yes
[06:22] EM03: i'm building a site right now from ground up ...i wonder if i should use js or use coffeescript abstraction 
[06:23] Evanlec: EM03: I feel its better to learn JS in and out before using coffee
[06:23] a_meteorite: I'm very happy with coffee
[06:23] EM03: i mean ... Evanlec it will only take me 30 mins or so to learn js :P 
[06:23] EM03: and i can read and write it now ...just want to make sure i understand it all 
[06:23] Evanlec: EM03: hah well..idk about that
[06:23] EM03: i use jquery every day if that somewhat counts :P 
[06:23] Evanlec: EM03: JS is more complex than it first appears
[06:23] brainproxy: EM03: i like coffeescript, but i agree that it's important to really know how javascript works to make best use of coffee
[06:23] josephg: yeah, there's a lot more to JS than the C-style syntax
[06:23] Evanlec: EM03: nodejs is quite different though
[06:24] josephg: ACTION agrees with brainproxy 
[06:24] boltR has joined the channel
[06:24] maletor has joined the channel
[06:24] EM03: i plan on using node.js with express .....for my api 
[06:24] brainproxy: EM03: take a look at zappa
[06:24] Evanlec: EM03: thats what Im playing with 
[06:24] josephg: Mostly, you need to be familiar with how 'this' binding works in function calls and stuff.
[06:24] brainproxy: which is based on express
[06:24] josephg: coffeescript can't fix that for you, unfortunately.
[06:24] brainproxy: http://zappajs.org/
[06:25] Evanlec: brainproxy: zappa is coffeescript version of express it looks like?
[06:25] EM03: what is gizmo?
[06:25] brainproxy: yeah, w/o a good understanding of javascript's scoping and also prototypal inheritance, it may be difficult to understand what coffee is actually doing for you
[06:26] brainproxy: Evanlec: zappa is almost a "coffeescript-based dsl" wrapped around express
[06:26] EM03: i will just use JS 
[06:26] zilch_ has joined the channel
[06:27] KBM: does express have a tempting engine, orm?
[06:27] EM03: dont think so ...people use their own 
[06:27] Evanlec: KBM: no
[06:28] Evanlec: KBM: Im using jade and mongoose for templating / orm
[06:28] KBM: so, its strictly a router/controller
[06:28] EM03: gizmo for node looks like a different thing compared to what they are using it for on the zappa github
[06:29] EM03: my api won't generate much html at all ....mostly will be done in browser
[06:30] Evanlec: KBM: pretty much yea, it interfaces well with socket.io also
[06:33] jocafa: coffeescript : js :: haml : html
[06:33] jocafa: </opinion>
[06:34] jacobolus has joined the channel
[06:34] Evanlec: jade > haml
[06:34] Evanlec: imo
[06:35] MatthewS has joined the channel
[06:35] EM03: HTML ....
[06:35] EM03: imo ^^
[06:36] EM03: html really isn't all that evil :P 
[06:36] EM03: keep templates lean and clean and it looks pretty good 
[06:36] jocafa: time for sleeping
[06:37] flat has joined the channel
[06:38] EM03: ACTION used to be abstraction king ....hate SQL ...hated html and css ....used everything very early 
[06:38] EM03: now i spend myself trying to get closer to the hardware for a better lack of words 
[06:40] EM03: sometimes when you focus on stuff like that ....you loose on whats really important and that is the user experience 
[06:40] chjj: the only think haml has going for it is that its named after luke skywalker
[06:40] chjj: thing*
[06:40] trevorsheridan has joined the channel
[06:41] EM03: its sorta like the startup mentality ....worry about money later ....
[06:41] EM03: super programmer mentality .....cool tools worry about user experience later 
[06:42] stonebranch has joined the channel
[06:42] zilch_ has joined the channel
[06:42] EM03: A positive user experience results in a human emotion that results in more profit. This allows the business to keep going .....I feel many in the #rubyonrails channel are living in a dream world 
[06:43] truedat101 has joined the channel
[06:44] FMJaggy: well i think there is a balance to maintain, and with every tech there are a small number of reasonable people surrounded by newbies and extremists
[06:44] npa has joined the channel
[06:44] SubStack: node is really good for exploring the solution space of interfaces and abstractions
[06:45] SubStack: because it doesn't provide many abstractions of its own
[06:45] sente: ryanfitz: thank you, installing zlib1g-dev did the truck :)
[06:45] EM03: FMJaggy: I still use cool stuff .....but sometimes people take it to far ....not saying haml or jade is that ....but in rails for instance people are creating engines for everything and its cool but although you didn't write it you have to learn the api of that really well and mesh it around to work with your app.....you probably could have wrote it much quicker 
[06:45] sente: ryanrolds: thank you, installing zlib1g-dev did the truck :)
[06:45] SubStack: and javascript is powerful enough to build good abstractions
[06:45] fangel has joined the channel
[06:45] mikeal has joined the channel
[06:45] SubStack: and also bad abstractions
[06:45] sente: ryanfitz: sorry, meant to say that to ryanrolds 
[06:45] SubStack: but the abstractions can compete on npm
[06:45] EM03: i'm using SQL in this app 
[06:46] EM03: already made all the statements ....around 22 for the whole application .....structured them well
[06:46] EM03: many programmers will do the sql as they write the app ....which is fine but of course you get headaches ....because your querying data ....so then you blame SQL 
[06:47] EM03: now you use an ORM .....well the ORM *makes* you plan your data 
[06:47] EM03: so the real good thing here is planning .....not the abstraction ....the abstraction just forced you to do it 
[06:47] zomg: Not necessarily
[06:47] zomg: ORM can also make you lazy because it's so easy to change things 
[06:47] zomg: =)
[06:47] FMJaggy: well i think it depends on the structure of the company
[06:47] EM03: good simple sql is as well ...i mean if you change anything drastic its going to be a big change no matter sql or no sql 
[06:48] FMJaggy: or maybe, who 'owns' the data, the dbas, the application code, etc...
[06:48] EM03: what i'm saying does have some truth :) 
[06:49] EM03: planning is everything to me ....the programming part is easy 
[06:49] EM03: planning / design is where all my time goes
[06:49] SubStack: I like document databases.
[06:49] SubStack: no ORM necessary
[06:49] EM03: document db's have their issues as well 
[06:49] RobWC has joined the channel
[06:49] EM03: this app will be small ....2-4k users 
[06:50] FMJaggy: oh i agree, problem is that most of the time design is rewarded on the backend, so i feel like i am hiding until then
[06:50] FMJaggy: maybe i am not communicating well enough
[06:50] pizthewiz has joined the channel
[06:51] EM03: i do lots of vector design etc
[06:51] EM03: this allows you to see ideas and vision ......the code to me is extra just to make it come to life ....some people start ideas in their editor ....wrong place
[06:52] EM03: many think if they use something great it will give them a boost somehow 
[06:52] EM03: an idea and its implementation is what makes something great ....not a framework
[06:52] meso has joined the channel
[06:52] EM03: thats why a smaller language and smaller framework is perfect
[06:52] EM03: i will spend 2 weeks doing design ....say 15 pages ....programming for it takes 1-3 days 
[06:53] zomg: Waterfall!
[06:53] zomg: ;)
[06:53] EM03: building it from code first .....5 months 
[06:53] FMJaggy: what do you mean by vector design? like i've dabbled in fireworks/illustrator for designs, do you mean that?
[06:53] SubStack: I write the code first.
[06:53] SubStack: then I figure out what problem I'm trying to solve
[06:54] jsurfer_ has joined the channel
[06:54] EM03: FMJaggy: yep 
[06:55] EM03: I use illustrator for vector design .....photoshop for raster ....fireworks to put my designs together ...
[06:55] isaacs has joined the channel
[06:55] EM03: some people just photoshop the whole thing .....again not using the tools properly :P 
[06:55] FMJaggy: interesting pipeline, have not seen it
[06:55] EM03: its the main one :P 
[06:56] EM03: but to be very honest freenode is not the best place to talk to really professional dev's who do this every day because they are usually to busy to get on irc .....i've had some free time lately 
[06:56] FMJaggy: is it described or documented anywhere
[06:56] EM03: doing a full design in photoshop is nuts ...you want to change something you have to update it in every place you made that style 
[06:56] EM03: in fireworks you can apply it like css ...(design styles) that is 
[06:56] EM03: you have a concept of pages so you can share elements 
[06:57] EM03: fireworks is not a image manipulation program or a vector design .....its exactly what adobe sells it as ...
[06:57] EM03: yea
[06:57] EM03: you know vectortuts and all those guys ? envato really presses this .....adobe at their web dev conferences does htis and thats where all the big firms usually are 
[06:57] EM03: I used to work at some large firms so we have CS at our finger tips no matter
[06:58] ircdearia has joined the channel
[06:59] dannyamey has joined the channel
[07:00] CaesarC has joined the channel
[07:00] dnjaramba has joined the channel
[07:00] EM03: FMJaggy: http://www.reinegger.net/50_reasons_not_to_use_photoshop_for_webdesign.html
[07:06] FMJaggy: from that it sounds like virtually all of the layout should be in fireworks? then you import vector graphics like logos from illustrator, and bitmap graphics (photos, intricate backgrounds) from photoshop?
[07:06] tommyvyo has joined the channel
[07:09] flat has joined the channel
[07:10] brianloveswords has joined the channel
[07:13] crodas has joined the channel
[07:14] galexy has joined the channel
[07:15] EM03: FMJaggy: thats how it should be yep 
[07:15] EM03: FMJaggy: you can have a 100 page site in fireworks all with one file 
[07:15] torm3nt: anyone here use haml.js?
[07:16] EM03: don't you hate getting 50 psd's? most with 50 percent or more common elements?
[07:16] dgathright has joined the channel
[07:16] EM03: fireworks has its own little version of css done graphically for common elements and styles 
[07:16] zilch_ has joined the channel
[07:16] ddollar has joined the channel
[07:16] ralphholzmann has joined the channel
[07:16] EM03: FMJaggy: on a large site with 50 psd's changing theme would take a while ....change the colors in all the places etc etc ...in fireworks it changes them site wide 
[07:17] Pilate has joined the channel
[07:18] stagas has joined the channel
[07:19] nebiros has joined the channel
[07:20] chjj: why do you keep talking about adobe's vomit?
[07:20] walkah has joined the channel
[07:20] walkah has joined the channel
[07:20] kishoreyekkanti_ has joined the channel
[07:21] braoru has joined the channel
[07:23] Heisenmink_ has joined the channel
[07:23] zilch_ has joined the channel
[07:24] loob2 has joined the channel
[07:28] idanbeck has joined the channel
[07:29] zomg: EM03: don't they have something like that in PS now too? Layer comps or something? Never used them so I could be wrong :P
[07:29] mikeal has joined the channel
[07:30] EM03: zomg: adobe treats fireworks like a flagship product and with cs5 they have worked all so hard on it to make the jobs of web developers really easy ....Nothing like it in photoshop ...there is no one size fits all program 
[07:30] EM03: \
[07:30] EM03: although many want to make photoshop one of them 
[07:30] EM03: photoshop is great at what it does, but a talented designer knows how to make all this stuff work as it should with the correct tools 
[07:31] rfw__ has joined the channel
[07:31] zomg: Thankfully we have a graphics guy at work who does all that :D
[07:31] zomg: I just use photoshop to prototype/mock-up designs
[07:31] EM03: I know people who make designs in gimp though and do all coding in emacs ....i mean its all up to you :P 
[07:31] zomg: "Oh this looks good" -> write HTML/CSS, throw away PSD :P
[07:31] EM03: graphics are creation of things as such is really where you get to have a good time with your mind 
[07:32] sled: the guy who writes the cross-browser-even-ie6-compatible css/html loses
[07:32] EM03: its a great way to relax the mind 
[07:32] sled: so coding is the counter part then ;)
[07:32] zomg: Not if you're bad at making graphics :P
[07:33] sled: yeah... rounded corners...gradients....everywhere ;)
[07:33] sled: and don't forget the fancy shadows around the rounded corners
[07:33] EM03: those are not fancy, they are minimal effects with the goal of increasing perspective 
[07:34] mraleph has joined the channel
[07:34] EM03: many people who don't try to do graphics overuse them easily 
[07:34] robotmay has joined the channel
[07:34] sled: but it's pain in the ass to implement it 
[07:34] EM03: which?
[07:34] EM03: a drop shadow?
[07:35] sled: in IE it is ;)
[07:35] zilch_ has joined the channel
[07:36] EM03: i use images for drop shadows
[07:36] Jan_ has joined the channel
[07:36] EM03: css3 drop shadows etc just can't match the quality 
[07:36] sled: we use CSS :)
[07:36] sled: sure... but most of the users don't care ;)
[07:36] tomyan has joined the channel
[07:37] tih-ra has joined the channel
[07:37] EM03: the designer has to care 
[07:38] raydeo has joined the channel
[07:40] groom has joined the channel
[07:40] Renegade001 has joined the channel
[07:41] sled: yep in the end it's the art of finding the balance between design/code/price ;)
[07:43] JakeyChan_ has joined the channel
[07:43] sveisvei has joined the channel
[07:43] mindbender1 has joined the channel
[07:43] pimetrai has joined the channel
[07:44] EM03: sled: art matters more than what most coders will ever imagine ....being good at both is priceless
[07:44] EM03: everyone works for a "firm" but few work for firms that actually make sites by brands that we use every day 
[07:45] ph^ has joined the channel
[07:45] Margle has joined the channel
[07:45] stelcheck has joined the channel
[07:46] tomyan has joined the channel
[07:46] zilch_ has joined the channel
[07:47] bosphorus has joined the channel
[07:48] mrtazz has joined the channel
[07:49] sled: EM03: there's a big difference between designs for sites that sells a product or web applications ;)
[07:50] EM03: sure
[07:50] pizthewiz has joined the channel
[07:51] sled: I wouldn't use CSS3 shadows for a product/brand site but if you got a web application and need some shadow for buttons/ui elements, CSS3 is fine ;)
[07:52] ph^_ has joined the channel
[07:53] hipsters_ has joined the channel
[07:55] garrensmith has joined the channel
[07:57] ph^ has joined the channel
[07:58] dshaw_ has joined the channel
[07:58] garrensmith: morning
[08:00] dannyamey has joined the channel
[08:01] Margle has joined the channel
[08:01] burningdog has joined the channel
[08:01] gut4 has joined the channel
[08:02] EM03: sled: depends truly how much the person cares about that ....me and my shadows and the exact distance opaticy and the way i blur them....the different kinds of blurs i use on them ....oh yea I couldn't do it :) 
[08:02] pixel13 has joined the channel
[08:02] fangel has joined the channel
[08:02] sdwrage has left the channel
[08:02] pixel13 has left the channel
[08:02] rwasielewski has joined the channel
[08:02] mindbender1: what's the stable V8 version for node.js
[08:03] ph^_ has joined the channel
[08:05] benvie: 3.6.6.8 I think
[08:06] benvie: need to get that upgraded
[08:07] `3rdEden has joined the channel
[08:09] emattias has joined the channel
[08:10] thalll has joined the channel
[08:11] simenbrekken has joined the channel
[08:12] idanbeck_ has joined the channel
[08:13] raphdg has joined the channel
[08:14] ablomen has joined the channel
[08:14] zilch_ has joined the channel
[08:15] pcaulagi has joined the channel
[08:16] sindresorhus has joined the channel
[08:20] djcoin has joined the channel
[08:21] zilch_ has joined the channel
[08:21] ivanfi has joined the channel
[08:22] beevits has joined the channel
[08:24] nephics has joined the channel
[08:24] pcaulagi: How can I make sure that the render from Express is called after I am done reading *all* entries from couch?
[08:25] npa has joined the channel
[08:26] djbell has joined the channel
[08:27] pcaulagi: http://pastie.org/2942935
[08:27] bergie has joined the channel
[08:29] djbell has joined the channel
[08:29] chjj: SubStack: that is a beautiful pony
[08:31] svnlto has joined the channel
[08:31] zilch_ has joined the channel
[08:32] zomg: pcaulagi: well you would loop until you get nothing or get the last result, and only render after that?
[08:33] zomg: or if it's asynchronous, multiple at a time, you probably could just keep a record of how many rows you receive, and then when a row loads, you'd just check how many rows you've already fetched
[08:35] jimt has joined the channel
[08:35] brianseeders has joined the channel
[08:35] kuebk has joined the channel
[08:37] pcaulagi: zomg: what is the idiomatic way to do this in node?  I was just looking for a few keywords so that I can search it out
[08:38] k1ttty has joined the channel
[08:38] [AD]Turbo has joined the channel
[08:39] [AD]Turbo: hi there
[08:41] drdetroit has joined the channel
[08:42] idanbeck has joined the channel
[08:42] insin has joined the channel
[08:42] drdetroit: occupy LA is live - police are moving in RIGHT NOW - THOUSANDS of them -in white suits - they are going to act in 7 minutes - it's live- here - http://www.ustream.tv/occupyoakland  tune in - this IS history here - 
[08:42] zomg: pcaulagi: I think there are some flow control libs which help with that
[08:42] maxogden: node.js is the 1%
[08:43] maxogden: get that socialist propaganda out of here
[08:43] pcaulagi: zomg: I looked at async.  But I would like avoid trying to write synchronous code and would prefer a solution using callbacks 
[08:43] zomg: drdetroit: my fist is moving towards your spammy ass RIGHT NOW
[08:43] benlyng has joined the channel
[08:43] benvie: lol
[08:43] zackattack has joined the channel
[08:43] benvie: er using callbacks is asynchronous
[08:44] pcaulagi: s/like avoid/like to avoid/g
[08:44] maxogden: (ive been watching that ustream since 8pm)
[08:44] benvie: oh yeah woops'
[08:44] benvie: misread
[08:44] tdegrunt has joined the channel
[08:45] andree has joined the channel
[08:47] aaronmcadam has joined the channel
[08:47] bradwright has joined the channel
[08:48] jbpros has joined the channel
[08:48] __t has joined the channel
[08:51] Druid_ has joined the channel
[08:52] salva has joined the channel
[08:52] zilch_ has joined the channel
[08:56] smgt has joined the channel
[08:58] vvo has joined the channel
[08:59] adrianF has joined the channel
[09:02] base698 has joined the channel
[09:03] mpavel has joined the channel
[09:04] zilch_ has joined the channel
[09:04] hipsters_ has joined the channel
[09:05] robotmay has joined the channel
[09:06] robhawkes has joined the channel
[09:10] jelveh has joined the channel
[09:10] garrensmith: which is the best nodejs library for redis?
[09:11] mpavel has left the channel
[09:13] stagas has joined the channel
[09:14] nils_r has joined the channel
[09:14] uchuff has joined the channel
[09:14] maletor has joined the channel
[09:15] robi42 has joined the channel
[09:17] mange has joined the channel
[09:19] uchuff has joined the channel
[09:23] Margle has joined the channel
[09:24] ag4ve has joined the channel
[09:27] ciju has joined the channel
[09:29] adambeynon has joined the channel
[09:29] garrensm_ has joined the channel
[09:30] TheJH has joined the channel
[09:31] mikl has joined the channel
[09:32] xeodox: @garrensmith , https://github.com/mranney/node_redis
[09:32] xeodox: that's the best
[09:32] SoulRaven has joined the channel
[09:32] josh-k has joined the channel
[09:33] beseku has joined the channel
[09:34] eldios has joined the channel
[09:34] yumike has joined the channel
[09:34] qFox has joined the channel
[09:35] alpha has joined the channel
[09:36] gmosx has joined the channel
[09:37] vguerra has joined the channel
[09:38] kulor-uk has joined the channel
[09:39] MrBenn has joined the channel
[09:40] Shrink has joined the channel
[09:40] Shrink has joined the channel
[09:41] herbySk has joined the channel
[09:47] nicholasf has joined the channel
[09:48] jimt has joined the channel
[09:49] dannyame_ has joined the channel
[09:49] polymar has joined the channel
[09:54] lzskiss has joined the channel
[09:54] lzskiss: yo
[09:55] jimmysparkle has joined the channel
[09:55] zilch_ has joined the channel
[09:55] tonymilne has joined the channel
[09:55] shedinja has joined the channel
[09:56] cgfuh has joined the channel
[09:56] kishoreyekkanti_ has joined the channel
[09:58] stagas has joined the channel
[09:58] jimmysparkle has joined the channel
[10:00] CodeRarity has joined the channel
[10:01] hackband has joined the channel
[10:03] kishoreyekkanti_ has joined the channel
[10:03] jomoho has joined the channel
[10:03] otakutomo has joined the channel
[10:05] adrianFa has joined the channel
[10:09] DotMH has joined the channel
[10:10] markwubben has joined the channel
[10:10] piscisaureus_ has joined the channel
[10:10] mc_greeny has joined the channel
[10:10] mc_greeny has joined the channel
[10:12] garrensm_: xeodox: thanks
[10:15] Swizec has joined the channel
[10:15] bradleyg has joined the channel
[10:16] jbpros has joined the channel
[10:16] pandark_ has joined the channel
[10:20] aliem has joined the channel
[10:20] p1d has joined the channel
[10:20] OmidRaha has joined the channel
[10:21] spolu has joined the channel
[10:22] spolu: hi guys, anybody could help me with preventing served GET connection from closing after some time (imagine a streaming API with only a small amount of data streamed)
[10:28] stagas has joined the channel
[10:30] fbartho has joined the channel
[10:31] burningdog has joined the channel
[10:32] arcanis has joined the channel
[10:36] augustl: spolu: who closes the connection?
[10:36] spolu: augustl: my server does
[10:37] spolu: augustl: the unerlying connection emits a timeout event
[10:37] augustl: you're sure it's not the browser that closes the connection? Some browsers do after one minute or so
[10:37] spolu: augustl: but I do set: request.connection.setTimeout(0)
[10:37] augustl: there's keep-alive too afaik
[10:37] spolu: augustl: yep I catch the timeout event
[10:37] augustl: browsers have timeout events?
[10:38] spolu: augustl: on the socket?
[10:38] augustl: I'm asking you :)
[10:38] insin_ has joined the channel
[10:39] augustl: I'm just saying that it might be the browser that closes the connection for the GET request
[10:39] augustl: since I don't know anything about your setup I'm just throwing things out there ;)
[10:39] spolu: augustl: I don't think so tested with curl and a custom node client as well
[10:40] spolu: augustl: I'll try to mess with the keepAlive setting of the underlying connection...
[10:42] dal9k has joined the channel
[10:42] dal9k has left the channel
[10:45] jimmyspark has joined the channel
[10:45] jeedey has joined the channel
[10:45] ablomen has joined the channel
[10:46] benlyng has joined the channel
[10:48] stagas has joined the channel
[10:48] robotmay_ has joined the channel
[10:51] markwubben has joined the channel
[10:51] Margle has joined the channel
[10:52] fermion has joined the channel
[10:53] jaequery has joined the channel
[10:55] JanLi has joined the channel
[10:57] boltR has joined the channel
[10:58] TomY has joined the channel
[10:59] level09 has joined the channel
[11:01] nrdb: just built downloaded the node.js with git... when I built it... the "make test" doesn't pass... is this normal?
[11:03] TomY has joined the channel
[11:08] ablomen has joined the channel
[11:08] distrus has joined the channel
[11:09] lyte has joined the channel
[11:10] broofa has joined the channel
[11:10] mansoor-s has joined the channel
[11:14] fly-away has joined the channel
[11:15] lz1 has joined the channel
[11:16] whitman has joined the channel
[11:17] Shrink has joined the channel
[11:17] secoif has joined the channel
[11:18] distrus has left the channel
[11:19] jbpros has joined the channel
[11:20] okuryu has joined the channel
[11:21] eldios: if I have a string like '101010' how do I take a decimal number out o it? I'm having a memory outage right now -_-"
[11:21] augustl: eldios: parseInt can do that
[11:21] augustl: the 2nd argument lets you specify the number base
[11:21] k1ttty has joined the channel
[11:21] eldios: thanks augustl 
[11:21] SubStack: v8: parseInt('101010', 2)
[11:21] v8bot_: SubStack: 
[11:21] SubStack: lies
[11:22] SubStack: .. parseInt('101010', 2)
[11:22] catb0t: 42
[11:22] lz1: OH MY GOD
[11:22] eldios: =)
[11:22] SubStack: likewise you can go the other way with the first argument to toString
[11:23] SubStack: .. 42..toString(2)
[11:23] catb0t: "101010"
[11:23] tomlion has joined the channel
[11:23] eldios: yes thanks SubStack .. already using both of those in my code.. I'm just short-circuiting right now Â°_Â°
[11:24] jbpros_ has joined the channel
[11:25] SubStack: hey everybody, help me make email modules awesome in node: http://groups.google.com/group/nodejs/browse_frm/thread/3899912487057819
[11:28] mike5w3c_ has joined the channel
[11:29] phiggins has joined the channel
[11:31] versicolor has joined the channel
[11:31] jldbasa has joined the channel
[11:32] eldios: is slice the "best" way to take out a part of the string?
[11:32] Skoo has joined the channel
[11:33] fangel has joined the channel
[11:35] igl1: yes
[11:35] eldios: substr is better
[11:35] eldios: as I can see
[11:35] benvie: what defines better?
[11:35] benvie: performance or functionality or what?
[11:36] TomY has joined the channel
[11:36] chjj: youre all wrong, substring is better
[11:36] chjj: substr and slice are implemented using substring behind the scenes
[11:36] chjj: at least in v8
[11:36] chjj: and substr is nonstandard anyway
[11:36] benvie: wrong, looping through using bracket notation for each character you need
[11:36] benvie: kidding
[11:37] benvie: but slice is one letter shorter
[11:37] chjj: true
[11:37] chjj: slice needs a lot of other functionality though cause it takes negative numbers and whatnot
[11:37] benvie: and makes it so I can fantasize that i'm a code ninja cutting my way through disrespectful strings
[11:37] rendar has joined the channel
[11:37] epa_ has joined the channel
[11:38] chjj: although you should use slice if you need the negative number stuff
[11:38] benvie: this is true, I haven't looked at the perf numbers on it
[11:38] robi42 has joined the channel
[11:38] chjj: sometimes its better if you need it
[11:38] zilch_ has joined the channel
[11:38] chjj: but if you dont need that functionality its better to use substring
[11:40] benvie: http://jsperf.com/substring-extraction-methods-substring-substr-slice
[11:40] michaelhartau has joined the channel
[11:41] chjj: https://github.com/v8/v8 <--- better than looking at benchmarks
[11:41] chjj: half of it is in JS
[11:42] chjj: you can see slice and substr both wrap substring
[11:42] benvie: well yeah when you're not looking at the cross browser thing like node only stuff
[11:42] chjj: only thing worth looking at ^
[11:42] chjj: ;)
[11:42] benvie: also you can get an idea how much you actually are losing
[11:42] madhums has joined the channel
[11:43] mikl has joined the channel
[11:43] JakeyChan has joined the channel
[11:44] zilch_ has joined the channel
[11:44] hellp has joined the channel
[11:45] tiagobutzke has joined the channel
[11:46] raoul has joined the channel
[11:46] Guest56267 has left the channel
[11:47] eldios: then substring it will be =)
[11:47] benvie: yeah
[11:47] eldios: anyway.. not to turn off your flame but... with better I was thinking about the fact that the second number is excluded when slice-ing :P
[11:47] eldios: so it should be 2nd_index + 1 which could be misleading
[11:48] chjj: hm?
[11:48] benvie: http://stackoverflow.com/questions/2243824/what-is-the-difference-between-string-slice-and-string-substring-in-javascript
[11:48] eldios: 'fobar'.slice(1,3) --> ob
[11:48] benvie: actually more than I sliced
[11:48] benvie: more differences
[11:49] benvie: most of it to accomodate the negative number usage
[11:49] chjj: substring is the same behavior of slice, slice just takes negative numbers, they both go by index though, substr goes by length for the second parameter
[11:49] Benn2 has joined the channel
[11:49] benvie: well like for example, with substring it'll swap the arguments if the first number is less than the second
[11:49] benvie: a subtle but important difference
[11:49] chjj: yeah, slice is more sophisticated
[11:49] benvie: er other way
[11:49] benvie: second is less than first
[11:49] chjj: does all that stuff
[11:50] chjj: substring is the most primitive, but it doesnt have to waste time looking at the arguments
[11:50] chjj: if thats all you need
[11:50] chjj: they serve different purposes really
[11:50] benvie: they just work the same in most cases
[11:51] benvie: the end result anyway
[11:51] benvie: aside from the difference in performance
[11:52] chjj: its really only for if youre crazy about performance though, im sure theres no where near a noticeable difference
[11:52] benvie: yeah it's like 13million ops per second vs. 15million or some such craziness
[11:52] chjj: you could use slice 100% of the time and it probably wouldnt matter
[11:53] chjj: yeah
[11:53] benvie: becomes a bit ridic once you're into the tens of millions
[11:54] alpha has joined the channel
[11:56] noderjs has joined the channel
[11:57] noderjs has left the channel
[11:58] felixge has joined the channel
[11:58] zilch_ has joined the channel
[11:58] woeye has joined the channel
[12:00] woeye has joined the channel
[12:02] __t has joined the channel
[12:02] munichlinux has joined the channel
[12:02] troika has joined the channel
[12:04] d0k has joined the channel
[12:06] piscisaureus_ has joined the channel
[12:08] kaydara has joined the channel
[12:09] zilch_ has joined the channel
[12:10] braoru has joined the channel
[12:10] kulor-uk has joined the channel
[12:11] dr0id has joined the channel
[12:14] fairwinds has joined the channel
[12:18] __doc__ has joined the channel
[12:18] fangel has joined the channel
[12:20] kulor-uk has joined the channel
[12:22] Kunda has joined the channel
[12:23] kishoreyekkanti_ has joined the channel
[12:23] sindresorhus has joined the channel
[12:25] Shrink has joined the channel
[12:27] tomlion_ has joined the channel
[12:27] davidcoallier has joined the channel
[12:27] davidcoallier has joined the channel
[12:28] N0va` has joined the channel
[12:30] raincole has joined the channel
[12:30] Margle has joined the channel
[12:30] francisl has joined the channel
[12:32] johnnywengluu: Is there a good way to print out the whole object in node.js instead of having to see something like [Object]
[12:33] booyaa: util.inspect?
[12:33] booyaa: i think it tries to jsonify the object
[12:34] johnnywengluu: booyaa: I see as much as with just console.log
[12:34] lz1: json.stringify 
[12:34] lz1: JSON.stringify()
[12:34] `3rdEden has joined the channel
[12:34] raoul: johnnywengluu: change the depth argument to zero
[12:35] raoul: johnnywengluu: http://nodejs.org/docs/latest/api/util.html#util.inspect
[12:35] lz1: does util.inspect work for cyclical objects?
[12:35] booyaa: johnnywengluu: you using %j in console.log? or just console.log(foo)
[12:36] johnnywengluu: raoul: worked great
[12:36] johnnywengluu: thanks all
[12:36] booyaa: right on!
[12:36] kazupon has joined the channel
[12:36] johnnywengluu: lz1: i will try JSON.stringify too later 
[12:36] johnnywengluu: in that way I can save it in a file
[12:36] johnnywengluu: console.log util.inspect data.query.results.application.resources, yes, null // <- superb
[12:37] lz1: nice
[12:37] tih-ra has joined the channel
[12:37] Neil has joined the channel
[12:38] booyaa: is there any benefit to serializing your object before you write to file vs jsonifying it?
[12:38] lz1: jsonifying is serializing
[12:38] JanLi has joined the channel
[12:38] booyaa: ah
[12:38] gtramontina has joined the channel
[12:39] stonebranch has joined the channel
[12:40] shanebo has joined the channel
[12:42] jackhq has joined the channel
[12:42] cjm has joined the channel
[12:44] cjm has joined the channel
[12:45] tolyani4 has joined the channel
[12:45] xy has joined the channel
[12:45] tolyani4: Hi all!
[12:46] ph^ has joined the channel
[12:46] bnoordhuis has joined the channel
[12:47] tolyani4: I want to start using nodejs. I am using windows. What i need to use nodejs?
[12:47] insin: the windows installer
[12:48] insin: http://nodejs.org/#download
[12:48] nebiros has joined the channel
[12:48] thalll has joined the channel
[12:49] tolyani4: Thanks, <insin> , I downloaded node-v0.6.3.msi and installed it.
[12:50] munichpython has joined the channel
[12:51] tolyani4: But how I can use it? If I have to add something my project ?
[12:54] cjm has joined the channel
[12:56] zilch_ has joined the channel
[12:56] shanebo has joined the channel
[12:58] scttnlsn has joined the channel
[12:59] insin: Depends - what do you want to use it for? Write some code and run node yourcode.js for starters :)
[13:00] mavin has joined the channel
[13:00] neurodrone has joined the channel
[13:01] jldbasa has joined the channel
[13:01] Raynos: global === root
[13:02] Raynos: Which do we prefer? Which one is deprecated?
[13:02] jbpros has joined the channel
[13:06] burningdog has joined the channel
[13:06] augustl: Raynos: hmm, root is not documented
[13:06] augustl: where did you find out about it?
[13:07] augustl: tolyani4: what do you mean by "your project"?
[13:07] augustl: tolyani4: are you referring to a specific IDE?
[13:10] postwait has joined the channel
[13:11] Margle: if I wanted to host and execute user generated scripts in node, what would you guys suggest I use
[13:11] sfoster has joined the channel
[13:11] Margle: ?
[13:11] jetienne has joined the channel
[13:11] ceej has joined the channel
[13:11] lz1: javascript
[13:11] Raynos: augustl: benvie mentioned root was the "correct" way to do it
[13:12] Heisenmink_ has joined the channel
[13:12] flat has joined the channel
[13:12] lz1: Margle, why not javascript eval()?
[13:12] Raynos: Margle: ssh into server, git pull, node src/server.js
[13:12] Raynos: Oh wait, my bad.
[13:13] Raynos: Iz1: dont recommend eval Â¬_Â¬
[13:13] Margle: lz1: aren't there security considerations?
[13:13] Raynos: Margle: you need an aggressive sandbox
[13:13] Raynos: putting the repl in a new process is a start
[13:13] Margle: Raynos: ok, do you have a suggestion?
[13:13] lz1: Raynos, heh, you need to clean your code for sure
[13:13] lz1: sanboxing is important
[13:13] Raynos: I'd would then whitelist the globals and give them a "require" that is allowed to do limited things
[13:14] lz1: if you have the cash
[13:14] lz1: you could run heroku dyno's for each script
[13:14] lz1: instant sandboxing
[13:14] lz1: npm built in
[13:14] PyroPeter has joined the channel
[13:14] tolyani4: <insin>  - I want to start form simple code hello-world.js that exist on internet. But I am not uderstand hoe it shold work. Now  I have folder c:/node/  with all inner folders and files. Where I need to put my .js and how I run it? 
[13:14] Raynos: Margle: https://github.com/felixge/node-sandboxed-module
[13:15] Raynos: tolyani4: put your js anywhere you want
[13:15] Raynos: then open the command line, and run node myfile.js
[13:15] raoul: Margle: theres a good discussion of this on the google group: https://groups.google.com/group/nodejs/browse_thread/thread/3fe8148d1ba7d849/0e89b0a45220298d?lnk=gst&q=Execute+User+Provided#0e89b0a45220298d
[13:15] Margle: Raynos: nice
[13:15] tvw has joined the channel
[13:16] Margle: raoul: thanks
[13:16] lz1: raoul, cool
[13:16] Margle: lz1: we don't have enough money :)
[13:16] CIA-109: node: 03Nathan Rajlich 07v0.6 * rb204006 10/ (lib/util.js test/simple/test-util-inspect.js): 
[13:16] CIA-109: node: util: ensure that the .inspect function isn't the one being executed
[13:16] CIA-109: node: Fixes #2225. - http://git.io/eiThZA
[13:16] tolyani4: command line = is it C:\Program Files\nodejs\node.exe  ?
[13:17] augustl: Raynos: since it's not documented I doubt it..
[13:17] Raynos: global isnt "really" documented either
[13:17] augustl: Raynos: I don't know if the docs are out of date
[13:17] JKarsrud has joined the channel
[13:17] augustl: Raynos: it is listed in the documentation
[13:17] augustl: even thought the documentation is sparse ;)
[13:17] felixge: Raynos / Margle: NOOO
[13:18] felixge: my sandbox is meant for unit testing
[13:18] felixge: :)
[13:18] Margle: felixge: picked that up.
[13:18] augustl: Margle, lzl, Raynos: isn't vm pretty good?
[13:18] tomlion has joined the channel
[13:18] felixge: so rather than trying to keep people from breaking out of it
[13:18] felixge: it is meant to inject thing into it
[13:18] felixge: now it's kind of cool for that
[13:18] felixge: but please don't use it to run untrusted code
[13:18] Raynos: augustl: vm blocks. I'll troll your server with `while(true);`
[13:18] orangevinz has joined the channel
[13:18] zilch_ has joined the channel
[13:19] augustl: after a fork, of course ;)
[13:19] Raynos: felixge: can't we abuse it and put it in a new process for user code?
[13:19] kriszyp3 has joined the channel
[13:19] Raynos: it's mainly an example of overwriting require
[13:19] felixge: Raynos: you can do whatever : ). But please note my concerns as indicated above, as well as the no-warranty clause of the license I'm using ;)
[13:20] Raynos: felixge: You seemed to have confused me with someone who will email you with "WHY IT NO WORK. DEM RUSSIANS HACKED MY SERVER. IT UR FAULT"
[13:20] augustl: how secure is vm? Is any work done to keep it secure for odd security issues that might arise?
[13:20] ciju has joined the channel
[13:20] Raynos: augustl: vm has no security as far as I know.
[13:20] augustl: you won't be able to access the file system modules and what not, but still
[13:20] augustl: so there's sandboxing, but I'm sure you can find all sorts of fun edge cases by just making stuff happen in v8...
[13:20] Raynos: By that, I mean we know of ways to break out of vms that havn't been fixed because that's not the "job" of the vm
[13:21] augustl: oh
[13:21] tommyvyo has joined the channel
[13:21] Raynos: augustl: Margle: if you want my real recommendation, dont allow users to write js. Create a DSL that you _know_ is safe
[13:21] stagas has joined the channel
[13:21] augustl: there's gotta be safe ways of running js sandboxed and secure
[13:21] augustl: like, use v8. Or Rhino
[13:22] zilch_ has joined the channel
[13:22] augustl: obviously there are ways... Realy meant safe _and_ easy (ish) ways
[13:22] christophsturm has joined the channel
[13:22] augustl: but perhaps the question was wether you could run arbitrary js in node?
[13:23] augustl: Raynos: got more info on breaking out of the vm?
[13:23] Margle: **nods**
[13:23] christophsturm: if i kill a cluster worker, will it finish all current requests before exiting?
[13:23] kishoreyekkanti_ has joined the channel
[13:23] Raynos: augstl: read the mailing list node issues, its there somewhere
[13:23] Margle: what of this: http://gf3.github.com/sandbox/
[13:24] Raynos: Margle: doesnt look like it does much
[13:25] Margle: Raynos: seems the consensus, if I wanted to use JS, is to break out to v8 or rhino
[13:25] augustl: Margle: interesting
[13:25] augustl: Raynos: doesn't use the vm module though
[13:25] MUILTFN has joined the channel
[13:25] scott_gonzalez has joined the channel
[13:26] Raynos: Margle: my personal consensus is dont try running user generated js. Thats like running user generated PHP on PHP.
[13:26] Raynos: Unless your smarter then the hackers that will attack your server :)
[13:26] Raynos: Personally I don't think im smarter then the hackers
[13:26] Margle: Raynos: true that.
[13:26] Margle: me neither.
[13:26] Raynos: Now if someone has written a rock solid module to do this, then use it.
[13:26] augustl: perhaps gf3 is smarter than the hackers though :)
[13:26] Raynos: But I dont know of that module
[13:27] augustl: I wonder what process.binding('evals').Script is
[13:28] augustl: it's what gf3's module use to run scripts
[13:28] erichynds has joined the channel
[13:28] Wizek has joined the channel
[13:28] Raynos: its the layer underneath vm
[13:28] Raynos: I would avoid process.binding because its kind of "woh undocumented node internals" best not touch those
[13:28] CIA-109: node: 03Ben Noordhuis 07master * rf44d0b9 10/ (src/node_crypto.cc test/simple/test-crypto.js): 
[13:28] CIA-109: node: crypto: throw exception on unknown digest method
[13:28] CIA-109: node: Fixes #2227. - http://git.io/nGSTvA
[13:28] Margle: ACTION would like gf3 to run us through the code :)
[13:28] Raynos: Margle: also good look running that 0.3.0pre code on 0.6 :D
[13:28] Raynos: I doubt it will just "work"
[13:29] eldios: guys, what if I have to variable which would store two values returned from a function.. what's the best way to accomplish this? returning an object or an array with those two values inside and then assigne those values to the two external variables?
[13:29] augustl: I think it's more interesting to ask node maintainers wether work is done to make/keep process.binding('evals').Script secure
[13:29] zilch_ has joined the channel
[13:29] Heisenmink has joined the channel
[13:30] swaj: eldios: how about returning an object?
[13:30] ciju has joined the channel
[13:30] eldios: yes as I said.. but let me make a quick example
[13:30] swaj: eldios: return { thing1: value1, thing2: value2 };
[13:30] eldios: ok.. then externally I have to do
[13:31] vkareh has joined the channel
[13:31] eldios: var1 = obj{thing1} , var2 = obj{thing2}
[13:31] Raynos: GLOBAL === global
[13:31] eldios: right?
[13:31] Raynos: >_< We have GLOBAL, global and root. Can we have some documentation on how they are different
[13:31] swaj: no, you'd access them as "obj.thing1" and "obj.thing2"
[13:31] Margle: augustl, Raynos http://supercollider.dk/2010/05/node-js-evaluating-code-in-a-private-context-272
[13:32] swaj: you could also provide a callback
[13:32] Raynos: eldios: it depends what you want. I would call an array of [val, otherVal] a tuple
[13:32] Raynos: if youw ant to return an object with properties or a tuple
[13:32] eldios: mm.. here is kinda what I did
[13:32] swaj: function myMethodThatReturns2Things(callback) { // do stuff; return cb(thing1, thing2); }
[13:32] Raynos: Margle: I dont trust articles over a year old. node has changed too much
[13:32] benvie: an interesting leak when using the REPL in non-global context is you can do tab completion on `root.Object.` but it'll return undefined if you try to access it
[13:32] Margle: Raynos: good point.
[13:32] eldios: a,b = function () { return b,c }
[13:33] swaj: then call it like this: myMethodThatReturns2Things(function(thing1, thing2) { // do stuff with things });
[13:33] fumanchu182 has joined the channel
[13:33] eldios: that (obv) didn't work out
[13:33] lukegalea_ has joined the channel
[13:34] kiilo has joined the channel
[13:34] swaj: in that case, a would be the function reference
[13:34] Raynos: benvie: if you could point me at something that explains the differences between root, global and GLOBAL that would be great. We might want to get it into docs
[13:34] lukegalea__ has joined the channel
[13:35] jtrudeau has joined the channel
[13:35] benvie: sec I think I know where the difference is highlighted in the libs
[13:35] lzskiss has joined the channel
[13:35] lzskiss: yo
[13:36] CIA-109: libuv: 03Bruce Mitchener 07v0.6 * rd513d9b 10/ (22 files in 4 dirs): Fix typos. - http://git.io/ovyzFA
[13:36] benvie: O so the main difference is based on whether you're the root/main module. In this case you're exposed to the real stuff
[13:37] benvie: in that case you're running in runInNewContext
[13:37] benvie: er in submodules
[13:37] Cromulent has joined the channel
[13:38] benvie: sandbox.global = sandbox;
[13:38] benvie: sandbox.root = root;
[13:38] Vennril has joined the channel
[13:38] jpdery has joined the channel
[13:39] enmand has joined the channel
[13:39] lz has joined the channel
[13:39] Raynos: submodules are not in new context by default, right?
[13:39] benvie: I don't think so no
[13:39] Raynos: I think there is a env flag for that though
[13:39] zilch_ has joined the channel
[13:39] benvie: this usually comes up in the REPL or using vm
[13:40] benvie: yeah it is
[13:40] benvie: and I don't know that the flag is used much
[13:40] benvie: but the REPL is a common case and it throws you through a loop since it's acting differently than you expect
[13:42] zilch_ has joined the channel
[13:42] Raynos: fair enough. I dont realy tend to use the vm / repl that much so I havnt been exposed to it
[13:42] Raynos: so root should be favoured because global is sandbox in a vm
[13:42] fermion has joined the channel
[13:43] swaj: eldios: http://jsfiddle.net/9TWcZ/1/
[13:45] cosmincx has joined the channel
[13:45] benvie: well the issue is
[13:46] martin_sunset has joined the channel
[13:46] benvie: if you're running sandboxed then trying to modify things on root probably won't do what you want it to do and global will work..better
[13:46] benvie: but still not really do what you want
[13:46] benvie: so basically you're fucked
[13:47] benvie: this will go away when isolates is in
[13:47] Raynos: so stick to global? :P
[13:47] marcello3d has joined the channel
[13:47] eldios: swaj, thanks
[13:48] swaj: eldios: no problemo :)
[13:48] benvie: yeah probably
[13:48] Margle: benvie: isolates?
[13:48] benvie: should just be accompanied by a disclaimer
[13:48] Margle: benvie: I see on the roadmap
[13:48] benvie: "global will refer to the sandbox object if you're running in a vm"
[13:48] benvie: "and that sandbox might be a completely empty object"
[13:49] CIA-109: libuv: 03Bruce Mitchener 07v0.6 * rb684deb 10/ include/uv.h : Note that uv_is_active works on timers. - http://git.io/SJJZZg
[13:49] benvie: isolates allows running multiple event loops in a single process
[13:50] bnoordhuis: ACTION is working on that
[13:50] benvie: isolates are isolated v8 contexts. Each has its own thread
[13:50] benvie: and the ways they can interact are limited or non-existent depending
[13:50] benvie: but better than what's currently there
[13:50] mange has joined the channel
[13:51] benvie: they just have to do a ton of work to make libuv handle multiple event loops in the same process
[13:51] benvie: and then all the node bindings
[13:51] Shrink has joined the channel
[13:51] subbyyy has joined the channel
[13:51] rudolfrck has joined the channel
[13:52] SubStack: anybody want to proof-read? http://substack.net/posts/b96642
[13:52] benvie: since isolates have only been in v8 for like 9 months and node was obviously initially built with a single loop in mind
[13:53] benvie: but it'll be awesome because they'll allow the benefits of being in the same process like more direct ways to share data between separate contexts 
[13:53] xetorthio has joined the channel
[13:54] chjj: substack's robot friends are on his website
[13:55] benvie: and creating vm sandbox contexts won't be a giant terrible kludge like it is now
[13:56] arturadib has joined the channel
[13:56] SubStack: chjj: upboat if you like it! http://news.ycombinator.com/newest
[13:56] joshsmith has joined the channel
[13:56] marcello3d has joined the channel
[13:57] aioue has joined the channel
[13:57] lyte_ has joined the channel
[13:57] secoif: SubStack just fmi, how long does it take you to write a post of that size
[13:57] SubStack: 2 hours?
[13:57] magnetik has joined the channel
[13:58] aioue has joined the channel
[13:58] Margle:  SubStack nice.
[13:58] secoif: SubStack k cool
[13:58] Margle: SubStack: upboated.
[13:58] SubStack: hooray
[13:58] benvie: many boats to you
[13:59] benvie: this is a really good explanation of that key piece of fairy dust that node has
[14:00] Sadjow has joined the channel
[14:00] shanebo has joined the channel
[14:00] phzbox has joined the channel
[14:00] garrensmith: SubStack: not picking up your post, chrome says could not find substack.net
[14:01] AaronMT has joined the channel
[14:01] Margle: garrensmith: http://news.ycombinator.com/item?id=3295007
[14:01] garrensmith: Margle: Oops! Google Chrome could not find substack.net
[14:02] SubStack: strange!
[14:02] Margle: garrensmith: whatever. we all know you use firefox. :P
[14:02] garrensmith: lol, firefox is cool. To lazy to explain what I'm seeing just easier to copy paste
[14:02] ditesh|cassini has joined the channel
[14:03] benvie: gotten a lot better since 8 and somewhat less terrible memory management
[14:04] garrensmith: for sure, but my macbook fan still turns on everytime I load up firefox
[14:04] ovaillancourt has joined the channel
[14:04] vnguyen has joined the channel
[14:05] davidsklar has joined the channel
[14:06] swaj: I do all my dev on chrome.  Firefox has gotten too big, buggy, and slow for me
[14:07] swaj: I just load firefox for compat tests
[14:08] benvie: debugging in Chromium finally got better than firebug so that was the end of my major Firefox use
[14:08] garrensmith: swaj: same here. I also use downloadThemAll on firefox great download manager
[14:08] swaj: yeah the dev tools in chrome are really nice
[14:08] swaj: actually like them better than firebug
[14:08] benvie: yeah they sucked for a long time but they kept iterating and now they're great
[14:09] Margle: **nods**
[14:10] michaelhartau has joined the channel
[14:11] ShinyDarkness has joined the channel
[14:11] bradleyg has joined the channel
[14:11] jscheel has joined the channel
[14:11] jscheel has joined the channel
[14:12] fmeyer has joined the channel
[14:12] brianseeders has joined the channel
[14:12] fuzzled has joined the channel
[14:14] Margle has joined the channel
[14:15] Poetro has joined the channel
[14:15] Poetro has joined the channel
[14:15] gmosx has left the channel
[14:15] lyte has joined the channel
[14:16] ohtogo has joined the channel
[14:17] devdazed has joined the channel
[14:18] johnhamelink has joined the channel
[14:18] devdazed has left the channel
[14:18] lduros has joined the channel
[14:21] distrus has joined the channel
[14:21] Wizek has joined the channel
[14:21] robi42 has joined the channel
[14:21] bnoordhuis: html gurus, does this make sense? https://github.com/joyent/node/pull/2231/files#r260880
[14:22] stantona has joined the channel
[14:22] xlotlu has joined the channel
[14:22] Venom_X has joined the channel
[14:23] gut4 has joined the channel
[14:24] chjj: bnoordhuis: the html? it looks fine, just got rid of the useless @type
[14:25] DotMH has left the channel
[14:25] augustl: bnoordhuis: what's the doctype?
[14:25] chjj: bnoordhuis: i recommend it
[14:25] bnoordhuis: augustl: i think the doctype is ""
[14:25] bnoordhuis: chjj: thanks, i'll merge it
[14:25] lazyshot has joined the channel
[14:26] chjj: augustl: it doesnt matter what the doctype is, browsers dont use validating parsers even if one doctype disagreed with it
[14:26] bnoordhuis: it's <!DOCTYPE html> btw
[14:26] chjj: good
[14:26] bnoordhuis: html5, we're so hip!
[14:26] augustl: chjj: html4 and html5 might have differences no?
[14:26] chjj: thats what it should be :)
[14:26] glxc: Hello, I am on ubuntu and want to increase the max size of my open files
[14:27] glxc: i edited /etc/security/limits.conf correctly
[14:27] augustl: glxc: #ubuntu?
[14:27] albertosh has joined the channel
[14:27] glxc: kk
[14:27] bnoordhuis: glxc: you need to log in again
[14:27] glxc has left the channel
[14:27] bnoordhuis: aww
[14:28] albertosh: hi guys, can anyone guide me on how to update from 0.4.9 to the latest stable version? i believe its 0.6.3?
[14:28] chjj: augustl: html4 does require it, but it doesnt matter
[14:28] chjj: augustl: browsers dont use validating parsers
[14:28] augustl: parsing is not my worry though
[14:28] chjj: augustl: every browser would understand it, and its the way it should be anyway, trying to write html according to 4.01 doesnt make sense
[14:28] Wizek has joined the channel
[14:28] augustl: more that if the script tag will be evaulated as javascript without the attribute telling the browser that this contains javascript
[14:29] chjj: it will be evaluated as js
[14:29] chjj: so i dont see the problem
[14:29] augustl: I don't think "every browser would understand it" is a good argument, the spec should be followed regardless
[14:29] chjj: it is javascript, and it will be executed as javascript
[14:29] augustl: chjj: that's what I was trying to figure out :)
[14:29] chjj: augustl: html4.01 is obsolete
[14:30] augustl: chjj: that's what I thought was probably the case in many browsers. But I wanted to make sure it was the case.
[14:30] augustl: (that it was evaluated as javascript)
[14:30] augustl: if you enter a type that _isn't_ text/javascript though, it won't be evaluated as javascript
[14:30] chjj: its the case in every browser
[14:30] augustl: so I'd rather not guess
[14:30] chjj: even in html4, the @type attribute was *only* there as fallback
[14:30] zilch_ has joined the channel
[14:30] chjj: in case the server did not send a valid content type
[14:30] chjj: it was useless even then
[14:31] augustl: the HTML in question had an inline script, though
[14:31] chjj: that was acknowledged with html5, so its not required anymore
[14:31] augustl: so the browser certainly can't use the content type of the file in that case
[14:31] augustl: chjj: I see
[14:31] topaxi has joined the channel
[14:31] chjj: javascript is the default for inline scripts
[14:31] CarterL has joined the channel
[14:32] thomblake has joined the channel
[14:32] thomblake has left the channel
[14:33] [Justice] has joined the channel
[14:33] chjj: augustl: i also want to say, using any doctype aside from the empty doctype right now, is just ludacris
[14:33] devongovett has joined the channel
[14:33] augustl: ok?
[14:33] [Justice]: yo all - boss and I are just getting into node, working on 2nd app with it (love express), but wanted to share our 1st forey into making a node package: http://blog.alagad.com/2011/11/29/coolbeans-an-ioc-container-for-node-js/
[14:33] [Justice]: and would love any feedback on it
[14:34] zilch_ has joined the channel
[14:35] tdegrunt has joined the channel
[14:35] tomlion has joined the channel
[14:35] albertosh: should i uninstall node 0.4.9 before installing the new one using the package provided in the site? 
[14:35] chjj: augustl: i mean to say that you phrased your question wrong when you asked what doctype the page was
[14:35] chjj: augustl: it should have been "what doctype is it? change it if its not according to html5"
[14:35] augustl: albertosh: I typically rm -rf ~/local/node before installing a newer version
[14:36] albertosh: thanks augustl, so that will completely remove node?
[14:36] albertosh: what about npm augustl?
[14:36] augustl: albertosh: if that's where you instaled node :)
[14:36] ablomen: [Justice], "CoolBeans is loosely based on ColdSpring for ColdFusion and Spring IOC for Java" << you might want to tell what it actually is, since some people (me included) never (really) touched cf or java
[14:36] augustl: albertosh: ya I also completely remove npm
[14:37] albertosh: and how do you remove npm?
[14:37] chjj: augustl: anyway, sorry, im really antidoctype =/
[14:37] augustl: chjj: np, I'd love some actual arguments though :)
[14:38] augustl: albertosh: the installer puts itself in ~/local/node, there's also ~/.npm
[14:38] albertosh: perfect!
[14:38] albertosh: thanks
[14:38] augustl: albertosh: or I should say, the npm installer puts npm along with node, wherever you installed node to
[14:38] chjj: augustl: on what? why doctypes are a terrible archaic feature that should have been dropped 10 years ago?
[14:38] storrgie_ has joined the channel
[14:38] albertosh: you where right augustl, thanks so much
[14:38] Wizek has joined the channel
[14:38] augustl: chjj: yes
[14:39] chjj: augustl: okay, to start off, versioning is meaningless in a language like html, when no browser is validating, and when no browser actually implements different "versions" of html
[14:39] [Justice]: ablomen - kk, will do.  Sorry, that blog site's primary audience, till now, has been coldfusion folks =)
[14:40] jaigouk has joined the channel
[14:40] chjj: augustl: in a language that has to maintain strict backward compatibility, its really pointless to implement different versions at the same time
[14:40] jtsnow has joined the channel
[14:40] chjj: if that were the case, what was the point of maintaining backward compatibility for?
[14:40] chjj: so it isnt the case, no browser does it
[14:40] chjj: it doesnt mean anything
[14:41] chjj: which is why html5 dropped the doctype, doesnt have its own dtd, etc
[14:41] augustl: [Justice]: yep, some justification on why you need a wrapper for require and module.exports (which is what your project does?) would help
[14:41] zheneva has joined the channel
[14:41] [Justice]: well, its not just wrapping those, its more of a dependancy injection framework for anything
[14:41] augustl: chjj: it depends on your point of view, I suppose. I like to follow the specs 100%, and only deviate if that causes behaviour in commonly used browsers
[14:41] CIA-109: node: 03Mathias Bynens 07v0.6 * rcf89bee 10/ lib/punycode.js : punycode: Update to v0.2.1 - http://git.io/mwP4HA
[14:41] CIA-109: node: 03Mathias Bynens 07v0.6 * r456dafc 10/ doc/template.html : (log message trimmed)
[14:41] CIA-109: node: Docs template: HTML cleanup
[14:41] CIA-109: node: Remove references to `/favicon.ico` as itâ€™s the default in all browsers. More
[14:41] CIA-109: node: info: http://mathiasbynens.be/notes/rel-shortcut-icon
[14:41] CIA-109: node: `type=text/css` and `media=all` are the implied defaults for `<link
[14:41] CIA-109: node: rel=stylesheet>` (and `<style>`), so omit these attributes.
[14:41] CIA-109: node: Similarly, `type=text/javascript` is the default for `<script>` elements, so
[14:42] chjj: augustl: i like to follow the specs as well. where did you get the idea i didnt?
[14:42] augustl: [Justice]: what ablomen said, then, I've no idea why dependency injection is useful
[14:42] zheneva: Hello. Had a question regarding connect.logger. Can i somehow write logger output in the file?
[14:42] augustl: haven't programmed java ;)
[14:42] [Justice]: you setup the json representing your objects, then instead of going through the steps to construct an object, just ask coolbeans for your object, and it constructs it
[14:42] augustl: chjj: you talk a lot about what browsers actually do
[14:42] bnoordhuis: java! wave of the future! yammers confirms it
[14:42] themiddleman_itv has joined the channel
[14:42] chjj: augustl: im talking about why doctypes are pointless, which is why html (the current spec) dropped them
[14:42] topaxi has joined the channel
[14:42] augustl: so scala is too hard for the programers at yammer I've heard
[14:42] [Justice]: so if A requires B, C, D, and D requires F, G when being constructed, you set that up in your configuration for CB, and then just ask for cb.getBean("A")
[14:42] chjj: im preaching the spec right now, hehe
[14:43] augustl: and they want more replaceable programmers
[14:43] [Justice]: and it manages the creation and calling the constructor for all dependancies 
[14:43] [Justice]: and it caches those that you designate need to be singletons
[14:43] augustl: chjj: I need to pay more attention to the mailing lists!
[14:43] chjj: augustl: its not about what browsers do, its about what browsers dont do, their html parsers are just agnostic, they have no concept of valid elements, or validation at all
[14:44] chjj: augustl: so, might as well through out the doctype, but you still probably want to write standard html not for validation (i.e. not for the gold star you get after running it through the validator), but instead for predicatable behavior and accessibility
[14:45] chjj: throw out*
[14:45] jldbasa has joined the channel
[14:45] chjj: theres reasons to write standard html, its just, not of them have to do with a doctype
[14:45] chjj: none*
[14:45] Wizek has joined the channel
[14:46] fivetwentysix has joined the channel
[14:48] nealstewart has joined the channel
[14:49] chjj: augustl: anyway, sorry if that didnt answer your question. i really used to rant about why doctypes suck a lot back when i was more oriented toward the clientside
[14:50] mrkurt has joined the channel
[14:52] CIA-109: node: 03Ben Noordhuis 07v0.6 * r3ca0517 10/ wscript : 
[14:52] CIA-109: node: build: add --without-npm flag to configure script
[14:52] CIA-109: node: Fixes #2200. - http://git.io/KeSVbQ
[14:52] Raynos: https://github.com/mikeal/watch doesn't work on 0.6
[14:52] Raynos: What's a reputable recursive directory watcher for 0.6 ?
[14:52] Raynos: Or do I write a little recursive function myself?
[14:53] JasonJS has joined the channel
[14:55] chrisvwebdev has joined the channel
[14:55] JanLi has joined the channel
[14:56] Glenjamin: how broken is it?
[14:57] pauls1: anyone use cloudfiles? if so, know what causes the error "Invalid protocol" when trying to create a collection using node-cloudfiles? my API key/ auth seems correct, i'm using the UK auth server as is recommended in one ticketâ€¦ really stumped on this one and would really appreciate any help or guidance on what to do/look into.
[14:57] jstash has joined the channel
[14:57] Cromulent has joined the channel
[14:59] kishoreyekkanti has joined the channel
[15:01] torsd has joined the channel
[15:02] nrb has joined the channel
[15:03] raphdg has joined the channel
[15:03] magnetik_ has joined the channel
[15:04] joshkehn has joined the channel
[15:04] joshkehn has left the channel
[15:04] fuzzled has joined the channel
[15:04] postwait has joined the channel
[15:05] wankdanker has joined the channel
[15:06] brianloveswords has joined the channel
[15:07] strmpnk has joined the channel
[15:07] strmpnk has joined the channel
[15:07] issackelly_ has joined the channel
[15:08] strmpnk has joined the channel
[15:08] dhasenan has joined the channel
[15:09] bartt has joined the channel
[15:09] ryanfitz has joined the channel
[15:12] callumacrae has joined the channel
[15:14] __t has joined the channel
[15:16] danraz_ has joined the channel
[15:16] danraz_: guys, quick question:
[15:16] danraz_: I want to iterate in jade an object im sending through a controller
[15:16] Juan77 has joined the channel
[15:16] danraz_: the for item in iterms
[15:16] danraz_: isnt good for me
[15:17] danraz_: because I want to create a 2 column list
[15:17] danraz_: so I need to be able to go to the next item internally
[15:17] danraz_: sorry, I meant each item in iterms (not "for")
[15:19] jondot has joined the channel
[15:20] jondot: hi all. how would you move a file that exists in tmp? i'm trying fs.rename but it doesn't work (says file does not exist)
[15:21] k1ttty has joined the channel
[15:21] grampajoe has joined the channel
[15:21] baudehlo: you probably just got the name wrong.
[15:21] danraz_: copy and unlink?
[15:22] lyte_ has joined the channel
[15:22] ppcano has joined the channel
[15:22] jakehow has joined the channel
[15:23] josh-k has joined the channel
[15:23] torsd has joined the channel
[15:25] willwhite has joined the channel
[15:26] diogogmt has joined the channel
[15:28] deedubs has joined the channel
[15:30] lazyshot_ has joined the channel
[15:30] b_i_d: jondot: Race condition? Maybe the file doesn't exist anymore until you try to rename it.
[15:32] context: jondot: rename is for the moving a file when its moving to the same fs
[15:32] context: copy/unlink you must do.
[15:32] quackslike has joined the channel
[15:33] b_i_d: context: Oh, snap. Different fs... Haven't thought about that. *cooking new coffee*
[15:35] luke` has joined the channel
[15:36] hellp has joined the channel
[15:36] FIQ has joined the channel
[15:37] jomoho2 has joined the channel
[15:37] Xano has joined the channel
[15:37] stelleg has joined the channel
[15:38] diversario has joined the channel
[15:39] kmox83 has joined the channel
[15:40] Wizek has joined the channel
[15:42] gerard0 has joined the channel
[15:42] strmpnk has joined the channel
[15:43] troika has joined the channel
[15:44] wilmoore has joined the channel
[15:44] diversario: I'm working on a socket.io project and I'm trying to make sockets work with node clusters. I'm using Redis to store and retrieve sessions - get a cookie from socket connection, get session from Redis, authorize connection (or not) and proceed. What happens is, on a 16 clusters, socket connection goes through sometimes, but mostly I get this:
[15:44] diversario: info  - handshake authorized 17591624631152691043
[15:44] diversario: warn  - client not handshaken client should reconnect
[15:44] diversario: info  - transport end
[15:44] plutoniix has joined the channel
[15:44] vipaca has joined the channel
[15:44] vipaca has joined the channel
[15:44] ivanfi has left the channel
[15:47] secoif: anyone got any opinions on using private functions in modules? flexibility vs api cleanliness/encapsulation
[15:47] base698 has joined the channel
[15:48] Xano_ has joined the channel
[15:48] jarek has joined the channel
[15:48] jarek has joined the channel
[15:48] MatthewS has joined the channel
[15:48] secoif: actually I think i answered my own question. opting for encapsulation.
[15:49] pauls1 has joined the channel
[15:49] cgray has joined the channel
[15:50] winterdj has joined the channel
[15:51] winterdj: are there any instructions for removing node.js 0.6.3 installed via the mac pkg file?
[15:51] showcase has joined the channel
[15:51] raphdg has joined the channel
[15:52] xerox: how does one implement a windowed interface in the terminal, think irssi, a window with text that comes up from the bottom, and a line to input things
[15:52] kazupon has joined the channel
[15:53] aheckmann has joined the channel
[15:53] TheJH has joined the channel
[15:53] briancray has joined the channel
[15:53] Testkaksks has joined the channel
[15:53] ryan has joined the channel
[15:54] dilvie has joined the channel
[15:54] diversario: anyone? sockets with clusters?
[15:54] Testkaksks has joined the channel
[15:54] efernie has joined the channel
[15:54] diversario: test
[15:55] ddollar: i'm looking into having heroku respect the engine.node / engine.npm in package.json for your app.. wondering what the best way for me to resolve the fuzzy version matchers would be if i have a list of available versions
[15:55] jocafa has joined the channel
[15:57] lyte has joined the channel
[15:57] lyte has joined the channel
[15:57] davidascher has joined the channel
[15:58] diversario: how do I make socket.io use Redis as its session store?
[15:58] secoif: xerox https://github.com/mscdex/node-ncurses perhaps
[15:58] xerox: secoif: thanks I'll look
[15:59] neurodrone has joined the channel
[15:59] secoif: diversario perhaps try in #socket.io
[16:00] diversario: oh, i didn't realize there'a channel. thanks!
[16:01] diversario has joined the channel
[16:02] maletor has joined the channel
[16:02] tjholowaychuk has joined the channel
[16:03] gut4 has joined the channel
[16:03] lyte_ has joined the channel
[16:04] harthur has joined the channel
[16:04] themiddleman_itv has joined the channel
[16:05] chrislorenz has joined the channel
[16:05] topaxi has joined the channel
[16:06] gregpascale has joined the channel
[16:06] Brozilla has joined the channel
[16:07] colinclark has joined the channel
[16:07] colinclark_ has joined the channel
[16:07] Cromulent has joined the channel
[16:08] winterdj has left the channel
[16:09] shanebo has joined the channel
[16:10] socketio\test\91 has joined the channel
[16:10] jtr__ has joined the channel
[16:13] arcanis has joined the channel
[16:14] Srirangan has joined the channel
[16:14] ekryski has joined the channel
[16:14] raincole has joined the channel
[16:16] rachet: I've been trying to send some post data via an httpclient, and haven't had much luck
[16:16] rachet: http://hastebin.com/RwNL60nNgD
[16:17] kuebk has left the channel
[16:17] sheng_ has joined the channel
[16:17] phluffy has joined the channel
[16:18] Renegade001 has joined the channel
[16:18] D3f0 has joined the channel
[16:19] swestcott has joined the channel
[16:19] alexcheninfo has joined the channel
[16:19] TheJH: are there any commonly used libraries that put... uhm... interesting functions on the object prototype?
[16:20] SubStack: TheJH: oh I hate those things
[16:20] brianc has joined the channel
[16:20] TheJH: SubStack, me too, but I want to do more to nowjs than just DoSing the whole node process with one tiny message :D
[16:21] TheJH: SubStack, https://github.com/Flotype/now/issues/157 :D
[16:21] SubStack: TheJH: yikes!
[16:21] qFox: does node.js treat objects returned from require('a?1') and require('a?2') as different objects?
[16:22] qFox: eg. where require('a') === require('a'), does that also hold for require('a?1') === require('a?2')  ?
[16:23] context: qfox: why should they be different?
[16:23] context: qfox: you could try it? :/
[16:23] augustl: qFox: is "?" in require a special feature?
[16:23] augustl: or is your file actually named a?1.js
[16:23] TheJH: qFox, erm, WHUT?
[16:24] rwasielewski has joined the channel
[16:24] qFox: i'm not even sure if node will recognize ? in file names
[16:24] context: augustl: i think he is trying to treat it like a url
[16:24] TheJH: qFox, is the "?" actually part of the filename?
[16:24] context: require("blah.js?debug_me=true")
[16:24] qFox: or whther it supports loading modules from a remote location. if so, then the answer is probably yes. otherwise, there's a good chance the answer is "wont accept ?"-ish
[16:24] JakeyChan has joined the channel
[16:24] TheJH: qFox, it doesn't support that
[16:24] qFox: yeah ok
[16:24] qFox: pity
[16:24] TheJH: qFox, AH, MY EYES
[16:25] TheJH: qFox, node actually supported that a looong time ago
[16:25] TheJH: qFox, I'm glad that "feature" is gone
[16:25] topaxi has joined the channel
[16:25] qFox: well
[16:25] MatthewS has joined the channel
[16:25] augustl: qFox: require doesn't take a URL if that's what you're saying
[16:25] augustl: TheJH: O_i
[16:26] augustl: afaik you can have ? in your file name
[16:27] augustl: you can have all sorts of weird characters in them
[16:27] augustl: even multibyte afaik
[16:27] qFox: yaya
[16:27] base698 has joined the channel
[16:27] qFox: but this was about sharing state
[16:27] qFox: or well
[16:27] augustl: state in modules :(
[16:27] qFox: i want to collect results from something. but whatever is producing the results is split up in various modules
[16:28] Destos has joined the channel
[16:28] augustl: ah
[16:28] jocafa: rachet:  "hastebin"?   me likey....
[16:28] qFox: now this works fine for a single run in the same instance
[16:28] braoru has joined the channel
[16:28] qFox: ("single" ... "in the same" haha...)
[16:28] qFox: and could also work fine for multiple runs in the same instance, as long as theyre sync (add .reset method)
[16:29] qFox: but when it goes async, stuff gets a little weird
[16:29] augustl: so you have a system that outputs node modules, instead of xml or json or whatever? :D
[16:29] qFox: how would you solve that?
[16:29] qFox: euh
[16:29] sarpanch has joined the channel
[16:29] qFox: i have a system that outputs strings, and does so from within various modules
[16:29] jstash: are there any good modules for pooling the new http.Agent objects?
[16:29] pimetrai has joined the channel
[16:29] augustl: misread you
[16:29] qFox: these strings need to be collected and at the end, saved somewhere
[16:30] qFox: grouped per individual run
[16:30] augustl: qFox: not sure what you're talking about with "multiple runs in the same instance" etc
[16:30] qFox: same instance => same node instance
[16:30] qFox: multiple runs... eh, run the code multiple times?
[16:30] augustl: ok, so what's the actual question?
[16:30] qFox: how would you fix that
[16:30] qFox: :)
[16:31] augustl: you want to asynchronously load modules?
[16:31] qFox: no
[16:31] augustl: you want to share state across runs?
[16:31] qFox: no, exactly the opposite
[16:31] _Blorb has joined the channel
[16:31] qFox: it should be shared within a run, but not between runs
[16:31] augustl: a run = starting a new process?
[16:31] mandric has joined the channel
[16:31] qFox: no
[16:32] qFox: run = require('shitcode'); run(); run();
[16:32] augustl: ok, you can't piggyback on require, then
[16:32] augustl: ok, write some code that clears your state then I guess
[16:32] qFox: cant do that async
[16:32] augustl: ok, I like starting my sentences with ok.
[16:32] augustl: qFox: so your question is "how do I clear state asynchronously?"
[16:32] augustl: put differently, I don't understand your question ;)
[16:33] qFox: right, because no that's not my question
[16:33] qFox: :)
[16:33] augustl: exactly
[16:33] augustl: so is your question how to make run(); run(); asyncronous?
[16:33] qFox: mmmmm
[16:33] qFox: no
[16:33] qFox: come on, that's easy
[16:33] augustl: then what is your question?
[16:33] qFox: trying to formulate it, thinking, hurting my brain
[16:34] qFox: ok say i have a runner class. this runner class imports a few modules with various reporters. it wants to collect the report from all these reporters, from the individual modules. 
[16:35] augustl: there's no classes in JavaScript :S
[16:35] qFox: OH COME ON
[16:35] qFox: eugh. does it help to say i'm @kuvos?
[16:35] augustl: so you want a messaging system?
[16:35] igl1: define runner class 
[16:35] rachet: jocafa: yea, it's fairly new
[16:35] lmatteis: maxogden: hey, how does your couchapp.org site deal with spammers or bots that might overflow the _session url by creating new users, just randomly?
[16:35] smgt has joined the channel
[16:36] lmatteis: maxogden: it seems like there's no captcha no email-verification sort of thing...
[16:36] jstash: i guess i should say, are there any http.Agent replacements that manage the pool of sockets differently than the 0.6 default?
[16:36] augustl: qFox: or was that only half a question?
[16:36] qFox: holy crap. really? you cant see how that's just a generic clas.. no, "object with properties that you instantiate through new" ?
[16:36] frank_ has joined the channel
[16:36] qFox: ok, so, nevermind.
[16:36] augustl: qFox: it's not easy to follow you when you use terminology that doesn't exist
[16:36] qFox: either what i'm asking is too complicated or the question itself is. i'm not sure.
[16:37] chrislorenz has joined the channel
[16:37] qFox: i surely hope you're not talking about "class" here...
[16:37] augustl: qFox: I'm just trying to understand your problem, no need to yell at us
[16:37] stantona has joined the channel
[16:37] augustl: qFox: so, your question is how to create a module that imports other modules, with reporters, and collect data from those reporters?
[16:37] igl: whats the question?
[16:38] qFox: no, but it would help to give me a little credit in knowing the language spec. telling me classes do not exist doesnt quite strike me as something i might not already know
[16:38] igl: is it possible to do what you ask? yes
[16:38] augustl: qFox: keep in mind I don't know you nor your code
[16:38] qFox: no, but you could at least give me the benefit of the doubt, based on what i'm asking and already telling you, right?
[16:38] qFox: oh this is too meta
[16:38] augustl: qFox: for all I know, if you think JavaScript has classes you might think node has threads. Again, I don't know anything about you or your problem so I'm just doing what I can to understand more
[16:38] qFox: i have to go, anyways, dinner is ready
[16:39] augustl: qFox: anyway. am I correct in my guess about what your question is?
[16:39] qFox: i might give this another shot later. or just ask in uxebu and hope stephan knows.
[16:39] augustl: qFox: sure, I can give you the benefit of the doubt, I'm open to anything :)
[16:39] augustl: qFox: btw, thinking you're cooler than us doesn't help either ;)
[16:39] qFox: augustl, unfortunately, no. it's about a module that needs to keep multiple states. ish.
[16:39] augustl: qFox: sounds like it's a good idea to create instances 
[16:39] jsurfer has joined the channel
[16:40] qFox: wont work, you'll be juggling
[16:40] augustl: var mything = require("wtf"); vs var mything= require("wtf").create()
[16:40] qFox: parameter juggling i mean
[16:40] augustl: or what have you
[16:40] qFox: you'd have to pass on mything to every call from the modules
[16:40] davidwalsh has joined the channel
[16:40] augustl: qFox: hmm, creating instances instead of using modules not working sounds like a problem you created for  yourself?
[16:40] broofa has joined the channel
[16:40] qFox: maybe
[16:40] augustl: qFox: so there's shared global state involved?
[16:41] augustl: that sounds like such a problem ;)
[16:41] qFox: but i really gotta go. i might return later.
[16:41] jimmyspark has left the channel
[16:41] ShinyDarkness: Hello. Can I set the exports variable to a function?
[16:41] rachet: ShinyDarkness: yes.
[16:41] truedat101 has joined the channel
[16:41] augustl: ShinyDarkness: it can be anything you want.
[16:41] ShinyDarkness: rachet, augustl: Thanks.
[16:42] qFox: augustl, oh and ps. i did not (at least not want to) imply that i'm better. just that i'm not a newby and know a fair bit about the language. i'm here to ask help, that makes me inferior by default :)
[16:42] rachet: how do I send some post data via httpClient ?
[16:42] augustl: qFox: that's good to know
[16:42] kmox83_ has joined the channel
[16:43] augustl: qFox: 99.9% of people that have problems on IRC usually deserves the treatment you got ;)
[16:43] ShinyDarkness: rachet, augustl: Is "return <newline> 5;" valid in node.js?
[16:43] luke`_ has joined the channel
[16:43] augustl: ShinyDarkness: you can try yourself :)
[16:43] augustl: not sure
[16:43] augustl: easy to find out though
[16:43] ShinyDarkness: augustl: Okay.
[16:43] rachet: ShinyDarkness: is it valid in javascript?
[16:43] rachet: if so, then yes.
[16:43] qFox: augustl, and it's exactly that treatment that i despise on programming channels on irc. 
[16:44] rachet: qFox: you have to become a part of the channel community before you stop getting that treatment
[16:44] augustl: qFox: it's useful, in very many cases having people explain their problem in clear terms ends up solving the problem
[16:44] strmpnk has joined the channel
[16:44] qFox: i've hung around those channels myself since like ever. i always burn those who respond similarly in chans where i'm a regular. it was nothing personal
[16:44] augustl: qFox: not useful if you happen to know what you're talking about of course, but that's the edge case
[16:44] qFox: rachet, and since i'm more known under a different alias these days, that's why i hoped that cleared up anything. anwyays, afk.
[16:45] augustl: and to be honest your question was very vague so it was natural that some flags got raised
[16:45] strmpnk has joined the channel
[16:45] jerrysv has joined the channel
[16:45] rachet: any takers on sending post data? I've been digging through the docs and stack overflow
[16:45] augustl: rachet: an easy way is to pass it to .end()
[16:46] arcanis has joined the channel
[16:46] augustl: that'll set the request body to whatever you pass to it. Whether it's GET, POST, or what have you.
[16:47] ohtogo has joined the channel
[16:47] rauchg has joined the channel
[16:47] BillyBreen has joined the channel
[16:48] augustl: rachet: so, you're not looking for "sending post data", that's probably why you didn't find anything
[16:48] augustl: the more generic term closer to http is to set the request body
[16:49] torsd has joined the channel
[16:49] gut4 has joined the channel
[16:49] Wizek has joined the channel
[16:50] fmeyer has joined the channel
[16:50] stantona has joined the channel
[16:51] rachet: augustl: a little more background on what I am trying to do. Basically, I have a webservice that accepts a task, does it, then posts data back to a caller
[16:51] rachet: when I cURL the postback URL... it dumps the post data to the console
[16:52] rachet: when I use node to post data to the postback URL... nothing happens on teh postback side
[16:53] augustl: rachet: you need to add a listener to the "data" event on the response object you get when performing the request
[16:54] augustl: rachet: http://pastie.org/2944861
[16:54] bosphorus has joined the channel
[16:54] augustl: rachet: data may be emited sveral times, so make sure you don't assume you only get one chunk
[16:55] caolanm has joined the channel
[16:55] ryanfitz has joined the channel
[16:55] dmwuw has joined the channel
[16:56] stephank has joined the channel
[16:57] __t has joined the channel
[16:57] isaacs has joined the channel
[16:58] ayaz` has joined the channel
[16:58] grampajoe has joined the channel
[16:58] ayaz has joined the channel
[16:59] gary_ has joined the channel
[16:59] liar has joined the channel
[17:00] rachet: augustl: no joy. Let me paste all the parts.
[17:01] sh1mmer has joined the channel
[17:01] cronopio has joined the channel
[17:02] qFox: <rachet> qFox: you have to become a part of the channel community before you stop getting that treatment <-- so you'll understand me since i've been idling here since the early history of this channel... :)
[17:03] dgathright has joined the channel
[17:03] jtr__ has joined the channel
[17:03] augustl: rachet: will it take long? g2g
[17:03] rachet: no, just reformating it
[17:03] rachet: almost done
[17:03] rachet: http://pastie.org/2944902
[17:04] colinclark has joined the channel
[17:04] augustl: rachet: so what's not working?
[17:04] rachet: when running the poster, the postback url doesn't actually do anything
[17:05] augustl: rachet: the poster = doing the http request?
[17:05] augustl: rachet: and "url doesn't do anything" - what do you mean?
[17:05] rachet: the poster is the httpCLient, the postback is the app.post()
[17:05] rachet: the postback should be console.logging things
[17:05] insin has joined the channel
[17:05] rachet: but it doesn't
[17:05] jackbean_ has joined the channel
[17:06] rachet: it's like the request never happened
[17:06] rachet: if I do something like "curl localhost:3000/episode/activate -d hello:world"
[17:06] augustl: rachet: http doesn't have a createClient method
[17:06] augustl: not that I can find at least
[17:06] augustl: so not sure where that is coming from
[17:06] rachet: ACTION head desks
[17:07] augustl: you'd get an exception when running that script though
[17:07] augustl: so you'd probably notice
[17:07] rachet: I don't get an exception - I actually use very similar code elswhere to download a file from a server
[17:07] augustl: rachet: node -v?
[17:07] augustl: http.createClient is not listed on http://nodejs.org/docs/v0.6.3/api/http.html
[17:08] rachet: v0.4.10
[17:08] augustl: not listed on http://nodejs.org/docs/v0.4.10/api/http.html either :)
[17:08] augustl: so perhaps you should use a  documented API instead
[17:08] augustl: no idea what createClient is
[17:08] context: no createClient documented for 4.10 either
[17:08] rachet: strange...
[17:09] context: http://nodejs.org/docs/v0.4.10/api/http.html
[17:09] context: use get() or request()
[17:09] augustl: try var req = http.request({method: "POST", path: "/episode/activate", host: "localhost", port: 3000}, function () {....}); req.end(...)
[17:09] augustl: rachet: ^^
[17:09] perezd has joined the channel
[17:09] MatthewS has joined the channel
[17:09] augustl: g2g
[17:10] sfoster has joined the channel
[17:10] EuroNerd has joined the channel
[17:10] rachet: augustl: thanks
[17:12] Poetro_ has joined the channel
[17:12] Poetro_ has joined the channel
[17:12] seebees has left the channel
[17:12] indexzero has joined the channel
[17:13] elliottcable has joined the channel
[17:14] jerrysv has joined the channel
[17:14] te-brian has joined the channel
[17:14] chrislorenz has joined the channel
[17:15] devongovett has joined the channel
[17:16] robi42 has joined the channel
[17:17] XOXO1 has joined the channel
[17:18] OtherJakeSays_ has joined the channel
[17:19] petrjanda has joined the channel
[17:20] PyroPeter has joined the channel
[17:20] caolanm has joined the channel
[17:20] tbranyen: any thoughts on generating rss with node.js?
[17:21] mauritslamers_ has joined the channel
[17:21] context: rss is just xml
[17:21] tbranyen: well yeah... but it has a specification
[17:21] context: correct. which is freely available
[17:22] tbranyen: yeah instead of searching for rss modules, i should search for xml modules
[17:22] tbranyen: which i'm guessing are about as common
[17:23] raphdg has joined the channel
[17:23] context: probably
[17:23] context: cause xml is garbage
[17:23] tbranyen: yeah but unfortunately if people want to follow your blog it is what it is
[17:23] context: umm
[17:23] context: i found plenty of rss feed generators
[17:23] context: and it took me all of .5 seconds
[17:24] context: that was waiting for the page to load, and the ajax request to complete
[17:24] context: well one generator, many parsers
[17:24] EuroNerd has joined the channel
[17:24] Revernd has joined the channel
[17:24] tbranyen: i applaud your search skills, what do you mean by rss feed generator? isn't that what i just asked
[17:24] context: http://search.npmjs.org/#/rss
[17:24] tbranyen: and you said was just xml
[17:25] dgathright_ has joined the channel
[17:25] context: rss IS xml
[17:25] context: search.npmjs.org ... the only place to search for node modules
[17:26] context: http://search.npmjs.org/#/xml
[17:27] tbranyen: context: boom that is exactly what i was looking for and unable to find via google
[17:27] tbranyen: thanks
[17:27] tbranyen: https://github.com/joyent/node/wiki/modules
[17:27] tbranyen: also wtf happened here
[17:27] dshaw_ has joined the channel
[17:27] context: hahahaha
[17:27] context: talk about hosed
[17:28] hackband has joined the channel
[17:28] simenbrekken has joined the channel
[17:28] context: https://github.com/joyent/node/wiki/Modules/89f1352b32f0ae71bd126a7c410f50c6318c2a74
[17:28] aconbere has joined the channel
[17:28] context: someoone keeps switching it between maarkdown and textile
[17:29] tjholowaychuk: github is defaulting it to markdown
[17:29] tjholowaychuk: for some reason
[17:29] qFox: augustl, rachet: see https://gist.github.com/1409912 for an example. i will be gone now but feel free to respond there on how you would solve that in node.js. looking forward to it.
[17:29] dilvie has joined the channel
[17:29] qFox: (oh i just typed up that in like five minutes, please ignore any typos, just take the "gist" of it :)
[17:30] chunhao_ has joined the channel
[17:31] syoyo_ has joined the channel
[17:31] lzskiss has joined the channel
[17:32] ddollar: i'd like to read engines.node and engines.npm out of package.json.. is there an official npm cli to do this? i cant seem to find one
[17:33] TheJH: ddollar, it's just JSON
[17:33] TheJH: ddollar, fs core lib and JSON.parse :D
[17:33] SubStack: ddollar: npm view
[17:33] SubStack: npm view pkgname engines.node
[17:34] ddollar: SubStack: i can only seem to get that to give me published package info rather than info out of the local package.json in my cwd
[17:34] dgathright_ has joined the channel
[17:34] ddollar: TheJH: yeah, i can do that as a last resort but was hoping to get something a bit more official
[17:34] SubStack: aha
[17:35] SubStack: isaacs: should npm view work for local packages too?
[17:35] TheJH: ddollar, do you want the data from a local package or from the official repo?
[17:35] ddollar: TheJH: local package
[17:35] Renegade001 has joined the channel
[17:35] ddollar: i'm trying to make heroku's nodejs buildpack support engines.node and engines.npm from an app's package.json
[17:35] dshaw_1 has joined the channel
[17:36] TheJH: ddollar, then I see nothing wrong with just looking at the JSON stuff directly. but yes, npm does have an API, you can require('npm')
[17:36] jaigouk has joined the channel
[17:36] fzzzy has joined the channel
[17:37] patcito has joined the channel
[17:37] jaigouk has joined the channel
[17:37] mike5w3c has joined the channel
[17:37] ddollar: well i can certainly do that for now, but consider mine a vote for having npm view work locally :)
[17:38] kitt has joined the channel
[17:38] isaacs: SubStack: you mean, like expose the read-installed module?
[17:38] isaacs: SubStack: or rather, no, the read-json.js module
[17:38] saikat has joined the channel
[17:39] deadmau5 has joined the channel
[17:40] airhorns has joined the channel
[17:40] dthompso99 has joined the channel
[17:40] SubStack: could be
[17:40] ekryski_ has joined the channel
[17:40] RobWC has joined the channel
[17:40] `3rdEden has joined the channel
[17:40] isaacs: ddollar: you could also just reuire("./package.json")
[17:41] isaacs: ddollar: or require("foo/package.json") if it's locally installed
[17:41] technoweenie has joined the channel
[17:41] isaacs: i mean, if your goal is to read the package stuff in a node program, that is
[17:41] ddollar: cool.. the script im working with right now is 100% bash so i was hoping to be able to just interface with the npm cli
[17:41] technoweenie: sh1mmer: yo
[17:41] isaacs: ddollar: oh, ok.  check out the `npm install jsontool`
[17:42] ddollar: nice, thanks
[17:42] kiilo has joined the channel
[17:42] githogori has joined the channel
[17:43] springmeyer has joined the channel
[17:45] Carter has joined the channel
[17:45] davidascher has joined the channel
[17:45] piscisaureus__ has joined the channel
[17:47] ecin has joined the channel
[17:48] trotter has joined the channel
[17:49] nils_r has joined the channel
[17:51] grampajoe has joined the channel
[17:52] towski has joined the channel
[17:53] piscisaureus_ has joined the channel
[17:53] stisti has joined the channel
[17:53] francisl has joined the channel
[17:54] madhums has joined the channel
[17:54] davemo has joined the channel
[17:55] PyroPeter has joined the channel
[17:56] badlearner1 has joined the channel
[17:56] lyte has joined the channel
[17:56] lyte has joined the channel
[17:56] simpleex has joined the channel
[17:57] badlearner1: Hi, now that JavaScript is server side as well, is it as good as lower level languages like C? or is it still among those abstracted, higher-level languages like Python, Perl, Ruby, PHP etc?
[17:57] simpleex has left the channel
[17:57] badlearner1: Which block does JS belong to?
[17:58] orangevinz has joined the channel
[17:58] jerrysv: badlearner1: not sure why it's "now", javascript has been serverside for a number of years
[17:58] moogoo: clearly the later
[17:58] Hoppertje has joined the channel
[17:58] kiilo has joined the channel
[17:58] blup has joined the channel
[17:58] seb_m has joined the channel
[17:58] simpleex has joined the channel
[17:58] moogoo: "now that JS is taken seriously server side"
[17:59] badlearner1: I meant that JS is strongly being considered as a server-side scripting language as well
[17:59] badlearner1: "NOW"
[18:00] badlearner1: moogoo: you mean, JS is a higher-level language?
[18:00] thatmarvin has joined the channel
[18:00] moogoo: ...
[18:01] badlearner1: moogoo: you said "clearly the later"
[18:01] moogoo: I did say clearly
[18:01] moogoo: higher-level doesnt mean anything
[18:01] moogoo: C is a higher level language than assembly
[18:01] badlearner1: ok
[18:02] badlearner1 has left the channel
[18:02] jarek__ has joined the channel
[18:02] moogoo: JS is a dynamic high level language that has no relation to any computing hardware
[18:02] moogoo: the dynamic part is probably the most important
[18:03] spolu has left the channel
[18:04] ShinyDarkness: moogoo: True, and all programming languages are low-level compared to business process definitions. :P
[18:04] JanLi has joined the channel
[18:06] dgathright has joined the channel
[18:06] PyroPete1 has joined the channel
[18:06] tih-ra_ has joined the channel
[18:06] moogoo: computers don't handle blatent illogic and rampent ambiguity well
[18:07] xcoderzach has joined the channel
[18:08] delian66 has joined the channel
[18:08] churp has joined the channel
[18:08] tih-ra_ has joined the channel
[18:09] patcito_ has joined the channel
[18:09] simpleex has left the channel
[18:10] simpleex has joined the channel
[18:10] pimetrai has joined the channel
[18:10] arturadib has joined the channel
[18:11] tih-ra has joined the channel
[18:12] jbpros has joined the channel
[18:12] patcito has joined the channel
[18:13] TooTallNate has joined the channel
[18:14] simpleex has left the channel
[18:15] __t has joined the channel
[18:16] GauthierD has joined the channel
[18:17] bemson has joined the channel
[18:19] bemson: node can hook into system level commands easy enough, yes? I need to read through and expand zip files, and figured the shell would be faster
[18:20] ceej has joined the channel
[18:21] hackband has joined the channel
[18:21] dandean has joined the channel
[18:22] shinuza has joined the channel
[18:23] vguerra has joined the channel
[18:24] chuck_daniel has joined the channel
[18:24] Renegade001 has joined the channel
[18:25] _dc has joined the channel
[18:27] chuck_daniel: Hi all, quick questionâ€¦ Can I use  fs.createWriteStream('filename', {flags: 'a+', encoding: 'utf8', mode:0666})  on the same file from multiple node processes and would it do the correct thing when calling its write('foo\n') from each nodejs process  (ie. would it write each line from each process to the one file correctly or would it overwrite things)
[18:28] billycravens has joined the channel
[18:28] mikeal has joined the channel
[18:28] fangel has joined the channel
[18:30] mikeal has joined the channel
[18:30] jxson has joined the channel
[18:32] wookiehangover has joined the channel
[18:32] lazyshot has joined the channel
[18:33] base698 has joined the channel
[18:33] jhurliman has joined the channel
[18:33] fatjonny has joined the channel
[18:34] erichynds has joined the channel
[18:35] danbeam has joined the channel
[18:35] reid has joined the channel
[18:36] grampajoe_ has joined the channel
[18:36] danbeam: curl -sI http://nodejs.org/dist/node-latest.tar.gz | grep ^Status ; # 404, is this intentional?
[18:37] danbeam: whoops, grep ^HTTP
[18:38] StanlySoManly has joined the channel
[18:38] t0mmyvyo has joined the channel
[18:38] jakehow has joined the channel
[18:39] Morkel has joined the channel
[18:40] Mikeux has joined the channel
[18:40] herbySk has joined the channel
[18:41] Mikeux: Hi
[18:41] gr-eg has joined the channel
[18:42] Mikeux: EnyOne?
[18:43] Renegade001 has joined the channel
[18:46] boltR has joined the channel
[18:46] TheJH: Mikeux, is that supposed to mean "anyone"?
[18:48] dingomanatee: chuck - append writing - in unix anyway - is piped through the unix system and should be manageable from several processes. That is after all how logging works. 
[18:51] franciscallo has joined the channel
[18:53] Swimming_Bird has joined the channel
[18:53] harry has joined the channel
[18:54] garrensmith has joined the channel
[18:55] eignerchris has joined the channel
[18:56] georgesnelling has joined the channel
[18:56] pokoli has joined the channel
[18:57] Margle has joined the channel
[18:57] morgabra has left the channel
[19:00] stantona has joined the channel
[19:00] tlrobinson has joined the channel
[19:02] seebees has joined the channel
[19:03] stantona has joined the channel
[19:04] zemanel has joined the channel
[19:04] jstash: isaacs: known issues with npm under v0.6.3 on SmartMachines
[19:04] jstash: ?
[19:04] mattrobenolt has joined the channel
[19:04] jstash: GH-1793
[19:05] daithi44 has joined the channel
[19:05] mcluskydodallas has joined the channel
[19:05] ekryski has joined the channel
[19:07] wereHamster: npm seems to be somehow broken on 0.6.3, there have been quite some issues with it
[19:07] mmalecki: yes it is >.<
[19:07] ec|IRCCloud has joined the channel
[19:07] wereHamster: .. another reason not to bundle npm with node
[19:07] catb0t: Exception: SyntaxError: Unexpected identifier
[19:08] JasonJS: I understand that Crockford is rather opinionated, but is there a real reason to have functions defined above their use? They all get pushed to the top at runtime anyways.
[19:08] isaacs: wereHamster: there's a --without-npm configure option on 0.6.4
[19:08] ccapndave has joined the channel
[19:08] isaacs: and this release will be nicer.
[19:08] wereHamster: let's hope so :)
[19:08] mmalecki: yay for --without-npm!
[19:08] isaacs: it's the first time, stumbling is not terrible.
[19:08] wereHamster: in a stable release series.. ?
[19:08] cgfuh has joined the channel
[19:08] xeodox has joined the channel
[19:09] mmalecki: (not that I don't want to use it. I just want to install it myself)
[19:10] wereHamster: on one side you're reluctant to *add* new api functions (which is completely backwards compatible), on the other side you're adding npm and cause quite bit of pain there..
[19:10] kishoreyekkanti has left the channel
[19:10] ccapndave: Hey all - I am trying to install brunch using 'npm install -g brunch' and I'm getting a bunch of weird errors.  I've tried it on Windows and Ubuntu with the same result. https://gist.github.com/1410350 is the output I'm getting.  Is brunch broken or am I using npm wrongly (I am noobish at this)?
[19:10] creationix has joined the channel
[19:10] jstash: thanks all.
[19:10] isaacs: wereHamster: the goal was to have it included in 0.6.0, but it didn't make it in time
[19:10] wereHamster: then why don't wait for 0.8.0 like with everything else?
[19:10] isaacs: wereHamster: because we didn't want to :)
[19:11] hipsters_ has joined the channel
[19:11] AvianFlu has joined the channel
[19:11] isaacs: wereHamster: sorry, i mean, not to be flip, but it really is sort of just a design decision that was made by ryan and the rest of the core tema.
[19:11] isaacs: *team
[19:12] isaacs: i mean, for each person who encounters a bit of an issue with 0.6.3 (which was a bit of a rough landing, unfortunately) there are many more who now will have several fewer steps to get going with node.
[19:12] isaacs: 0.6.4 will be out tomorrow.
[19:12] isaacs: we've already sussed out most of the bugs
[19:12] mmalecki: isaacs: with updated npm?
[19:12] isaacs: yes
[19:12] mmalecki: josh-k: ^
[19:12] wereHamster: to me it seems like an arbitrary decision to include one and not the the other
[19:12] mmalecki: isaacs: awesome :)
[19:12] josh-k: hey guys
[19:12] isaacs: i'm just working out the last few issues on windows, it already works great on linux and bsd
[19:12] jocafa: doggonnit
[19:12] robotmay has joined the channel
[19:12] jocafa: too many people named josh
[19:12] jocafa: Â¬Â¬
[19:12] mmalecki: josh-k: looks like we don't have to deploy that npm fix
[19:13] josh-k: hahaha
[19:13] Renegade001 has joined the channel
[19:13] josh-k: mmalecki: ok, can you remove it from the cookbooks?
[19:13] medice: ah, windows will have npm as well?
[19:13] wereHamster: either you are committed to the stable release (given that joyent uses opensolaris/illumos I'd expect them to be more committed to what 'stable' means...)
[19:13] josh-k: i will rebuild the vm in that case
[19:13] jocafa: "josh" is on my keyword highlight list thingie
[19:13] mmalecki: josh-k: have you deployed it already?
[19:13] wereHamster: or you are not, and then the even/odd versioniing doesn't make sense
[19:13] josh-k: mmalecki: nope, been tied up today
[19:13] mmalecki: josh-k: ok, I'll revert it then
[19:13] josh-k: mmalecki: cool
[19:14] mmalecki: josh-k: we have to make sure we get 0.6.4 asap, tho
[19:14] josh-k: sure sure
[19:14] danbeam: should make -j## allow multiple parallel jobs when making node on Linux/Ubuntu? seems like this is ignored...
[19:15] mmalecki: I'm happy to revert hacks
[19:15] riven` has joined the channel
[19:16] SubStack: hahaha twisted is worse than I remembered
[19:16] jsurfer has joined the channel
[19:16] mattrobenolt: danbeam: I've always exported a JOBS variable before running make.
[19:16] mattrobenolt: export JOBS=4
[19:16] riven has joined the channel
[19:16] mattrobenolt: Or however many cores you have.
[19:16] danbeam: make -j6 ; # Parallel Jobs: 1
[19:16] danbeam: mattrobenolt: ah
[19:16] SubStack: trollin' twisted: http://news.ycombinator.com/item?id=3296237
[19:16] mmalecki: SubStack: o rly? try out tornado, it's better
[19:17] danbeam: mattrobenolt: JOBS=`grep process /proc/cpuinfo | wc -l` make ; # :D
[19:17] danbeam: processor**
[19:17] mattrobenolt: danbeam: Yeah, well, I tend to remember how many cores I have. ;)
[19:18] danbeam: hehe, yes, but I'm making a script that others can run as well (inb4 but we already have this)
[19:18] jocafa: i do this in my makefiles:  http://hastebin.com/KkGqlWNRWT.pl
[19:18] mattrobenolt: Well, keep in mind that /proc/cpuinfo isn't very universal.
[19:19] danbeam: mattrobenolt: well, all Linux, no?
[19:19] mattrobenolt: Maybe? I'm not 100% sure.
[19:19] danbeam: jocafa: cool, grep -c saves the bytez
[19:19] mattrobenolt: I don't know where BSD falls with that. I know OSX doesn't have it.
[19:19] mattrobenolt: jocafa's script covers OSX.
[19:19] danbeam: yeah, I see
[19:20] jocafa: note: i didn't *write* it, i cobbled it together from lots of googling
[19:20] mattrobenolt: haha, I didn't even know how to grab the number of cores in OSX until that script.
[19:20] mattrobenolt: And any server that I've compiled on, I just know it's 4 cores, 8 cores, whatever.
[19:21] mattrobenolt: Know if there's a reason why make doesn't handle it automatically?
[19:21] danbeam: -j kinda does
[19:21] danbeam: (at least in Chrome)
[19:21] Renegade001 has joined the channel
[19:21] tek has joined the channel
[19:21] danbeam: just slams your box with as many threads as you can handle
[19:21] danbeam: (and often more)
[19:21] jocafa: i had this stuff in a makefile for a project at work, 'cause "make setup" would clone and build node.  i didn't want my coworkers to have to wait around when they have hyperthreaded quad-core machines
[19:21] mattrobenolt: Right, haha
[19:22] mattrobenolt: I guess it makes sense if you needed to compile ona  production box (for some reason), you wouldn't want to saturate all cores and make everythign else unresponsive.
[19:22] mattrobenolt: Sacrifice the time and run it on one core only.
[19:22] jocafa: yeah you could check for some environment variable and scale it back or something
[19:22] mattrobenolt: *shrug*
[19:22] truedat101 has joined the channel
[19:23] danbeam: mattrobenolt: additionally, how many cores people use is a voodoo itself (some say 1 per core, some have way more or way less)
[19:23] danbeam: s/how many cores/how many jobs/
[19:23] fuzzled has joined the channel
[19:23] mattrobenolt: When I compile on my Mac Pro with 8 cores, it fully saturates all 8.
[19:23] mattrobenolt: If I do 4, it saturates 4, etc. If I did more, I'm sure it would be slower.
[19:23] tbranyen: mattrobenolt: how long did it take to compile with 8?
[19:23] tbranyen: under a minute?
[19:24] mattrobenolt: Pretty sure. Let me run it now with 0.6.3 and I'll report back. One second.
[19:24] jocafa: why not set the jobs to the number of cores, then nice the make process?
[19:24] jocafa: or something like that
[19:25] mattrobenolt: 'build' finished successfully (13.359s)
[19:25] mattrobenolt: 13 seconds, haha
[19:25] tbranyen: >_< thats not a fresh compile then
[19:25] mattrobenolt: I did a make clean before I ran.
[19:25] tbranyen: did you make distclean ?
[19:25] mattrobenolt: Oh, there's a different distclean?
[19:25] tbranyen: i always use that and not make clean
[19:25] tbranyen: so i dunno
[19:26] AvianFlu_ has joined the channel
[19:26] jocafa: did you see v8 build?
[19:26] mattrobenolt: I guess not. I'm rebuilding now after distclean.
[19:26] CarterL has joined the channel
[19:26] mattrobenolt: 'build' finished successfully (38.976s)
[19:26] bemson: is it easy to unzip an archive in node? Do I need to a js library to do it, or can I call the bash command "zip" directly?
[19:29] CrypticSwarm has joined the channel
[19:29] boehm has joined the channel
[19:29] maxogden: bemson: have you checked out search.npmjs.org ?
[19:30] robbiet480 has joined the channel
[19:30] mattrobenolt: 35s with 16 jobs. So I guess a tiny bit faster, but not much.
[19:31] bemson: maxogden: will do - just wondering if these kinds of things are done by Node or by Node using a system executable...
[19:31] bemson: cuz who wants to decompress zip archives in JS! :-p
[19:32] braoru has joined the channel
[19:32] boltR has joined the channel
[19:32] maxogden: bemson: it depends on what problem you are trying to solve
[19:32] maxogden: if you want a streaming, nonblocking unzipper in pure js then there might be a module for that
[19:32] bemson: maxogden: many thx - taking a look now
[19:32] maxogden: if you just want to unzip a file on your laptop using node and you dont care about performance then you can shell out
[19:32] bemson: maxogden: claro
[19:33] maxogden: but if you are just unzipping a file on your laptop node might not be the best tool for the job
[19:33] ryan_stevens has joined the channel
[19:34] p1d has joined the channel
[19:34] r1ngzer0 has joined the channel
[19:35] jeffj_ has joined the channel
[19:35] martin_sunset has joined the channel
[19:36] MrNibbles: hey gents
[19:37] maxogden: Greetings, Mr. Nibbles!
[19:38] MrNibbles: im tryining to access the created time of a file. Unfortunately its not one of the standard unix timestamps and a fellow here mentioned that its accessible via a files metadata. My question is, how do i access this meta-data? Its certainly not a property of data returned from fs.stat
[19:38] MrNibbles: maxogden: o/
[19:38] hackband has joined the channel
[19:38] arcanis has joined the channel
[19:38] MrNibbles: i only care about unix platforms by the way
[19:39] sridatta has joined the channel
[19:40] maxogden: Mr. Nibbles, I regret to inform you that I am not particularly familiar with this problem space.
[19:40] MrNibbles: maxogden: no probs, i am stumped by it too :/
[19:41] OneOfOne: MrNibbles: how do you do it outside node?
[19:41] jarek has joined the channel
[19:41] jarek has joined the channel
[19:42] MrNibbles: OneOfOne: i'm not sure tbh, i dont know how to do it from bash either
[19:42] franciscallo has joined the channel
[19:42] MrNibbles: OneOfOne: but good plan, i will have a look for a cli method. At least i can fork off a child process to check
[19:42] OneOfOne: MrNibbles: i don't get it, how do you know it's not the correct time stamp then?
[19:43] jerrysv: MrNibbles: fs.stats should return a ctime, are you not seeing it?
[19:43] OneOfOne: maybe the file was recreated and time changed
[19:43] MrNibbles: OneOfOne: ooh, i see. The finder inspector shows the correct created date
[19:43] jakehow has joined the channel
[19:43] MrNibbles: OneOfOne: its apparently stored in the files metadata
[19:43] mattrobenolt: 7m9s to compile on a Rackspace Cloud server. :( That just shows how awesome CPU performance is.
[19:44] Renegade001 has joined the channel
[19:44] MrNibbles: mattrobenolt: of stable? thats insane!
[19:44] mattrobenolt: Yeah.
[19:44] jerrysv: MrNibbles: console.dir(fs.statSync('./foo.js'));
[19:45] jerrysv: MrNibbles: http://nodejs.org/docs/v0.6.2/api/fs.html#fs.Stats
[19:45] mattrobenolt: 7m9s on a Rackspace Cloud server with 4 jobs. 35s on my local Mac Pro with 8 jobs.
[19:45] colinclark_ has joined the channel
[19:45] MrNibbles: jerrysv: none of those properties are the created time
[19:45] MrNibbles: jerrysv: ctime is 'changed time'
[19:46] jerrysv: MrNibbles: mtime
[19:46] MrNibbles: jerrysv: mtime is modified time, relates to file sectors etc, not the original creation date of the file
[19:46] jerrysv: MrNibbles: well, mtime is the modification time of the file data itself, whereas ctime is the last file change (permissions, ownership, etc)
[19:47] fuzzled has joined the channel
[19:47] MrNibbles: jerrysv: none of which match the creation date unfortunately
[19:47] jerrysv: you can muck with mtime all you want (set it to the past, change the "created date", etc) but ctime still keeps your last change date
[19:48] mcluskydodallas has joined the channel
[19:48] MrNibbles: jerrysv: thanks, but i've already been through this. I require the creation date, not the last modified date. This data is stored somewhere, as finder has access to it
[19:48] jerrysv: MrNibbles: many filesystems don't explicitly track created time, only modification times and the inode modification times
[19:48] MrNibbles: apparently in the files meta-data, wherever this may lurk
[19:49] creationix: MrNibbles: you're right, it's part of HFS+ I believe
[19:49] creationix: is there some osx command-line tool to extract this data?
[19:49] jerrysv: yeah, it's not posix
[19:50] creationix: fs.stat only looks at standard posix stuff
[19:50] MrNibbles: creationix: i was just wondering this, im going to have a dig around
[19:50] jerrysv: MrNibbles: didn't see that you were trying to do this only on os x
[19:50] creationix: actually, libuv has all sorts of ifdefs, I wonder it creation time is somehow there on mac systems
[19:50] gr-eg_ has joined the channel
[19:51] jerrysv: creationix: not exposed via fs.stat
[19:52] jerrysv: MrNibbles: http://blog.plasticsfuture.org/2006/03/05/the-state-of-backup-and-cloning-tools-under-mac-os-x/
[19:52] stantona has joined the channel
[19:53] creationix: MrNibbles: you can probably shell out to mdls if  it's on your system
[19:53] MrNibbles: creationix: boom :)
[19:53] jerrysv: or write an add-on that accesses the carbon api
[19:54] jerrysv: creationix: and thanks, i didn't know about mdls :)
[19:54] creationix: me either
[19:54] MrNibbles: thats a rather handy find
[19:54] creationix: but I figured there was a tool, so I googled
[19:54] jerrysv: very handy find
[19:54] MrNibbles: creationix: many thanks
[19:54] CiRlE has joined the channel
[19:55] MrNibbles: your google-fu is strong
[19:55] deedubs: man nodes is saving the day on this project.  trying 2 http apis, 1 web socket, and 1 TCP connection together
[19:55] creationix: sweet
[19:55] deedubs: all in the name of Christmas spirit
[19:55] jspiros has joined the channel
[19:57] socketio\test\65 has joined the channel
[19:59] harthur has joined the channel
[20:01] EhevuTov has joined the channel
[20:03] catshirt has joined the channel
[20:04] jbrokc has joined the channel
[20:04] AvianFlu_ has joined the channel
[20:05] rtgibbons has joined the channel
[20:10] jldbasa has joined the channel
[20:11] diogogmt has joined the channel
[20:11] stagas has joined the channel
[20:11] lzskiss has joined the channel
[20:13] AvianFlu has joined the channel
[20:13] maushu has joined the channel
[20:14] devongovett has joined the channel
[20:15] JasonJS has joined the channel
[20:17] ph^ has joined the channel
[20:17] robi42 has joined the channel
[20:17] jankeromnes has joined the channel
[20:19] churp has joined the channel
[20:20] base698 has joined the channel
[20:20] adrianF has joined the channel
[20:20] braoru has joined the channel
[20:20] adrianF has joined the channel
[20:21] sechrist has joined the channel
[20:21] truedat101 has joined the channel
[20:25] jarek__ has joined the channel
[20:25] bradleyg has joined the channel
[20:25] jj0hns0n_ has joined the channel
[20:26] rio{ has joined the channel
[20:28] broofa has joined the channel
[20:28] jankeromnes: does anyone know when no.de will increase capacity?
[20:29] wookiehangover_ has joined the channel
[20:29] boltR has joined the channel
[20:30] fly-away has joined the channel
[20:30] Lingerance: Isn't no.de always down?
[20:30] Lingerance: ACTION can never access it, which is annoying when looking at that node-constest thing's winners
[20:30] deadmau5: npm update
[20:30] deadmau5: confuses me
[20:31] deadmau5: isn't it supposed to update the module if a newer release satisfies the version?
[20:32] isaacs: deadmau5: yes.
[20:32] xeodox has joined the channel
[20:32] deadmau5: hm
[20:32] isaacs: it's got some bugs, i think
[20:32] deadmau5: seems like it
[20:32] deadmau5: i have to rm -fr node_modules/mocha
[20:32] deadmau5: npm install
[20:32] isaacs: haven't looked into it lately.  focused on other thigns for the time being, i'm afraid.
[20:32] isaacs: deadmau5: you can also just `npm install mocha`
[20:32] deadmau5: ok cool
[20:32] isaacs: you dont' need to rm the folder.  install will clobber if you give it a package name explicitly
[20:34] _unary has joined the channel
[20:34] sechrist_ has joined the channel
[20:35] aaronmcadam has joined the channel
[20:35] npa has joined the channel
[20:37] harthur has joined the channel
[20:37] localhost has joined the channel
[20:37] Renegade001 has joined the channel
[20:38] matejv has joined the channel
[20:39] eddyb has joined the channel
[20:40] eddyb: can anyone make heads and tail out of http://webblaze.cs.berkeley.edu/2010/kudzu/ ?
[20:40] eddyb: I couldn't :(
[20:40] liar has joined the channel
[20:41] qbert has joined the channel
[20:41] matejv has joined the channel
[20:41] isufy has joined the channel
[20:41] TheJH: eddyb, mhm, sounds cool
[20:42] jbrokc_ has joined the channel
[20:43] matejv has joined the channel
[20:45] matejv has joined the channel
[20:48] nils_r has joined the channel
[20:50] saikat has joined the channel
[20:52] isufy has joined the channel
[20:52] colinclark has joined the channel
[20:52] saikat has joined the channel
[20:52] rio{ has joined the channel
[20:53] colinclark has joined the channel
[20:53] matin has joined the channel
[20:54] stantona has joined the channel
[20:54] chrisvwebdev has left the channel
[20:55] TheLifelessOne has joined the channel
[20:56] johnnywengluu: what does "Error: global leak detected" mean in node.js?
[20:56] EvRide has joined the channel
[20:57] jskulski has joined the channel
[20:57] deadmau5: johnnywengluu that's mocha :p
[20:58] deadmau5: not node
[20:58] jarek__ has joined the channel
[20:58] johnnywengluu: deadmau5: ah .. what does it mean?
[20:58] eddyb: deadmau5: O_O
[20:58] eddyb: why do I see you in here?
[20:58] mattrobenolt has joined the channel
[20:58] jomoho has joined the channel
[20:58] TheLifelessOne: o_o
[20:58] johnnywengluu: that someone defined a variable as global variable?
[20:58] deadmau5: it means you have a global variable that you didnt before the test
[20:58] johnnywengluu: i see
[20:59] eddyb: you're deadmau5, that minecraft guy, right?
[20:59] TheLifelessOne: *silence*
[20:59] johnnywengluu: deadmau5: do you know if i can manipulate mocha programatically in the tests eg. adding something that is equivalent to --timeout 4000
[20:59] mmalecki: I don't think I even
[21:00] kei has joined the channel
[21:00] deadmau5: johnnywengluu not per test-case no
[21:00] deadmau5: (yet) that is
[21:00] tanepiper: deadmau5 === tj in hiding :D
[21:00] deadmau5: hahaha
[21:00] deadmau5: LIES
[21:00] deadmau5: yeah
[21:00] johnnywengluu: haha
[21:00] deadmau5: hiding
[21:01] petrjanda has joined the channel
[21:01] EhevuTov has joined the channel
[21:01] eddyb: deadmau5: fuck you
[21:01] deadmau5: haha
[21:01] TheLifelessOne: Hey man, there are CHILDREN here.
[21:02] caolanm has joined the channel
[21:02] eddyb: you ruined my W I N C E P T I O N dream :(
[21:02] eddyb: TheLifelessOne: you meant to say child_processes?
[21:02] TheLifelessOne: Possibly.
[21:02] _th_n has joined the channel
[21:03] qbert: anyone have a static code checker they like ?
[21:04] ge has joined the channel
[21:04] b_i_d: "eddyb: why do I see you in here?" Wow. A coder in a channel about a programming language. How the hell could that happen? ;)
[21:04] TheLifelessOne: is it bad form to use an IIFE in node?
[21:04] stride: it's magic
[21:04] TheLifelessOne: (function() { }());
[21:04] Morkel has joined the channel
[21:05] eddyb: I think you want the () outside the other parens
[21:05] TheLifelessOne: Yeah, typo.
[21:05] TheLifelessOne: ACTION hangs head in shame.
[21:05] eddyb: and something like that (with a few arguments) is what node uses for module encapsulation
[21:05] TheLifelessOne: I see.
[21:05] vkandy_ has joined the channel
[21:06] eddyb: function(exports, module, require){...module code...}
[21:06] johnnywengluu: someone that is stubbing the entire db when testing? https://github.com/visionmedia/mocha/issues/98
[21:06] TheLifelessOne: Ok.
[21:07] davidascher has joined the channel
[21:07] tonymilne has joined the channel
[21:08] MatthewS has joined the channel
[21:11] ge: when I add some heavy processing to my app via recurring calls to process.nextTick, my (unrelated) response streams slow to a crawl. Can someone explain what's going on?
[21:11] TooTallNate: does anyone know of a module that does like a recursive readdir?
[21:12] ddollar has joined the channel
[21:12] aheckmann has joined the channel
[21:12] creationix: ge: nextTick or not, it's still single threaded
[21:13] creationix: the only thing that's parallel is I/O wait
[21:13] mmalecki: creationix: heeeey! :)
[21:13] creationix: mmalecki: hi!
[21:13] mmalecki: creationix: would you accept nvm pull request for installing HEAD?
[21:13] creationix: mmalecki: probably not
[21:13] creationix: why?
[21:14] ph^ has joined the channel
[21:14] mmalecki: creationix: we could use it on travis for testing with node HEAD
[21:14] creationix: mmalecki: my workflow if you nvm deactivate when I want to use the node installed at /usr/local/bin
[21:14] creationix: mmalecki: but I see, it would be nice to have a nvm managed HEAD
[21:14] creationix: mmalecki: what you can do is install it manually
[21:15] creationix: nvm use can switch to it once installed
[21:15] ge: To clarify, the response takes several hundred ticks to complete. Is that because there's very small limit (several kB) of how much data can be sent each tick? If so, is that amount adjustable?
[21:15] creationix: just manually compile with the right prefix
[21:15] mmalecki: creationix: neat trick you have there, sir :)
[21:15] animorten has joined the channel
[21:15] mattrobenolt has joined the channel
[21:16] creationix: ge: what's taking hundreds of ticks? I don't understand 
[21:16] mmalecki: creationix: ok, we can do something like that, I think :)
[21:16] jesster7 has joined the channel
[21:16] jesster7 has left the channel
[21:16] creationix: mmalecki: I've tried and failed a few times to get a HEAD installer in mv
[21:16] creationix: *nvm
[21:16] creationix: it never works
[21:16] mmalecki: creationix: why is that? I could help
[21:17] creationix: it's just not a very good match
[21:17] creationix: normally I need HEAD because I'm developing node itself
[21:17] ge: The function that's repeatedly running via process.nextTick is executed several hundred times in the amount of time it takes for a single res.end(str_data) call to deliver all its data.
[21:17] creationix: so I have a custom fork of node
[21:17] creationix: nvm will grab the latest from joyent and built it as-is
[21:17] davidascher has joined the channel
[21:17] creationix: that's only really useful for simply testing node
[21:18] mmalecki: yeah
[21:18] dlow has joined the channel
[21:18] peterrs has joined the channel
[21:18] mmalecki: the point is, we have ruby head, rbx head, we could benefit from node head
[21:19] vkareh has joined the channel
[21:19] felixge has joined the channel
[21:19] creationix: mmalecki: if the patch just grabbed the tarball (not using git), that might work
[21:19] _th_n has joined the channel
[21:19] creationix: tread HEAD just like any other node version, but with a custom url
[21:20] creationix: I dunno, I guess a git checkout is fine too
[21:20] mmalecki: creationix: yeah, that'd definitely work. github provides tarballs, so it's cool
[21:20] creationix: as long as it doesn't get modified
[21:20] creationix: a git clone makes it quicker to pull changes
[21:20] SubStack: tarballs for tags too
[21:20] mmalecki: or maybe joyent is willing to provide latest HEAD?
[21:20] creationix: mmalecki: go ahead and send me the patch I'll think about it
[21:20] smathy has joined the channel
[21:20] creationix: git or tarball, I don't care
[21:21] mmalecki: isaacs: heeeeeey :)
[21:21] creationix: just as long as there is a way to update it
[21:21] mmalecki: creationix: ok, I'll :)
[21:22] creationix: ge: nextTick is very fast, the only time it takes is the time the CPU takes to execute the instructions
[21:22] creationix: anything I/O related is much slower
[21:22] dlow: hey guys, whats everyone's opinion of the module pattern and/or closures vs prototypes
[21:22] isaacs: mmalecki: yo
[21:22] dlow: i know enough about js to be dangerous, but i'd like to start conforming to a particular style
[21:22] mmalecki: isaacs: any possibility to provide HEAD just like any other node version on nodejs.org?
[21:22] creationix: dlow: good luck with that
[21:22] creationix: there are many styles and no best one
[21:23] creationix: I personally prefer closure for most stuff, but often enjoy prototypes as well
[21:23] creationix: depends on the task
[21:23] mmalecki: dlow: you'll start seeing it soon
[21:23] dlow: mmalecki: well, i can use both
[21:23] dlow: i understand it fine
[21:24] isaacs: mmalecki: that doesn't sound likely
[21:24] ge: So, from what I can gather, a response stream takes a pretty much fixed number of ticks to deliver a set amount of data (say, 25MB). If I slow down the tick rate by doing, say, 100ms processing on each tick, that explains why my response stream data rate drops to almost nothing. Is that what you're saying?
[21:24] mmalecki: isaacs: ok, it's fine :)
[21:24] isaacs: mmalecki: but bnoordhuis would be the guy to ask, i think
[21:24] dlow: but it's pretty foreign compared to C, c++ and python, which is what i know well
[21:25] dlow: well, lets say i want to start by using the proto model. Anyone know of any projects that use it that I could look over? I'd like to see some examples of larger code bases
[21:26] N0va has joined the channel
[21:26] johnnywengluu: aaaah
[21:26] joshwnj has joined the channel
[21:26] johnnywengluu: can _anyone_ get TJ's decision? https://github.com/visionmedia/mocha/issues/98#issuecomment-2966335
[21:26] johnnywengluu: its crazy 
[21:26] johnnywengluu: put us back in the sync nature
[21:26] johnnywengluu: why????
[21:26] boltR has joined the channel
[21:27] joemccann has joined the channel
[21:28] petrjanda has joined the channel
[21:28] creationix: ge: I don't understand what nextTick is used for
[21:29] brianc: johnnywengluu: running tests in parallel is a nightmare when you test async things
[21:29] jacobolus has joined the channel
[21:29] cyborg has joined the channel
[21:29] johnnywengluu: brianc: I can't get what the nightmare is if the tests are in isolation .. have I missed something?
[21:29] _baton_ has joined the channel
[21:30] mmalecki: brianc++
[21:30] v8bot_:  mmalecki has given a beer to brianc. brianc now has 1 beers.
[21:30] cyborg: any good alternative to 'director' for client-side routing?
[21:30] creationix: cyborg: like sammy?
[21:30] cyborg: ACTION is grepping github for sammy
[21:31] AvianFlu: they should make a pared-down version of sammy.js... call it sammy.js jr.
[21:31] insin: ACTION is still waiting for someone to take the Isomorphic Crown
[21:31] CoverSlide: haha nice
[21:31] harthur has joined the channel
[21:31] deadmau5: johnnywengluu hahaha
[21:31] deadmau5: because you dont want to kill yourself
[21:32] deadmau5: that's why
[21:32] cyborg: creationix : ok i like the look of this - would you recommend?
[21:32] stepheneb has joined the channel
[21:32] deadmau5: node core tests are not parallel either
[21:32] brianc: johnnywengluu: i don't know how the tests would be isolated?  a way to _sort of_ isolate them is to have them run 1 at a time...but if they're all doing async things and all running at "the same time" they're not really isolated 
[21:32] deadmau5: if you want fast, hard to manage use expresso, if you want slower but easy use mocha
[21:32] johnnywengluu: deadmau5: what is the issue that will come up?
[21:32] deadmau5: many issues
[21:32] creationix: cyborg: I'm not up to date on the latest for client-side routing.  there may be something better
[21:32] mmalecki: yeah, I recall parallel tests doing bad things
[21:32] dlow has left the channel
[21:32] StanlySoManly1 has joined the channel
[21:32] mmalecki: so it's definitely good, TJ
[21:32] cyborg: creationix : okay thanks nonetheless
[21:32] mmalecki: or deadmau5 
[21:33] mmalecki: or whoever you decided to be today
[21:33] deadmau5: hahaha
[21:33] creationix: cyborg: I hear good things about sproutcore 2 and backbone
[21:33] johnnywengluu: brianc: all the variables are bound to one test specifically .. how couldn't that be isolated?
[21:33] deadmau5: linkinus decides for me
[21:33] creationix: not sure if those are "routing" frameworks though
[21:33] cyborg: creationix : noted
[21:33] insin: they have a routiness about them
[21:33] context: sproutcore is a full app framework
[21:33] hipsters_ has joined the channel
[21:34] creationix: sproutcore2 is leaner
[21:34] creationix: not the same as sproutcore
[21:34] johnnywengluu: creationix: have you used SC2?
[21:34] creationix: but still a lot heavier than backbone
[21:34] cyborg: and i guess there's 'spine.js' as well?
[21:34] creationix: not personally
[21:34] creationix: there are many, I can't keep up with them all
[21:34] johnnywengluu: cyborg: it's not very mature yet .. but it looks good especially if you like coffeescript
[21:34] perezd_ has joined the channel
[21:34] mmalecki: why don't you like director?
[21:34] insin: did anything more about Yahoo's Mojito thing surface yet?
[21:34] jbrokc_ has joined the channel
[21:34] cyborg: johnnywenglu no i prefer native js
[21:35] mmalecki: insin: hahahahhahahaha
[21:35] creationix: ACTION goes back to writing a pure node database...
[21:35] mmalecki: insin: this thing is a big joke
[21:35] mmalecki: insin: I mean, show me teh sauce
[21:35] insin: I didn't hear anything more about it since the original announcement
[21:35] insin: indeed
[21:36] cyborg: l8r noders
[21:36] cyborg has left the channel
[21:36] JasonJS: var foo = function foo() {}; Is there any reason not to do it?
[21:36] insin: Just dying for someone to nail the client/server from the same codebase thing so I can stop failing hard at it in my own limited time :/
[21:36] stantona has joined the channel
[21:36] zomg: insin: Aptana Jaxer!
[21:36] showcase has joined the channel
[21:37] mmalecki: is there any module for event buffering?
[21:37] context: event buffering ?
[21:38] mmalecki: context: buffer events from an EventEmitter and release them all at once
[21:38] context: oh :x
[21:38] b_i_d: Anyone here using NIDE as your IDE?
[21:38] insin: I run a mile from anything containing "runat"
[21:38] Dmitrijus: b_i_d: i use vim!
[21:38] AvianFlu: vim++
[21:38] v8bot_:  AvianFlu has given a beer to vim. vim now has 1 beers.
[21:38] mmalecki: insin: runat?
[21:38] herrmannplatz has joined the channel
[21:38] mmalecki: vim++
[21:38] v8bot_:  vim is getting too many beers.  Don't let vim get drunk!
[21:38] zomg: Vim is such a weakling
[21:39] zomg: =)
[21:39] b_i_d: Should have known. ;)
[21:39] mmalecki: I don't want my vim drunk!
[21:39] stride: drunk vim can't :q
[21:39] insin: "Step 1. Jaxer executes the JavaScript functions that are set to runat="server" or runat="both""
[21:39] mmalecki: b_i_d: but I've checked nide out, it's really nice
[21:39] mmalecki: insin: wut
[21:39] mmalecki: b_i_d: are you it's developer, by a chance?
[21:40] b_i_d: Yeah, vim is nice too. But I love the functions of nide. But now it begins killing my I/O and filling the memory.
[21:40] stantona_ has joined the channel
[21:40] mcluskydodallas has joined the channel
[21:40] b_i_d: mmalecki: No. I patched an older version, but never released that patch.
[21:41] b_i_d: Was just hoping someone could give me a hint, what that I/O trashing may be about. :/
[21:41] Sorella has joined the channel
[21:41] b_i_d: Guess my project got too big...
[21:41] mauritslamers_ has left the channel
[21:42] tonymilne has joined the channel
[21:42] crescendo has joined the channel
[21:43] ljackson: ryah, you have a guide on how to use libuv when coming from raw libev world ? e.g. replace ev_io with ?
[21:44] magnetik has joined the channel
[21:44] hij1nx has joined the channel
[21:44] creationix: ljackson: fyi, there is a #libuv room as well
[21:44] ljackson: k
[21:44] sjltaylor has joined the channel
[21:44] creationix: they were very useful when I wrote #Luvit
[21:45] jerrysv: creationix: what is luvit?
[21:45] __t has joined the channel
[21:45] elijah-mbp has joined the channel
[21:45] creationix: jerrysv: node ported to lua
[21:45] crcn has joined the channel
[21:45] creationix: libuv saved me a *ton* of time
[21:45] mmalecki: jerrysv: and it's pretty awesome
[21:45] creationix: it's like the heart and soul of node
[21:45] jerrysv: creationix: aha, didn't know its name :)
[21:45] mmalecki: I really regret I don't have enough time to do something awesome with it
[21:46] creationix: mmalecki: same here
[21:46] b_i_d: OK, NIDEs internal versioning holds 8500 files. That may be the problem... :D
[21:46] mmalecki: creationix: silly day, has only 24 hours
[21:47] mmalecki: I'd really want it to be longer!
[21:47] creationix: mmalecki: our lives are long enough, we just need to know what's important
[21:47] b_i_d: mmelecki: It has? Damn. Should drink less coffee...
[21:47] ge: Ok, an oversimplified version of what I'm doing is running a long computation that takes several minutes. I'm running this in 100ms chunks using process.nextTick to schedule the next chunk of computation. Meanwhile, I have an http server running and serving pre-computed results that are about 25MB in size. Everything works fine if I either don't have the heavy computation, or if the http responses are tiny. But if I'm stressing the cpu w
[21:47] jerrysv: creationix++
[21:47] v8bot_:  jerrysv has given a beer to creationix. creationix now has 2 beers.
[21:47] mmalecki: b_i_d: haha
[21:48] creationix: someone needs to patch the bot to not give me beer, some nice sparkling apple juice would be nice
[21:48] creationix: ACTION had never drunk beer
[21:48] mmalecki: creationix: well, I can agree. however, having too many awesome ideas leads to many context switches, which are pricey
[21:48] jerrysv: ge: let me guess, finbonacci sequence?
[21:48] mmalecki: creationix: we can get kohai in here, I think
[21:48] hij1nx has joined the channel
[21:48] cgray has joined the channel
[21:48] mmalecki: creationix: it has !like command
[21:48] jocafa: lds represent!
[21:48] b_i_d: We need a cocktail menu for the bot...
[21:49] creationix: mmalecki: you should write an irc bot in luvit
[21:49] jerrysv: i've been wondering how quickly i'd get banned if i put the bots into an infinite loop
[21:49] creationix: for the #luvit channel
[21:49] mmalecki: creationix: I know :(
[21:49] ge: ;-) no, but I recall the fiasco. it's actually a simulated annealing process, and the huge response data pieces I'm serving are the results of the last checkpoint.
[21:49] quackquack has joined the channel
[21:49] lduros has left the channel
[21:49] mmalecki: creationix: I'll, long weekend is coming. now I have school and job
[21:50] creationix: ge: ok, so that's the problem.  You're saturating the CPU
[21:50] jerrysv: by having catb0t write out a v8bot execution that triggers a catb0t execution, etc
[21:50] catb0t: execution when I use it, its just getting more done faster and easier if you learned how to use it on a cluser computing system execution
[21:50] creationix: breaking the computation into a hundred chunks doesn't make it use any less CPU
[21:50] creationix: more actually
[21:50] creationix: it just makes the latency a little more uniform for other events
[21:50] creationix: ge: best thing would be to shell out the computation to another process
[21:51] creationix: actually, the new APIs in 0.6.x should make this easy
[21:51] creationix: .fork or something like that
[21:52] ge: Right, I understand that I'm actually adding overhead with all the switches in and out, but I'm doing that to give control back to node every 100ms. I figured that by doing that I could ensure that http responses would get out in no more than 100ms. The confusing thing is that it's taking hundreds of ticks for the http response to get transmitted. And this is all local on my box
[21:53] ge: I was afraid you'd recommend another process :-)  Actually, wouldn't I have a similar problem if that process needs to send lots of data back to the main process? I'd just be encountering the "data trickle" problem on a pipe rather than a tcp socket.
[21:53] joshgillies has joined the channel
[21:54] creationix: ge: nextTick and CPU blocking operations are pretty heavy in node
[21:54] sdwrage has joined the channel
[21:55] GrizzLyCRO has joined the channel
[21:55] creationix: the only thing that can get in front of a nextTick is an event that emitted before the nextTick is scheduled
[21:55] shanebo: hey guys on server start what's the best way to run something async and stop code until complete then continue without passing a callback?
[21:55] creationix: so once you schedule a nextTick, no new events will get in front of it
[21:55] creationix: or something like that
[21:56] creationix: shanebo: you can't
[21:56] creationix: but it's ok to do sync stuff at startup
[21:56] zomg: Oh great, still this errno exception nonsense even with 0.6.3 :|
[21:56] zomg: Error: connect Unknown system errno 110
[21:56] torm3nt has joined the channel
[21:56] shanebo: creationix yeah except when there isn't a sync option :( https://github.com/publicclass/open-uri
[21:57] creationix: shanebo: then you need a callback
[21:57] creationix: or "unholy" things like co-routines
[21:57] technoweenie: promises!
[21:57] creationix: promises are just API sugar for callbacks
[21:57] benvie: been thinking about how using isolates to run multiple nodes could afford for sync-when-desired functionality by handing off duties to other isolates
[21:57] hij1nx has joined the channel
[21:57] shanebo: creationix yeah but then I'm getting into scope issues with exports.module etc.
[21:57] truedat101 has joined the channel
[21:57] benvie: and allowing one "consumer" context to block and allow for sync syntax
[21:57] ge: Right, I think I see how a nextTick can block the response data flow _but only for one tick_, even if it's a long tick. But it's not just delayed by one tick, it's taking hundreds of ticks for a _single_ response.end() call to send its data to the browser.
[21:58] benvie: while the others do any work that comes up
[21:58] zomg: I'm forced to have an unhandledError exception handler now because of this damn error which is uncatchable otherwise, and thus kills my app entirely :(
[21:58] creationix: ge, but when do you schedule the nextTicks?
[21:58] ryanfitz has joined the channel
[21:58] benvie: it's not so much that it needs to spin the tick counter, it just needs to idle
[21:58] creationix: they may be getting in the queue before the I/O can
[21:58] jerrysv: ge: dumb question, but are you sure that gc isn't getting in the way?
[21:59] davidascher has joined the channel
[21:59] michaelhartau has joined the channel
[21:59] ge: At the very end of the function that was scheduled with nextTick. function foo () {/*blah ... blah*/ process.nextTick(foo);}
[22:00] creationix: what's a fast way to JSON.stringify all the properties of an object except for one?
[22:00] creationix: delete property, stringify, put back?
[22:00] benvie: define as non-enumerable?
[22:00] creationix: clone into new filtered object and stringify
[22:00] benvie: not sure if that
[22:00] benvie: woul;d be faster
[22:00] creationix: well, I don't want to mutate the object
[22:00] zomg: Does anyone know if commit 44314ccf48332c91db57a53d5fc0e3de48642681 is in 0.6.3?
[22:00] creationix: so I'd have to put it back how it was
[22:00] ge: And there is some IO on the http response, it's not stopped dead. I'm watching it trickle out at like 500kB/s or so, at the same time I'm watching the repeated calls to my process.nextTick worker
[22:00] benvie: well you can use defineProperty on an existing one
[22:01] zomg: Right, looks like it is...
[22:01] benvie: just doing { enumerable: false} then {enumerable: true} after
[22:01] benvie: that'd be the lightest touch way to do it
[22:01] creationix: benvie: not a bad idea
[22:01] firedog has joined the channel
[22:01] creationix: hopefully faster than delete and put back
[22:01] creationix: since that breaks V8's hidden classes
[22:01] benvie: other idea maybe to add a toJSON function to that property if it's an object, but messier
[22:02] davidascher has joined the channel
[22:02] benvie: er I guess that wouldn't help cause it'd still have a name?
[22:02] cgfuh has joined the channel
[22:03] benvie: other idea, if you're running with --harmony
[22:03] benvie: would be to just create a forwarding proxy for it with a tiny filter on get
[22:03] mraleph has joined the channel
[22:04] benvie: JSON.stringify will only be pinging the get and keys traps so you barely need to do anything
[22:05] JanLi has joined the channel
[22:05] swestcott has joined the channel
[22:05] aoberoi has joined the channel
[22:06] tokumine has joined the channel
[22:07] johnnywengluu: brianc: if every function gets a cloned object (with variables) from the beforeEach()before() every test would be in isolation .. it's not optimal for each function to have access to "global" variables .. of course that wouldn't be isolation then
[22:07] hij1nx has joined the channel
[22:08] storrgie has joined the channel
[22:08] pahko has joined the channel
[22:08] brianc: johnnywengluu: yeah but if you access external systems...no longer isolated
[22:09] benvie: var filtered = Proxy.create({ keys: function(){ return Object.keys(target).filter(someFilter); }, get: function(rcvr, name){ return target[name]; } }, Object.getPrototypeOf(target));
[22:09] zomg: well filed an issue about this since I've been getting it since 0.6.0 and it was even supposedly fixed at some point https://github.com/joyent/node/issues/2236
[22:09] zomg: oh actually I think I was getting this since 0.4.7... :P
[22:09] brianc: johnnywengluu: the only _major_ testing I've done with node is with node-postgres but having them run in parallel was not an option
[22:09] _dc has joined the channel
[22:09] johnnywengluu: brianc: what i mean isolation in this case is that one test result can't access another test's variables
[22:10] johnnywengluu: brianc: why? i still can't get it .. there is no test affecting test
[22:10] johnnywengluu: if the variables are just for one test
[22:10] bosphorus has joined the channel
[22:10] mikeal has joined the channel
[22:10] k1ttty has joined the channel
[22:10] brianc: johnnywengluu: for example...I have a test to handle the case for trying to connect too many connections to the database at once.  if that test is executing while another test is trying to do some other query test...the other one _might_ fail depending on when they execute
[22:11] chuck_daniel has left the channel
[22:11] johnnywengluu: I see
[22:11] deadmau5: johnnywengluu you'll have a lot more issues than that too trust me
[22:11] deadmau5: not to mention really inflexible error/regular reporting
[22:12] brianc: johnnywengluu: I know I'm not doing "unit" testing...but still...I think making tests run well 1 at a time is a harder problem and generally more useful than having all your tests going at one time. there's a place for both but it's nice mocha (and nodeunit and node-tap) all help w/ the harder problem and making doing the 'right thing (ymmv)' easier
[22:13] brianc: when i was writing node-postgres there weren't really many mature testing frameworks so I took the bastardized way and just run each test file 1 after another with a separate node process (i believe this is how the node test suite is run).  even doing that it runs about 300 integration tests in only a matter of seconds.  thank god node starts up fast
[22:13] deadmau5: yeah when i wrote expresso for testing connect/express i was all stoked on running things parallel
[22:13] deadmau5: and it is slightly faster
[22:13] deadmau5: but it really kills you
[22:13] deadmau5: and while the new tests are a bit slower they're muuuch much much nicer to work with
[22:14] brianc: deadmau5: amen
[22:14] deadmau5: brianc yeah i do that too sometimes
[22:14] TheLifelessOne: how can I build a POST request?
[22:14] deadmau5: brianc https://github.com/visionmedia/node-zeromq/blob/master/test/run
[22:14] deadmau5: like that?
[22:14] dilvie: deadmau5: I didn't know you were into JavaScript. Did you like the photos from SLC? How's your cat? =)
[22:15] brianc: deadmau5: https://github.com/brianc/node-postgres/blob/master/Makefile#L37
[22:15] tonymilne: ^ hahaâ€¦ i was thinking the same. Damn, thats a call nickname for irc! ;)
[22:15] brianc: deadmau5: pretty much exactly, yeah
[22:15] deadmau5: brianc ah nice
[22:16] brianc: deadmau5: I eventually ended up with this (since make not available on windows) https://github.com/brianc/test-dir
[22:16] dilvie: deadmau5: How's South Africa treating you?
[22:16] deadmau5: yeah that's the best way to go for larger tests
[22:16] ecin_ has joined the channel
[22:16] brianc: deadmau5: it's similar to felixge 'node-urun'.  I plan on using mocha going forward (espesh w/ integration http tests using tobi)
[22:17] colinclark_ has joined the channel
[22:17] deadmau5: if your tests require quite a bit of setup nothing beats a simple bash loop or whatever
[22:18] jesster7 has joined the channel
[22:18] brianc: yea mos def
[22:18] johnnywengluu: brianc: thanks for the explanation .. are there other issues that might come up when each test is run in parallell besides the risk that the external system changes state and thus affecting other tests?
[22:18] perezd has joined the channel
[22:19] jesster7 has left the channel
[22:19] brianc: johnnywengluu: if a test throws an exception or raises an error in a callback it's hard to figure out which test broke (could be mitigated by long-stack-traces or 1 test per isolate or whatever, but that's all magical future-node stuff)
[22:20] johnnywengluu: okay then .. screw parallell tests :P just the issue one is stupid to encounter
[22:20] johnnywengluu: if I don't have 100 different db instances for each test...hah!
[22:21] brianc: johnnywengluu: haha, yeah. well there is a time for parallel tests too...i just think if option a (1 at a time) is right 80% of the time, harder to implement from a framework perspective, and easier to reason about then option a is probably the way to go
[22:23] deadmau5: tests dont need to be THAT fast really
[22:23] brianc: johnnywengluu: I think there are probably always tradeoffs when building or using a framework of any sort
[22:23] deadmau5: perhaps you're relying on them too much :p
[22:23] deadmau5: which can also be a bad thing
[22:23] brianc: deadmau5 has another good point there
[22:23] deadmau5: it's a fine art
[22:23] deadmau5: but dont go thinking just because you have some tests that you're not doing damage
[22:24] deadmau5: and usually people test the easy things
[22:24] deedubs: i think its critical that test are as fast as possible
[22:24] deadmau5: because they're easy to test
[22:24] deadmau5: :D
[22:24] deedubs: on a rails app which takes like 4 minutes to run just the unit the suite, no-one bothers
[22:24] deadmau5: oh god yeah i had ruby suites take a good 30m or so
[22:24] deadmau5: but it makes you actually consider what you're doing
[22:25] deadmau5: instead of "oh the tests pass, sweet im good"
[22:25] deedubs: it was funny to see the project manager bragging about how no-one breaks the build and then someone sheepishly say the build has been broken for 3 weeks and they just shutoff the notifier
[22:25] brianc: yeah rails test speed was unacceptable 
[22:25] te-brian has joined the channel
[22:26] johnnywengluu: deadmau5: but if you are writing a node.js wrapper for a database HTTP interface you wanna test all your functions
[22:26] johnnywengluu: I assume?
[22:26] deadmau5: yeah but you can assume the database works
[22:26] deadmau5: so things like that you can mock
[22:26] deadmau5: im not a huge fan of mocking
[22:26] deadmau5: but that is a good use-case for mocking
[22:26] johnnywengluu: hmm
[22:26] deadmau5: again testing doesn't mean it is 100% solid, never does, so just dont assume that
[22:26] mikl has joined the channel
[22:26] deadmau5: it's a sanity check
[22:26] deadmau5: nothing more
[22:27] johnnywengluu: the problem is when they change things I have tests that are not valid
[22:27] johnnywengluu: it does mean that if I use this code now, it will _work_
[22:27] jerrysv: creationix: luvit is pretty neat
[22:28] johnnywengluu: if I come back after 1 year and forgot about things .. i can run tests .. if they work I can assume 1. they didn't change the db API .. 2. my code is working, I can use it _now_
[22:28] deadmau5: johnnywengluu yeah but even then, what about the multiple versions of that database
[22:28] eignerchris_ has joined the channel
[22:28] deadmau5: a lot more things are at play
[22:28] johnnywengluu: if I have 1000 methods (just to exaggerate) it's a PITA to just delve into thoughts like going over their doc for each request, manually check if they work etc
[22:28] brianc: pretty much impossible to test all the permutations of a complex system
[22:28] deadmau5: im not saying you cant do it, im just saying i wouldnt
[22:29] bingomanatee has joined the channel
[22:29] SteveDekorte has joined the channel
[22:30] hipster__ has joined the channel
[22:30] SteveDekorte has left the channel
[22:30] johnnywengluu: brianc: why i just wanna check the ones i use
[22:30] johnnywengluu: when i wanna know i check if they work
[22:30] deadmau5: brianc yeah i agree
[22:30] deadmau5: your test suite would have to be at least 10x the size
[22:30] deadmau5: of your library
[22:30] deadmau5: if not much more
[22:30] brianc: yeah
[22:30] deadmau5: IMO regression tests are the most import
[22:30] johnnywengluu: i could have it in another git repo
[22:30] deadmau5: important*
[22:31] deadmau5: they show that you fucked up
[22:31] deadmau5: cover your ass
[22:31] deadmau5: and dont fuck up again
[22:32] brianc: yeah like you said it's an art. there's always room for improvement. knowing what to test, how to test it, when to test (TDD or regression)
[22:32] brianc: yeah I like github issues with failing tests provided
[22:32] SubStack: tests are so worth it
[22:32] sorin has joined the channel
[22:32] josh-k_ has joined the channel
[22:32] TheLifelessOne: how can I dump a HTTP request response to a file?
[22:32] TheLifelessOne: It just outputs [object Object] right now.
[22:33] gtramontina has joined the channel
[22:33] maxogden: TheLifelessOne: http://docs.nodejitsu.com/articles/getting-started/how-to-use-util-inspect
[22:33] brianc: TheLifelessOne: something like http.get(options, function(res) { res.pipe(yourFile) })
[22:33] SubStack: TheLifelessOne: res.pipe(fs.createWriteStream('filename'))
[22:33] pizthewiz has joined the channel
[22:33] jxson_ has joined the channel
[22:33] TheLifelessOne: Thanks.
[22:33] johnnywengluu: TheLifelessOne: console.log util.inspect object, true, null
[22:33] SubStack: also console.dir() if you just want to look at it
[22:33] sorin has left the channel
[22:34] creationix has left the channel
[22:34] Renegade001 has joined the channel
[22:34] dgathright has joined the channel
[22:34] johnnywengluu: deadmau5: how does regression tests work?
[22:35] deadmau5: johnnywengluu tests for patches
[22:35] deadmau5: the stylus tests are pretty much just regression tests haha
[22:35] deadmau5: it's impossible to test all of that stuff
[22:35] deadmau5: 12k lines of tests doesn't even begin to cover it
[22:35] brianc: johnnywengluu: you introduce new code and it causes a bug. you write a test which fails due to the bug. you fix the code. from that point forward your test will check so you don't re-introduce that bug again
[22:35] deadmau5: no unit tests
[22:36] TheLifelessOne: why the hell is my function appearing in the request headers?
[22:36] SubStack: just write a new test or modify an existing test so that it fails right before you fix something
[22:36] SubStack: then fix it
[22:36] deadmau5: yup
[22:36] SubStack: yeps
[22:36] deadmau5: yep yep
[22:36] mmalecki: SubStack++
[22:36] v8bot_:  mmalecki has given a beer to SubStack. SubStack now has 15 beers.
[22:36] deadmau5: yop yop
[22:36] catb0t: SubStack now has 1 beer
[22:36] mmalecki: oh well.
[22:36] deadmau5: and then use testlingggg
[22:36] benlyng has joined the channel
[22:36] deadmau5: GGG
[22:37] brianc: aww yeah
[22:37] mmalecki: brianc++
[22:37] v8bot_:  mmalecki has given a beer to brianc. brianc now has 2 beers.
[22:37] brianc: woo
[22:37] johnnywengluu: brianc: hmm that is the opposite of tdd? write code first, _when_ fail, then write test
[22:38] GrizzLyCRO1 has joined the channel
[22:38] brianc: johnnywengluu: yeah, they both have a place.  regression tests are for when you invariably missed something with TDD
[22:38] jxson has joined the channel
[22:38] TheLifelessOne: what did I do wrong? https://gist.github.com/1411493
[22:39] TheLifelessOne: the damned thing is outputting the function in the headers!
[22:39] criswell has joined the channel
[22:39] zomg: Well dunno bout that but __proto__? Shouldn't that be prototype?
[22:39] nicholasf has joined the channel
[22:40] zomg: Just wondering, I know __proto__ is basically same but proprietary extension, but is there a point in doing that?
[22:40] johnnywengluu: brianc: sounds interesting .. have to read up on that .. perhaps the HTTP API should be regression tested instead
[22:40] TheLifelessOne: zomg: my understanding is that prototype only works on instances.
[22:40] pahko: I have a problem to install jade with npm
[22:40] pahko: it says that:
[22:40] pahko: npm ERR! TypeError: Bad argument
[22:40] pahko: npm ERR!     at Object._open (fs.js:224:11)
[22:40] pahko: npm ERR!     at open (/home/pahko/.nave/installed/0.6.3/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:73:6)
[22:40] pahko: npm ERR!     at Object.open (/home/pahko/.nave/installed/0.6.3/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:67:3)
[22:40] pahko: npm ERR!     at Object.lutimes (/home/pahko/.nave/installed/0.6.3/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:28:6)
[22:40] pahko: npm ERR!     at setProps (/home/pahko/.nave/installed/0.6.3/lib/node_modules/npm/node_modules/fstream/lib/writer.js:267:18)
[22:40] TheLifelessOne: __proto__ works on the object, not needing an instance.
[22:40] pahko: npm ERR!     at Object.oncomplete (/home/pahko/.nave/installed/0.6.3/lib/node_modules/npm/node_modules/fstream/lib/writer.js:205:7)
[22:40] deadmau5: woah
[22:40] stride: pahko: meh
[22:40] pahko: npm ERR! Report this *entire* log at:
[22:40] MerlinDMC has joined the channel
[22:40] pahko: npm ERR!     <http://github.com/isaacs/npm/issues>
[22:40] pahko: npm ERR! or email it to:
[22:40] pahko: npm ERR!     <npm-@googlegroups.com>
[22:40] deadmau5: wee
[22:40] pahko: npm ERR! 
[22:40] deadmau5: weeee
[22:40] TheLifelessOne: pahko: Pastebin that shit.
[22:40] pahko: npm ERR! System Linux 3.1.2-1-ARCH
[22:40] aapelip: that went well, sir
[22:40] pahko: npm ERR! command "node" "/home/pahko/.nave/installed/0.6.3/bin/npm" "install" "jade"
[22:40] pahko: npm ERR! cwd /home/pahko/Workspaces/nodejs/express/test
[22:40] zomg: TheLifelessOne: but isn't __proto__ the same thing as prototype :P
[22:40] pksunkara: lol
[22:40] stride: pahko: pastebins exist.. and there are about 5 open issues on the npm github about that
[22:40] pahko: npm ERR! node -v v0.6.3
[22:40] deadmau5: weeeeee
[22:41] pahko: npm ERR! npm -v 1.1.0-alpha-2
[22:41] pahko: npm ERR! message Bad argument
[22:41] pahko: npm ERR! 
[22:41] deadmau5: weeeeee
[22:41] pahko: npm ERR! Additional logging details can be found in:
[22:41] pahko: npm ERR!     /home/pahko/Workspaces/nodejs/express/test/npm-debug.log
[22:41] zomg: TheLifelessOne: oh nvm, missed your message because of pahko-spam
[22:41] pahko: can Anyboby help me??
[22:41] lzskiss: pahko, use gist
[22:41] lzskiss: :D
[22:41] TheLifelessOne: zomg: :)
[22:41] brianloveswords has joined the channel
[22:41] pahko: https://gist.github.com/1411514
[22:41] TheLifelessOne: pahko: DEAR GOD MAN, USE A PASTEBIN SERVICE.
[22:41] TheLifelessOne: Oh.
[22:41] TheLifelessOne: Well nevermind then.
[22:41] brianc: pro-tip: don't copy/paste multiple lines into irc
[22:41] TheLifelessOne: ACTION walks away silently.
[22:41] stride: pahko: github.com/isaacs/npm/ -> issues
[22:42] pahko: sorry for copy too much lines..
[22:42] TheLifelessOne: anyways!
[22:42] TheLifelessOne: can anyone tell me why the hell node.js is deciding to send a copy of my function with the request headers?
[22:42] stride: pahko: a downgrade to v1.0.106 seems to work, patching constants.O_SYMLINK seems to help on some systems
[22:43] TheLifelessOne: the module documentation doesn't have anything on it.
[22:43] pahko: how can I downgrade??
[22:45] tokumine has joined the channel
[22:45] brianc: TheLifelessOne: not sure. very strange. but why are you using __proto__ instead of .prototype?
[22:46] TheLifelessOne: brianc: my understanding is that .instance only works on instances of the object, whereas __proto__ can work without an instance.
[22:46] brianc: TheLifelessOne: oh, yeah. I see what you're saying
[22:46] StanlySoManly has joined the channel
[22:47] brianc: TheLifelessOne: I think. :)
[22:47] enmand has joined the channel
[22:47] brianc: TheLifelessOne: why not just redit.login = function() {...}?
[22:47] TheLifelessOne: because that would make sense
[22:48] brianc: TheLifelessOne: I'm really no help. never used the request module
[22:48] TheLifelessOne: neither have I. :/
[22:48] TheLifelessOne: I'd use the native functions, but they're too confusing
[22:48] brianc: TheLifelessOne: maybe it's doing something clever with "this"? try request.call(request, {optionsObject})
[22:49] tlynn has joined the channel
[22:49] TheLifelessOne: ah, sorry, phonecall.
[22:49] shanebo: anyone know of a synchronous open uri class?
[22:49] mikl has joined the channel
[22:49] Renegade001 has joined the channel
[22:49] brianc: shanebo: httparty (rubygem) :p
[22:49] shanebo: hahahahaha
[22:50] context: heh
[22:50] brianc: there is no synchronous open uri class in node unless someone implemented one in a 3rd party C++ addon (doubtful) 
[22:50] joshsmith has joined the channel
[22:51] shanebo: brianc man I need some blocking love minus callbacks somehow
[22:51] _th_n has joined the channel
[22:51] shanebo: (before server starts)
[22:51] jocafa: blasphemer
[22:51] pahko: does anyone know how to downgrade npm to v1.0.106? my version is 1.1.0-alpha-2
[22:51] torm3nt: anyone here use haml.js for templating?
[22:51] brianc: shanebo: I believe in the world of node 'blocking' is an antonym of 'love'
[22:51] tracker1 has joined the channel
[22:51] shanebo: jocafa just like you do every time you require a file ;)
[22:52] shanebo: gents, this is needed before the server starts, just like require does
[22:52] brianc: shanebo: seriously though....it is nice to do blocking things before the server starts listening...but you might just have to put the .listen call in a callback for this
[22:52] shedinja_ has joined the channel
[22:52] brianc: shanebo: sorry for the light trolling. 
[22:53] shanebo: ha no worries
[22:53] shanebo: but it's not the listener that's the prob
[22:53] mertimor has joined the channel
[22:53] shanebo: i need to pass in a result to a class after something loads
[22:55] shanebo: brianc if I can't think of a sync way to do it I'll be in callback hell
[22:55] shanebo: :(
[22:55] brianc: shanebo: :( maybe a step library?
[22:55] pahko: does anyone know how to downgrade npm to v1.0.106? my version is 1.1.0-alpha-2
[22:56] shanebo: brianc perhaps but then things lose their scope
[22:56] brianc: pahko: delete the npm folder, check out an earlier tag in the git repo, and install it from there?
[22:57] quackquack has joined the channel
[22:57] brianc: shanebo: yeah...it may just be this is one of those times callbacks become cumbersome.  you could use an event emitter to kinda "flatten out" the callbacks
[22:57] TheLifelessOne: ho-kay.
[22:58] pahko: brianc, ok I check .. thanks
[22:58] StanlySoManly has joined the channel
[22:59] shanebo: brianc can I do exports from a callback where the requirer will still get it?
[23:00] TheLifelessOne: brianc: You were right about request.call(...)
[23:00] brianc: shanebo: negative. not unless that particular exports is accessed after the callback is finished. and even then I'm not sure
[23:00] brianc: shanebo: you can have the module export a function which takes a callback as its only argument and call that function when it's "ready"
[23:00] brianc: exports = function(cb) { /* do stuff */ cb(null, result) }
[23:01] brianc: require('thing')(function(err, result) { /* other module ready */ })
[23:01] TheLifelessOne: Eh, nevermind.
[23:01] TheLifelessOne: This is weird.
[23:01] brianc: still 'callback hell' :) I find callbacks kinda nice though. maybe it's Stockholm syndrome?
[23:01] stride: module.exports = <-- or did that change? was necessary <= 0.4 when you wanted to exchange exports as a whole
[23:01] TheLifelessOne: it only seems to happen when I include custom headers.
[23:02] brianc: exports is an alias for module.exports
[23:02] eignerchris has joined the channel
[23:02] strmpnk has joined the channel
[23:03] stride: still needed if you want to call that exported function
[23:04] stride: try it w/ module.exports = function() { console.log('foo'); } vs. exports = function() .. and require('module')() that
[23:04] stride: think that was because of the function that's wrapped around modules by require or something like that
[23:04] shanebo: brianc, stride so i need something like var handshake = function(foo) { return module } ?
[23:05] Trent has joined the channel
[23:05] brianc: stride: ah cool
[23:06] brianc: shanebo: i dunno. hard to understand what you're trying to do. could you gist it?
[23:06] fbartho has joined the channel
[23:07] shanebo: brianc  i've already got the callback figured out but what I'm stuck on is trying to fire a function that will return exports to what required this file to begin with
[23:07] briancray has joined the channel
[23:07] franciscallo has joined the channel
[23:07] scttnlsn has joined the channel
[23:08] mikl has joined the channel
[23:08] Trent: Is there anyway to force a http.get() to be non-asynchronous?
[23:08] stride: normally the "what required this file" provides the callback, where you can pass whatever you like (for example your now initialized module) as parameters
[23:08] ShinyDarkness has joined the channel
[23:09] stride: trent: afaik, no.
[23:09] sechrist_: why would you want to do a synchronous web request in node, remote require?
[23:11] Trent: I am trying to check the status of a web site, (If it's up or not) and display the result in a browser. Like a downforeveryoneorjustme.com
[23:12] tomlion has joined the channel
[23:12] brianc1 has joined the channel
[23:13] Mustansir has joined the channel
[23:13] brianc1: Trent: there is no way
[23:13] stride: trent: why does that require synchronous calls?
[23:14] Trent: stride: Because for some reason it is not display the results to the browser
[23:15] mikl1 has joined the channel
[23:15] migou has joined the channel
[23:15] devongovett has joined the channel
[23:15] stride: trent: there has to be a point in your code where you assemble the http response (I take it you're not using a framework?). make sure it is executed after you checked the servers
[23:16] satyr has joined the channel
[23:16] mandric has joined the channel
[23:16] rio{ has joined the channel
[23:16] migou: Lost with git, who can help me to push pull request. (windows tortoise version)
[23:16] shanebo: stride brianc I'm trying to do something like this
[23:16] shanebo: http://cl.ly/1c0V3e381z0j3R0D0l1z
[23:17] brianc1: migou: might want to ask in #git
[23:17] incon has joined the channel
[23:17] shanebo: brianc1 Ë†Ë† http://cl.ly/1c0V3e381z0j3R0D0l1z
[23:17] migou: okee dokee but in fact it was a try to push a pull request in nodejs git repo
[23:17] aesptux has joined the channel
[23:18] uchuff has joined the channel
[23:18] stride: shanebo: that looks.. weird :)
[23:19] shanebo: exactly i'm in inception
[23:19] brianc1: shanebo: yeah I no comprendo exactly
[23:19] pokoli: migou, don't know if it's this what you want http://www.teeworlds.com/forum/viewtopic.php?id=7316
[23:19] pokoli: but is the first reply on google from the question you asked here
[23:19] brianc1: shanebo: maybe more functionally what are you trying to do?
[23:20] jbrokc has joined the channel
[23:20] brianc1: pokoli: migou left the room. :( I didn't mean to run him out...I just meant you probably get better git help in git chat
[23:20] shanebo: i need to set a key on that class once something loads remotely
[23:20] TheLifelessOne: how can I write to POST with http.request(...)?
[23:20] shanebo: and not export the server until that happens
[23:21] pokoli: brianc1, sorry for the noise. was searching it on google while he got out
[23:21] stride: do you need only the server after that point?
[23:21] stride: @ shanebo 
[23:21] shanebo: stride no I need two things
[23:22] shanebo: meaning I need to export a couple things to the requiring file
[23:22] maxogden: TheLifelessOne: use github.com/mikeal/request
[23:22] TheLifelessOne: I have been, and it doesn't work for my purposes.
[23:23] maxogden: if your purposes are http then it should work 
[23:23] TheLifelessOne: it keeps putting the calling function into the request headers.
[23:24] maxogden: TheLifelessOne: you might be using it wrong then, it doesnt add any extra headers by default
[23:24] TheLifelessOne: All I did was include custom headers.
[23:24] stride: shanebo: maybe something like this makes sense for you http://hastebin.com/G40Cr1ekxd.pas
[23:24] vguerra_ has joined the channel
[23:25] maxogden: TheLifelessOne: if you post code i will help you debug
[23:25] stride: anyway, I'm out. good luck deciding on a pattern :)
[23:25] RushPL_ has joined the channel
[23:25] joemccann has joined the channel
[23:25] TheLifelessOne: maxogden: https://gist.github.com/1411493
[23:25] brianc1: shanebo: how about something like this https://gist.github.com/1411829 ?
[23:25] shanebo: stride the requirer is more uniform loading in many apps so I'd like to avoid backing up the problem if I can avoid it
[23:26] wilmoore has joined the channel
[23:27] Danielss89_ has joined the channel
[23:27] txxt has joined the channel
[23:27] ambroff has joined the channel
[23:27] maxogden: TheLifelessOne: looks normal to me: https://gist.github.com/8130cd9889df6595f92f
[23:27] Danielss89_: Hey.. someone wants to help me "load test"? go to http://sccups.com and move your mouse around :D
[23:27] ohtogo has joined the channel
[23:27] TheLifelessOne: maxogden: Odd...
[23:29] jerrysv: Danielss89_: like maxogden's thing, just not as fun?
[23:29] brianseeders has joined the channel
[23:29] brianc1: Danielss89_: often it's a good tradeoff to sample the mouse position a few times a second instead of doing an 'onmousemove'
[23:29] maxogden: jerrysv: lol
[23:29] trotter has joined the channel
[23:29] Danielss89_: hehe :D
[23:29] maxogden: CURSOR DISCO FTW
[23:29] jerrysv: indeed!
[23:29] brianc1: maxogden: lol
[23:29] Danielss89_: jerrysv: what is maxogden thing? :D
[23:30] maxogden: Danielss89_: its not up anymore but it implemented this gif http://boourns.cjb.net/pics/CursorDisco.gif
[23:30] Danielss89_: lol :D
[23:33] davidbanham has joined the channel
[23:33] skm has joined the channel
[23:34] mraleph has joined the channel
[23:34] joshsmith has joined the channel
[23:34] deadmau5: whoever wrote process.exceptionCatcher in the wiki
[23:34] deadmau5: should probably remove that
[23:34] deadmau5: it's prone to race conditions...
[23:34] deadmau5: really bad suggestion
[23:35] brianc1: which wiki?
[23:35] deadmau5: https://github.com/joyent/node/wiki/Async-Exception-Handling
[23:36] aaronmcadam: the guy from cloud9 said using try/catch with async code is a nono
[23:36] mike5w3c has joined the channel
[23:38] brianc1: deadmau5: yeah this doesn't look like it's actually written by anyone on the core node team
[23:39] gtramontina has joined the channel
[23:39] stantona has joined the channel
[23:39] brianc1: deadmau5: plus I thought the 'domain' feature on the roadmap was to solve some of this
[23:39] deadmau5: i dont want to remove it on him
[23:39] deadmau5: maybe edit in a note or something
[23:39] willwhite has joined the channel
[23:43] zigidias has joined the channel
[23:44] nicholasf has joined the channel
[23:45] subbyyy has joined the channel
[23:45] springmeyer has joined the channel
[23:46] tomlion_ has joined the channel
[23:48] diminoten has joined the channel
[23:49] franciscallo has joined the channel
[23:49] brianc1: deadmau5: I love that you merge suites in mocha. makes starting & stopping an http server in a before()/after() so seeemple. can still spread the http tests over multipe files
[23:50] brianc1: as long as they're all within the same parent context like "describe('routes')" or something
[23:50] ircdearia has joined the channel
[23:50] deadmau5: yup :)
[23:50] deadmau5: and they dont even need to be nested the same
[23:50] brianc1: most baller shit there is
[23:50] deadmau5: describe('foo' with describe('bar' inside could be describe('foo bar' later
[23:50] base698 has joined the channel
[23:51] brianc1: ah nice
[23:51] rchavik has joined the channel
[23:51] brianc1: so you could do like describe('GET') and then later describe('GET /')
[23:51] deadmau5: yup
[23:51] brianc1: ACTION plays air guitar solo
[23:51] markwubben has joined the channel
[23:52] jbrokc_ has joined the channel
[23:53] WarDekar has joined the channel
[23:53] jbrokc has joined the channel
[23:54] WarDekar: hey i'm just getting started with Node and am interested in trying out WebSockets/Socket.IO with it... does anyone have any recommendation for the best tutorial to start? a lot of the ones i've found googling are older and i'm sure there are things that are up to date more
[23:54] stantona has joined the channel
[23:54] jldbasa has joined the channel
[23:55] deadmau5: brianc1 do you have bcat?
[23:55] brianc1: WarDekar: the examples on http://socket.io are helpful. they should get you up and running
[23:56] brianc1: deadmau5: negative. don't know what bcat is (pipe to browser utility?)
[23:56] deadmau5: yup
[23:56] deadmau5: gem install that
[23:56] deadmau5: and
[23:56] deadmau5: mocha -r should -R doc | bcat
[23:56] deadmau5: slap some styling on that
[23:56] deadmau5: insta-docs
[23:56] brianc1: deadmau5: sweet gonna try that
[23:57] isaacs: pahko: just do the normal curl|sh instal
[23:57] isaacs: ircretary: inst pahko 
[23:57] ircretary: pahko: `curl http://npmjs.org/install.sh | sh` (or, if there are permission issues, you can try: `curl http://npmjs.org/install.sh | sudo sh`)
[23:58] walkah has left the channel
[23:59] brianc1: deadmau5: ah holy crap that's awesome
